(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 10.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    537756,      11292]
NotebookOptionsPosition[    526698,      10937]
NotebookOutlinePosition[    527216,      10958]
CellTagsIndexPosition[    527173,      10955]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["Data Dependence", "Title",
 CellChangeTimes->{{3.5935638072783327`*^9, 3.5935638128203325`*^9}, {
  3.5935645850583324`*^9, 3.5935645883613324`*^9}}],

Cell[CellGroupData[{

Cell["Definitions", "Section",
 CellChangeTimes->{{3.5935646682263327`*^9, 3.5935646699933324`*^9}}],

Cell[TextData[{
 "Let ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["S", "1"], TraditionalForm]],
  FormatType->"TraditionalForm"],
 " and ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["S", "2"], TraditionalForm]],
  FormatType->"TraditionalForm"],
 " be two statements, we define:"
}], "Text",
 CellChangeTimes->{{3.5935646785843325`*^9, 3.5935647027953324`*^9}}],

Cell[TextData[{
 Cell[BoxData[
  FormBox[
   RowBox[{"IN", "(", 
    SubscriptBox["S", "1"], ")"}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 " \[LongDash] The set of variables used in ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["S", "1"], TraditionalForm]],
  FormatType->"TraditionalForm"]
}], "Text",
 CellDingbat->"\[FilledSquare]",
 CellChangeTimes->{{3.5935647243833323`*^9, 3.5935647768773327`*^9}, {
  3.5935650734213324`*^9, 3.593565075220332*^9}, {3.593565488798332*^9, 
  3.5935655218183327`*^9}}],

Cell[TextData[{
 Cell[BoxData[
  FormBox[
   RowBox[{"OUT", "(", 
    SubscriptBox["S", "1"], ")"}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 " \[LongDash] The set of variables written in ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["S", "1"], TraditionalForm]],
  FormatType->"TraditionalForm"]
}], "Text",
 CellDingbat->"\[FilledSquare]",
 CellChangeTimes->{{3.5935647243833323`*^9, 3.5935647768773327`*^9}, {
  3.5935650734213324`*^9, 3.593565075220332*^9}, {3.593565488798332*^9, 
  3.5935655312003326`*^9}, {3.593566722467074*^9, 3.5935667225391026`*^9}}],

Cell[TextData[{
 StyleBox["Flow Dependence ",
  FontSlant->"Italic"],
 "(",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["S", "1"], 
    SuperscriptBox["\[Delta]", "f"], 
    SubscriptBox["S", "2"]}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 ") \[LongDash] variable written and then used (RAW) \[Ellipsis] ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     RowBox[{"OUT", "(", 
      SubscriptBox["S", "1"], ")"}], "\[Intersection]", 
     RowBox[{"IN", "(", 
      SubscriptBox["S", "2"], ")"}]}], "\[NotEqual]", " ", "\[EmptySet]"}], 
   TraditionalForm]],
  FormatType->"TraditionalForm"]
}], "Text",
 CellDingbat->"\[FilledSquare]",
 CellChangeTimes->{{3.5935647243833323`*^9, 3.5935647768773327`*^9}, {
  3.5935650734213324`*^9, 3.593565075220332*^9}, {3.5935667134794807`*^9, 
  3.5935667859204454`*^9}, {3.5935668458994274`*^9, 3.5935668562695737`*^9}, {
  3.5935668966457176`*^9, 3.5935668971979384`*^9}}],

Cell[TextData[{
 StyleBox["Anti-Dependence ",
  FontSlant->"Italic"],
 "(",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["S", "1"], 
    SuperscriptBox["\[Delta]", "a"], 
    SubscriptBox["S", "2"]}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 ") \[LongDash] variable used and then written (WAR) \[Ellipsis] ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     RowBox[{"IN", "(", 
      SubscriptBox["S", "1"], ")"}], "\[Intersection]", 
     RowBox[{"OUT", "(", 
      SubscriptBox["S", "2"], ")"}]}], "\[NotEqual]", " ", "\[EmptySet]"}], 
   TraditionalForm]],
  FormatType->"TraditionalForm"]
}], "Text",
 CellDingbat->"\[FilledSquare]",
 CellChangeTimes->{{3.5935647243833323`*^9, 3.5935647768773327`*^9}, {
  3.5935650734213324`*^9, 3.5935650990263324`*^9}, {3.5935667281223354`*^9, 
  3.5935667343508253`*^9}, {3.5935667948960342`*^9, 3.5935668200080748`*^9}, {
  3.5935668621189127`*^9, 3.5935668922609644`*^9}}],

Cell[TextData[{
 StyleBox["Output Dependence ",
  FontSlant->"Italic"],
 "(",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["S", "1"], 
    SuperscriptBox["\[Delta]", "o"], 
    SubscriptBox["S", "2"]}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 ") \[LongDash] variable written and then written (WAW) \[Ellipsis] ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     RowBox[{"OUT", "(", 
      SubscriptBox["S", "1"], ")"}], "\[Intersection]", 
     RowBox[{"OUT", "(", 
      SubscriptBox["S", "2"], ")"}]}], "\[NotEqual]", " ", "\[EmptySet]"}], 
   TraditionalForm]],
  FormatType->"TraditionalForm"]
}], "Text",
 CellDingbat->"\[FilledSquare]",
 CellChangeTimes->{{3.5935647243833323`*^9, 3.5935647768773327`*^9}, {
  3.5935650734213324`*^9, 3.5935651108563323`*^9}, {3.593566796696754*^9, 
  3.593566825826401*^9}, {3.593566878306385*^9, 3.593566885427232*^9}}],

Cell[TextData[{
 StyleBox["Input Dependence ",
  FontSlant->"Italic"],
 "(",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["S", "1"], 
    SuperscriptBox["\[Delta]", "I"], 
    SubscriptBox["S", "2"]}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 ") \[LongDash] variable used and then used (RAR) \[Ellipsis] ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     RowBox[{"IN", "(", 
      SubscriptBox["S", "1"], ")"}], "\[Intersection]", 
     RowBox[{"IN", "(", 
      SubscriptBox["S", "2"], ")"}]}], "\[NotEqual]", " ", "\[EmptySet]"}], 
   TraditionalForm]],
  FormatType->"TraditionalForm"]
}], "Text",
 CellDingbat->"\[FilledSquare]",
 CellChangeTimes->{{3.5935647243833323`*^9, 3.5935647768773327`*^9}, {
  3.5935650734213324`*^9, 3.5935651108563323`*^9}, {3.5935656171893325`*^9, 
  3.593565620543332*^9}, {3.5935667987935925`*^9, 3.593566801235569*^9}, {
  3.5935669029752483`*^9, 3.593566908368338*^9}}],

Cell[TextData[{
 StyleBox["Dependence ",
  FontSlant->"Italic"],
 "(",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["S", "1"], 
    SuperscriptBox["\[Delta]", "*"], 
    SubscriptBox["S", "2"]}], TraditionalForm]]],
 ") \[LongDash] ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     SubscriptBox["S", "1"], 
     SuperscriptBox["\[Delta]", "f"], 
     SubscriptBox["S", "2"]}], "\[Or]", 
    RowBox[{
     SubscriptBox["S", "1"], 
     SuperscriptBox["\[Delta]", "a"], 
     SubscriptBox["S", "2"]}], "\[Or]", 
    RowBox[{
     SubscriptBox["S", "1"], 
     SuperscriptBox["\[Delta]", "o"], 
     SubscriptBox["S", "2"]}]}], TraditionalForm]]]
}], "Text",
 CellDingbat->"\[FilledSquare]",
 CellChangeTimes->{{3.5935647243833323`*^9, 3.5935647768773327`*^9}, {
  3.5935650734213324`*^9, 3.5935651108563323`*^9}, {3.5935656171893325`*^9, 
  3.593565620543332*^9}, {3.5935667987935925`*^9, 3.593566801235569*^9}, {
  3.5935669029752483`*^9, 3.593566908368338*^9}, {3.5935669600646753`*^9, 
  3.593567005138688*^9}}],

Cell["Consider the program:", "Text",
 CellChangeTimes->{{3.5935646785843325`*^9, 3.5935647027953324`*^9}, {
  3.5935670881132793`*^9, 3.593567090569771*^9}}],

Cell["\<\
1. A = 0
2. B = A
3. A = B + 1
4. C = A
5. S = &G
6. T = &G
7. *S = 3
8. *B = 4
9. Q = *A\
\>", "Program",
 CellChangeTimes->{{3.593567097431143*^9, 3.5935671846585846`*^9}}],

Cell[TextData[{
 StyleBox["Address Based",
  FontSlant->"Italic"],
 " dependence:"
}], "Text",
 CellChangeTimes->{{3.5935646785843325`*^9, 3.5935647027953324`*^9}, {
  3.593565139984332*^9, 3.5935651596923323`*^9}, {3.5935671892425013`*^9, 
  3.593567190994852*^9}}],

Cell[TextData[{
 StyleBox["Value Based",
  FontSlant->"Italic"],
 " dependence: (subset of address based dependence)"
}], "Text",
 CellChangeTimes->{{3.5935646785843325`*^9, 3.5935647027953324`*^9}, {
  3.593565139984332*^9, 3.593565153621332*^9}, {3.593567037217102*^9, 
  3.5935670454647512`*^9}}],

Cell[TextData[{
 StyleBox["Index Variable Interation Vector ",
  FontSlant->"Italic"],
 "(",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SuperscriptBox["i", "iv"], "="}], TraditionalForm]]],
 Cell[BoxData[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {
      SubscriptBox["I", "1"]},
     {
      SubscriptBox["I", "2"]},
     {"\[VerticalEllipsis]"},
     {
      SubscriptBox["I", "n"]}
    }], "\[NoBreak]", ")"}]]],
 ") \[LongDash] "
}], "Text",
 CellDingbat->"\[FilledSquare]",
 CellChangeTimes->{{3.5935647243833323`*^9, 3.5935647768773327`*^9}, {
  3.5935650734213324`*^9, 3.5935651108563323`*^9}, {3.5935656171893325`*^9, 
  3.593565620543332*^9}, {3.5935667987935925`*^9, 3.593566801235569*^9}, {
  3.5935669029752483`*^9, 3.593566908368338*^9}, {3.5935669600646753`*^9, 
  3.593567005138688*^9}, {3.5935682338068304`*^9, 3.5935683460970583`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Data Dependence", "Section",
 CellChangeTimes->{{3.5935646682263327`*^9, 3.5935646699933324`*^9}, {
  3.593567197283109*^9, 3.5935672043875303`*^9}, {3.5935686134847946`*^9, 
  3.593568617363182*^9}, {3.5937182473755493`*^9, 3.593718247718549*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"OUT", "[", "stmt_", "]"}], ":=", 
   RowBox[{"Cases", "[", 
    RowBox[{
     RowBox[{"{", "stmt", "}"}], ",", 
     RowBox[{
      RowBox[{
       RowBox[{"Inactive", "[", "Set", "]"}], "[", 
       RowBox[{"var_", ",", "___"}], "]"}], "\[Rule]", "var"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"IN", "[", "stmt_", "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", "r", "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"r", "=", 
      RowBox[{"Cases", "[", 
       RowBox[{
        RowBox[{"{", "stmt", "}"}], ",", 
        RowBox[{
         RowBox[{
          RowBox[{"Inactive", "[", "Set", "]"}], "[", 
          RowBox[{"_", ",", "rest___"}], "]"}], "\[Rule]", "rest"}]}], 
       "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"r", "=", 
      RowBox[{"r", "/.", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{
          RowBox[{"Inactive", "[", "_", "]"}], "[", "rest___", "]"}], 
         "\[Rule]", 
         RowBox[{"{", "rest", "}"}]}], "}"}]}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"r", "=", 
      RowBox[{"Flatten", "[", "r", "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"Select", "[", 
      RowBox[{"r", ",", 
       RowBox[{
        RowBox[{
         RowBox[{"Head", "[", "#", "]"}], "===", "Symbol"}], "&"}]}], 
      "]"}]}]}], "\[IndentingNewLine]", "]"}]}]}], "Input",
 CellChangeTimes->{{3.593634697355715*^9, 3.593634762809715*^9}, {
   3.593634822686715*^9, 3.593634905566715*^9}, {3.593635029479715*^9, 
   3.5936350801997147`*^9}, {3.5936352918497148`*^9, 3.5936353256167145`*^9}, 
   3.5937183141395493`*^9, {3.593719785811549*^9, 3.593719858774549*^9}, {
   3.593719889049549*^9, 3.593720177381549*^9}, {3.593720284943549*^9, 
   3.593720286853549*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"FlowDependence", "[", 
   RowBox[{"s1_", ",", "s2_"}], "]"}], ":=", 
  RowBox[{"Intersection", "[", 
   RowBox[{
    RowBox[{"OUT", "[", "s1", "]"}], ",", 
    RowBox[{"IN", "[", "s2", "]"}]}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"AntiDependence", "[", 
   RowBox[{"s1_", ",", "s2_"}], "]"}], ":=", 
  RowBox[{"Intersection", "[", 
   RowBox[{
    RowBox[{"IN", "[", "s1", "]"}], ",", 
    RowBox[{"OUT", "[", "s2", "]"}]}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"OutputDependence", "[", 
   RowBox[{"s1_", ",", "s2_"}], "]"}], ":=", 
  RowBox[{"Intersection", "[", 
   RowBox[{
    RowBox[{"OUT", "[", "s1", "]"}], ",", 
    RowBox[{"OUT", "[", "s2", "]"}]}], "]"}]}]}], "Input",
 CellChangeTimes->{{3.593720221737549*^9, 3.593720244462549*^9}, {
  3.5937203055855494`*^9, 3.593720330804549*^9}, {3.593720400728549*^9, 
  3.5937204154155493`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"ClearAll", "[", 
  RowBox[{
  "s1", ",", "s2", ",", "s3", ",", "s4", ",", "x", ",", "a", ",", "b", ",", 
   "c", ",", "d"}], "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"s1", "=", 
   RowBox[{"Inactivate", "[", 
    RowBox[{"x", "=", 
     RowBox[{"a", "+", "b"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"s2", "=", 
   RowBox[{"Inactivate", "[", 
    RowBox[{"y", "=", 
     RowBox[{"x", "+", "c"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"s3", "=", 
   RowBox[{"Inactivate", "[", 
    RowBox[{"x", "=", 
     RowBox[{"c", "+", "d"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"s4", "=", 
   RowBox[{"Inactivate", "[", 
    RowBox[{"x", "=", 
     RowBox[{"x", "+", "d"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"Through", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"IN", ",", "OUT"}], "}"}], "[", "s1", "]"}], 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{"Through", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"IN", ",", "OUT"}], "}"}], "[", "s2", "]"}], "]"}]}], "Input",
 CellChangeTimes->{{3.593720183689549*^9, 3.5937202187055492`*^9}, {
  3.5937203365485487`*^9, 3.593720374987549*^9}, {3.593720419629549*^9, 
  3.593720485846549*^9}, {3.5937206409635487`*^9, 3.593720657615549*^9}, {
  3.593720696895549*^9, 3.5937207231545486`*^9}, {3.593720889867549*^9, 
  3.5937208920665493`*^9}, {3.593722509936549*^9, 3.593722521636549*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"a", ",", "b"}], "}"}], ",", 
   RowBox[{"{", "x", "}"}]}], "}"}]], "Output",
 CellChangeTimes->{
  3.5937202461405487`*^9, 3.593720288677549*^9, 3.593720375410549*^9, {
   3.593720425829549*^9, 3.593720486268549*^9}, 3.5937206580885487`*^9, {
   3.5937207076845493`*^9, 3.5937207234895487`*^9}, 3.593720892521549*^9, {
   3.593722512289549*^9, 3.593722522104549*^9}, 3.5937294629635487`*^9, 
   3.593730226880549*^9, 3.593730862189549*^9, 3.593730908498549*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"x", ",", "c"}], "}"}], ",", 
   RowBox[{"{", "y", "}"}]}], "}"}]], "Output",
 CellChangeTimes->{
  3.5937202461405487`*^9, 3.593720288677549*^9, 3.593720375410549*^9, {
   3.593720425829549*^9, 3.593720486268549*^9}, 3.5937206580885487`*^9, {
   3.5937207076845493`*^9, 3.5937207234895487`*^9}, 3.593720892521549*^9, {
   3.593722512289549*^9, 3.593722522104549*^9}, 3.5937294629635487`*^9, 
   3.593730226880549*^9, 3.593730862189549*^9, 3.593730908502549*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Through", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
    "FlowDependence", ",", "AntiDependence", ",", "OutputDependence"}], "}"}],
    "[", 
   RowBox[{"s1", ",", "s2"}], "]"}], "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", "x", "}"}], ",", 
   RowBox[{"{", "}"}], ",", 
   RowBox[{"{", "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.593720461465549*^9, 3.5937206595405493`*^9, 
  3.593720724204549*^9, 3.593722522836549*^9, 3.593729462980549*^9, 
  3.5937302268975487`*^9, 3.593730862208549*^9, 3.5937309085145493`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Through", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
    "FlowDependence", ",", "AntiDependence", ",", "OutputDependence"}], "}"}],
    "[", 
   RowBox[{"s2", ",", "s1"}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.5937205175665493`*^9, 3.593720525016549*^9}, {
  3.593720668661549*^9, 3.5937206717315493`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", "}"}], ",", 
   RowBox[{"{", "x", "}"}], ",", 
   RowBox[{"{", "}"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.593720521362549*^9, 3.593720525466549*^9}, {
   3.593720660539549*^9, 3.5937206722175493`*^9}, 3.593720724811549*^9, 
   3.593722523215549*^9, 3.593729462994549*^9, 3.5937302269095488`*^9, 
   3.593730862218549*^9, 3.593730908525549*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Through", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
    "FlowDependence", ",", "AntiDependence", ",", "OutputDependence"}], "}"}],
    "[", 
   RowBox[{"s1", ",", "s3"}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.5937207306335487`*^9, 3.593720733752549*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", "}"}], ",", 
   RowBox[{"{", "}"}], ",", 
   RowBox[{"{", "x", "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.5937207343905487`*^9, 3.593722523597549*^9, 
  3.5937294630075493`*^9, 3.593730226920549*^9, 3.593730862233549*^9, 
  3.593730908537549*^9}]
}, Open  ]],

Cell[BoxData[{
 RowBox[{
  RowBox[{"gFlowDependence", "[", 
   RowBox[{"pts_", ",", "e_"}], "]"}], ":=", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"Arrowheads", "[", 
     RowBox[{"{", 
      RowBox[{"{", 
       RowBox[{".1", ",", "0.9"}], "}"}], "}"}], "]"}], ",", 
    RowBox[{"Arrow", "[", "pts", "]"}]}], "}"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"gAntiDependence", "[", 
   RowBox[{"pts_", ",", "e_"}], "]"}], ":=", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"Arrowheads", "[", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"0.02", ",", "0.5", ",", 
         RowBox[{"Graphics", "[", 
          RowBox[{"{", 
           RowBox[{"Thick", ",", 
            RowBox[{"Line", "[", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{"0", ",", "1"}], "}"}], ",", 
               RowBox[{"{", 
                RowBox[{"0", ",", 
                 RowBox[{"-", "1"}]}], "}"}]}], "}"}], "]"}]}], "}"}], 
          "]"}]}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{".1", ",", "0.9"}], "}"}]}], "}"}], "]"}], ",", 
    RowBox[{"Arrow", "[", "pts", "]"}]}], "}"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"gOutputDependence", "[", 
   RowBox[{"pts_", ",", "e_"}], "]"}], ":=", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"Arrowheads", "[", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"0.02", ",", "0.5", ",", 
         RowBox[{"Graphics", "[", 
          RowBox[{"{", 
           RowBox[{"Thick", ",", 
            RowBox[{"Line", "[", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"-", "1"}], ",", 
                 RowBox[{"-", "1"}]}], "}"}], ",", 
               RowBox[{"{", 
                RowBox[{"1", ",", "1"}], "}"}]}], "}"}], "]"}], ",", 
            RowBox[{"Line", "[", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"-", "1"}], ",", "1"}], "}"}], ",", 
               RowBox[{"{", 
                RowBox[{"1", ",", 
                 RowBox[{"-", "1"}]}], "}"}]}], "}"}], "]"}]}], "}"}], 
          "]"}]}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{".1", ",", "0.9"}], "}"}]}], "}"}], "]"}], ",", 
    RowBox[{"Arrow", "[", "pts", "]"}]}], "}"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"gInputDependence", "[", 
   RowBox[{"pts_", ",", "e_"}], "]"}], ":=", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"Arrowheads", "[", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"0.02", ",", "0.5", ",", 
         RowBox[{"Graphics", "[", 
          RowBox[{"{", 
           RowBox[{"Thick", ",", 
            RowBox[{"Circle", "[", "]"}]}], "}"}], "]"}]}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{".1", ",", "0.9"}], "}"}]}], "}"}], "]"}], ",", 
    RowBox[{"Arrow", "[", "pts", "]"}]}], "}"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"panelLabel", "[", "lbl_", "]"}], ":=", 
  RowBox[{"Panel", "[", 
   RowBox[{"lbl", ",", 
    RowBox[{"FrameMargins", "\[Rule]", "0"}], ",", 
    RowBox[{"Background", "\[Rule]", 
     RowBox[{"Directive", "[", 
      RowBox[{"Yellow", ",", 
       RowBox[{"Opacity", "[", "0.1", "]"}]}], "]"}]}]}], "]"}]}]}], "Input",
 CellChangeTimes->{{3.593721495608549*^9, 3.593721514365549*^9}, {
  3.593721661608549*^9, 3.593721724285549*^9}, {3.5937217556405487`*^9, 
  3.5937217926405487`*^9}, {3.593721840702549*^9, 3.593721840848549*^9}, {
  3.593721951301549*^9, 3.593721957089549*^9}, {3.593722007551549*^9, 
  3.5937220182055492`*^9}, {3.5937220833385487`*^9, 3.593722112716549*^9}, {
  3.593722172488549*^9, 3.593722175435549*^9}, {3.593722223613549*^9, 
  3.593722245089549*^9}, {3.593722324010549*^9, 3.593722340860549*^9}, {
  3.593722486365549*^9, 3.593722502577549*^9}, {3.5937230827245493`*^9, 
  3.593723094760549*^9}, {3.593723136675549*^9, 3.593723191247549*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"DependenceGraph", "[", "stmts_", "]"}], ":=", 
  "\[IndentingNewLine]", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"subs", "=", 
       RowBox[{"Subsets", "[", 
        RowBox[{"stmts", ",", 
         RowBox[{"{", "2", "}"}]}], "]"}]}], ",", "s1", ",", "s2", ",", "v1", 
      ",", "v2", ",", "edges", ",", "type", ",", "isFlowDependence", ",", 
      "isAntiDependence", ",", "isOutputDependence", ",", "edge", ",", 
      "sub"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"edges", "=", 
      RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"isFlowDependence", "[", 
       RowBox[{"s1_", ",", "s2_"}], "]"}], ":=", 
      RowBox[{
       RowBox[{"FlowDependence", "[", 
        RowBox[{"s1", ",", "s2"}], "]"}], "=!=", 
       RowBox[{"{", "}"}]}]}], ";", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"isAntiDependence", "[", 
       RowBox[{"s1_", ",", "s2_"}], "]"}], ":=", 
      RowBox[{
       RowBox[{"AntiDependence", "[", 
        RowBox[{"s1", ",", "s2"}], "]"}], "=!=", 
       RowBox[{"{", "}"}]}]}], ";", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"isOutputDependence", "[", 
       RowBox[{"s1_", ",", "s2_"}], "]"}], ":=", 
      RowBox[{
       RowBox[{"OutputDependence", "[", 
        RowBox[{"s1", ",", "s2"}], "]"}], "=!=", 
       RowBox[{"{", "}"}]}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"Do", "[", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{"{", 
          RowBox[{"s1", ",", "s2"}], "}"}], "=", "sub"}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"v1", "=", 
         RowBox[{"First", "[", 
          RowBox[{"Flatten", "[", 
           RowBox[{"Position", "[", 
            RowBox[{"stmts", ",", "s1"}], "]"}], "]"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"v2", "=", 
         RowBox[{"First", "[", 
          RowBox[{"Flatten", "[", 
           RowBox[{"Position", "[", 
            RowBox[{"stmts", ",", "s2"}], "]"}], "]"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"edge", "=", 
         RowBox[{"Which", "[", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"isAntiDependence", "[", 
            RowBox[{"s1", ",", "s2"}], "]"}], ",", "\[IndentingNewLine]", 
           RowBox[{"Property", "[", 
            RowBox[{
             RowBox[{"v1", "\[Rule]", "v2"}], ",", 
             RowBox[{"EdgeShapeFunction", "->", "gAntiDependence"}]}], "]"}], 
           ",", "\[IndentingNewLine]", 
           RowBox[{"isFlowDependence", "[", 
            RowBox[{"s1", ",", "s2"}], "]"}], ",", "\[IndentingNewLine]", 
           RowBox[{"Property", "[", 
            RowBox[{
             RowBox[{"v1", "\[Rule]", "v2"}], ",", 
             RowBox[{"EdgeShapeFunction", "->", "gFlowDependence"}]}], "]"}], 
           ",", "\[IndentingNewLine]", 
           RowBox[{"isOutputDependence", "[", 
            RowBox[{"s1", ",", "s2"}], "]"}], ",", "\[IndentingNewLine]", 
           RowBox[{"Property", "[", 
            RowBox[{
             RowBox[{"v1", "\[Rule]", "v2"}], ",", 
             RowBox[{"EdgeShapeFunction", "->", "gOutputDependence"}]}], 
            "]"}], ",", "\[IndentingNewLine]", "True", ",", 
           "\[IndentingNewLine]", 
           RowBox[{"Property", "[", 
            RowBox[{
             RowBox[{"v1", "\[Rule]", "v2"}], ",", 
             RowBox[{"EdgeShapeFunction", "->", "gInputDependence"}]}], 
            "]"}]}], "\[IndentingNewLine]", "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"AppendTo", "[", 
         RowBox[{"edges", ",", "edge"}], "]"}]}], ",", "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{"sub", ",", "subs"}], "}"}]}], "\[IndentingNewLine]", "]"}], 
     ";", "\[IndentingNewLine]", 
     RowBox[{"Graph", "[", 
      RowBox[{"edges", ",", "\[IndentingNewLine]", 
       RowBox[{"VertexLabels", "\[Rule]", 
        RowBox[{"Table", "[", 
         RowBox[{
          RowBox[{"i", "\[Rule]", 
           RowBox[{"Placed", "[", 
            RowBox[{
             RowBox[{"stmts", "[", 
              RowBox[{"[", "i", "]"}], "]"}], ",", "Center", ",", 
             "panelLabel"}], "]"}]}], ",", 
          RowBox[{"{", 
           RowBox[{"i", ",", 
            RowBox[{"Length", "[", "stmts", "]"}]}], "}"}]}], "]"}]}], ",", 
       RowBox[{"ImagePadding", "\[Rule]", "50"}], ",", 
       RowBox[{"BaselinePosition", "\[Rule]", "Axis"}]}], "]"}]}]}], 
   "\[IndentingNewLine]", "]"}]}]], "Input",
 CellChangeTimes->{{3.593720742846549*^9, 3.5937212390335493`*^9}, {
   3.593721294512549*^9, 3.593721357477549*^9}, {3.593721531405549*^9, 
   3.593721645853549*^9}, {3.5937217296005487`*^9, 3.5937217361665487`*^9}, {
   3.593721853505549*^9, 3.5937219298895493`*^9}, 3.593722042242549*^9, {
   3.5937222485995493`*^9, 3.5937223143685493`*^9}, {3.593722383138549*^9, 
   3.5937223872505493`*^9}, {3.5937224424485493`*^9, 3.593722479208549*^9}, {
   3.593722860656549*^9, 3.5937228944425488`*^9}, {3.593722930885549*^9, 
   3.593722944568549*^9}, {3.593723111977549*^9, 3.593723132484549*^9}, {
   3.593730265032549*^9, 3.593730267355549*^9}, {3.593730852560549*^9, 
   3.593730853832549*^9}, 3.593730905686549*^9}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"DependenceGraph", "[", 
  RowBox[{"{", 
   RowBox[{"s1", ",", "s2"}], "}"}], "]"}]], "Input",
 CellChangeTimes->{3.593722971502549*^9}],

Cell[BoxData[
 GraphicsBox[
  NamespaceBox["NetworkGraphics",
   DynamicModuleBox[{Typeset`graph = HoldComplete[
     Graph[{1, 2}, {{{1, 2}}, Null}, {
      BaselinePosition -> Axis, 
       EdgeShapeFunction -> {
        DirectedEdge[1, 2] -> $CellContext`gFlowDependence}, ImagePadding -> 
       50, VertexLabels -> {2 -> Placed[
           Inactive[Set][$CellContext`y, 
            Inactive[Plus][$CellContext`x, $CellContext`c]], 
           Center, $CellContext`panelLabel], 1 -> Placed[
           Inactive[Set][$CellContext`x, 
            Inactive[Plus][$CellContext`a, $CellContext`b]], 
           Center, $CellContext`panelLabel]}}]], Typeset`boxes, 
    Typeset`boxes$s2d = GraphicsGroupBox[{{
       Arrowheads[0.041582132564841494`], 
       Directive[
        Opacity[0.7], 
        Hue[0.6, 0.7, 0.5]], {
        Arrowheads[{{0.1, 0.9}}], 
        ArrowBox[{{1., 0.}, {0., 1.2246467991473532`*^-16}}]}}, {
       Directive[
        Hue[0.6, 0.2, 0.8], 
        EdgeForm[
         Directive[
          GrayLevel[0], 
          Opacity[0.7]]]], 
       TagBox[{
         TagBox[
          DiskBox[{1., 0.}, 0.01273], "DynamicName", BoxID -> "VertexID$1"], 
         InsetBox[
          FormBox[
           PanelBox[
            RowBox[{"x", 
              TagBox[
              "=", "InactiveToken", BaseStyle -> "InactiveTraditional", 
               SyntaxForm -> "=", Editable -> False, Selectable -> False], 
              RowBox[{"a", 
                TagBox[
                "+", "InactiveToken", BaseStyle -> "InactiveTraditional", 
                 SyntaxForm -> "+", Editable -> False, Selectable -> False], 
                "b"}]}], FrameMargins -> 0, Background -> Directive[
              RGBColor[1, 1, 0], 
              Opacity[0.1]]], TraditionalForm], 
          DynamicLocation["VertexID$1", None, Center], BaseStyle -> 
          "Graphics"]}, "DynamicName", BoxID -> "VertexLabelID$1"], 
       TagBox[{
         TagBox[
          DiskBox[{0., 1.2246467991473532`*^-16}, 0.01273], "DynamicName", 
          BoxID -> "VertexID$2"], 
         InsetBox[
          FormBox[
           PanelBox[
            RowBox[{"y", 
              TagBox[
              "=", "InactiveToken", BaseStyle -> "InactiveTraditional", 
               SyntaxForm -> "=", Editable -> False, Selectable -> False], 
              RowBox[{"x", 
                TagBox[
                "+", "InactiveToken", BaseStyle -> "InactiveTraditional", 
                 SyntaxForm -> "+", Editable -> False, Selectable -> False], 
                "c"}]}], FrameMargins -> 0, Background -> Directive[
              RGBColor[1, 1, 0], 
              Opacity[0.1]]], TraditionalForm], 
          DynamicLocation["VertexID$2", None, Center], BaseStyle -> 
          "Graphics"]}, "DynamicName", BoxID -> 
        "VertexLabelID$2"]}}], $CellContext`flag}, 
    TagBox[
     DynamicBox[GraphComputation`NetworkGraphicsBox[
      3, Typeset`graph, Typeset`boxes, $CellContext`flag], {
      CachedValue :> Typeset`boxes, SingleEvaluation -> True, 
       SynchronousUpdating -> False, TrackedSymbols :> {$CellContext`flag}},
      ImageSizeCache->{{31.798519688725065`, 
       328.20148031127496`}, {-12.409480311274903`, 12.590519688725097`}}],
     MouseAppearanceTag["NetworkGraphics"]],
    AllowKernelInitialization->False,
    UnsavedVariables:>{$CellContext`flag}]],
  BaselinePosition->Axis,
  DefaultBaseStyle->{
   "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
  FrameTicks->None,
  ImagePadding->50]], "Output",
 CellChangeTimes->{
  3.5937229718505487`*^9, {3.593723089143549*^9, 3.593723120233549*^9}, {
   3.593723152009549*^9, 3.593723192837549*^9}, 3.593729463163549*^9, 
   3.5937302270475492`*^9, 3.593730862295549*^9, 3.593730908598549*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"DependenceGraph", "[", 
  RowBox[{"{", 
   RowBox[{"s2", ",", "s1"}], "}"}], "]"}]], "Input",
 CellChangeTimes->{{3.5937229779965487`*^9, 3.5937229790925493`*^9}}],

Cell[BoxData[
 GraphicsBox[
  NamespaceBox["NetworkGraphics",
   DynamicModuleBox[{Typeset`graph = HoldComplete[
     Graph[{1, 2}, {{{1, 2}}, Null}, {
      BaselinePosition -> Axis, 
       EdgeShapeFunction -> {
        DirectedEdge[1, 2] -> $CellContext`gAntiDependence}, ImagePadding -> 
       50, VertexLabels -> {2 -> Placed[
           Inactive[Set][$CellContext`x, 
            Inactive[Plus][$CellContext`a, $CellContext`b]], 
           Center, $CellContext`panelLabel], 1 -> Placed[
           Inactive[Set][$CellContext`y, 
            Inactive[Plus][$CellContext`x, $CellContext`c]], 
           Center, $CellContext`panelLabel]}}]], Typeset`boxes, 
    Typeset`boxes$s2d = GraphicsGroupBox[{{
       Arrowheads[0.041582132564841494`], 
       Directive[
        Opacity[0.7], 
        Hue[0.6, 0.7, 0.5]], {
        Arrowheads[{{0.02, 0.5, 
           GraphicsBox[{
             Thickness[Large], 
             LineBox[{{0, 1}, {0, -1}}]}]}, {0.1, 0.9}}], 
        ArrowBox[{{1., 0.}, {0., 1.2246467991473532`*^-16}}]}}, {
       Directive[
        Hue[0.6, 0.2, 0.8], 
        EdgeForm[
         Directive[
          GrayLevel[0], 
          Opacity[0.7]]]], 
       TagBox[{
         TagBox[
          DiskBox[{1., 0.}, 0.01273], "DynamicName", BoxID -> "VertexID$1"], 
         InsetBox[
          FormBox[
           PanelBox[
            RowBox[{"y", 
              TagBox[
              "=", "InactiveToken", BaseStyle -> "InactiveTraditional", 
               SyntaxForm -> "=", Editable -> False, Selectable -> False], 
              RowBox[{"x", 
                TagBox[
                "+", "InactiveToken", BaseStyle -> "InactiveTraditional", 
                 SyntaxForm -> "+", Editable -> False, Selectable -> False], 
                "c"}]}], FrameMargins -> 0, Background -> Directive[
              RGBColor[1, 1, 0], 
              Opacity[0.1]]], TraditionalForm], 
          DynamicLocation["VertexID$1", None, Center], BaseStyle -> 
          "Graphics"]}, "DynamicName", BoxID -> "VertexLabelID$1"], 
       TagBox[{
         TagBox[
          DiskBox[{0., 1.2246467991473532`*^-16}, 0.01273], "DynamicName", 
          BoxID -> "VertexID$2"], 
         InsetBox[
          FormBox[
           PanelBox[
            RowBox[{"x", 
              TagBox[
              "=", "InactiveToken", BaseStyle -> "InactiveTraditional", 
               SyntaxForm -> "=", Editable -> False, Selectable -> False], 
              RowBox[{"a", 
                TagBox[
                "+", "InactiveToken", BaseStyle -> "InactiveTraditional", 
                 SyntaxForm -> "+", Editable -> False, Selectable -> False], 
                "b"}]}], FrameMargins -> 0, Background -> Directive[
              RGBColor[1, 1, 0], 
              Opacity[0.1]]], TraditionalForm], 
          DynamicLocation["VertexID$2", None, Center], BaseStyle -> 
          "Graphics"]}, "DynamicName", BoxID -> 
        "VertexLabelID$2"]}}], $CellContext`flag}, 
    TagBox[
     DynamicBox[GraphComputation`NetworkGraphicsBox[
      3, Typeset`graph, Typeset`boxes, $CellContext`flag], {
      CachedValue :> Typeset`boxes, SingleEvaluation -> True, 
       SynchronousUpdating -> False, TrackedSymbols :> {$CellContext`flag}},
      ImageSizeCache->{{31.798519688725065`, 
       328.20148031127496`}, {-12.409480311274903`, 12.590519688725097`}}],
     MouseAppearanceTag["NetworkGraphics"]],
    AllowKernelInitialization->False,
    UnsavedVariables:>{$CellContext`flag}]],
  BaselinePosition->Axis,
  DefaultBaseStyle->{
   "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
  FrameTicks->None,
  ImagePadding->50]], "Output",
 CellChangeTimes->{
  3.593722979586549*^9, {3.593723098303549*^9, 3.5937231208565493`*^9}, 
   3.593723195852549*^9, 3.593729463190549*^9, 3.593730227071549*^9, 
   3.593730862319549*^9, 3.593730908620549*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"DependenceGraph", "[", 
  RowBox[{"{", 
   RowBox[{"s1", ",", "s3"}], "}"}], "]"}]], "Input",
 CellChangeTimes->{{3.593722992145549*^9, 3.593723006695549*^9}}],

Cell[BoxData[
 GraphicsBox[
  NamespaceBox["NetworkGraphics",
   DynamicModuleBox[{Typeset`graph = HoldComplete[
     Graph[{1, 2}, {{{1, 2}}, Null}, {
      BaselinePosition -> Axis, 
       EdgeShapeFunction -> {
        DirectedEdge[1, 2] -> $CellContext`gOutputDependence}, ImagePadding -> 
       50, VertexLabels -> {2 -> Placed[
           Inactive[Set][$CellContext`x, 
            Inactive[Plus][$CellContext`c, $CellContext`d]], 
           Center, $CellContext`panelLabel], 1 -> Placed[
           Inactive[Set][$CellContext`x, 
            Inactive[Plus][$CellContext`a, $CellContext`b]], 
           Center, $CellContext`panelLabel]}}]], Typeset`boxes, 
    Typeset`boxes$s2d = GraphicsGroupBox[{{
       Arrowheads[0.041582132564841494`], 
       Directive[
        Opacity[0.7], 
        Hue[0.6, 0.7, 0.5]], {
        Arrowheads[{{0.02, 0.5, 
           GraphicsBox[{
             Thickness[Large], 
             LineBox[{{-1, -1}, {1, 1}}], 
             LineBox[{{-1, 1}, {1, -1}}]}]}, {0.1, 0.9}}], 
        ArrowBox[{{1., 0.}, {0., 1.2246467991473532`*^-16}}]}}, {
       Directive[
        Hue[0.6, 0.2, 0.8], 
        EdgeForm[
         Directive[
          GrayLevel[0], 
          Opacity[0.7]]]], 
       TagBox[{
         TagBox[
          DiskBox[{1., 0.}, 0.01273], "DynamicName", BoxID -> "VertexID$1"], 
         InsetBox[
          FormBox[
           PanelBox[
            RowBox[{"x", 
              TagBox[
              "=", "InactiveToken", BaseStyle -> "InactiveTraditional", 
               SyntaxForm -> "=", Editable -> False, Selectable -> False], 
              RowBox[{"a", 
                TagBox[
                "+", "InactiveToken", BaseStyle -> "InactiveTraditional", 
                 SyntaxForm -> "+", Editable -> False, Selectable -> False], 
                "b"}]}], FrameMargins -> 0, Background -> Directive[
              RGBColor[1, 1, 0], 
              Opacity[0.1]]], TraditionalForm], 
          DynamicLocation["VertexID$1", None, Center], BaseStyle -> 
          "Graphics"]}, "DynamicName", BoxID -> "VertexLabelID$1"], 
       TagBox[{
         TagBox[
          DiskBox[{0., 1.2246467991473532`*^-16}, 0.01273], "DynamicName", 
          BoxID -> "VertexID$2"], 
         InsetBox[
          FormBox[
           PanelBox[
            RowBox[{"x", 
              TagBox[
              "=", "InactiveToken", BaseStyle -> "InactiveTraditional", 
               SyntaxForm -> "=", Editable -> False, Selectable -> False], 
              RowBox[{"c", 
                TagBox[
                "+", "InactiveToken", BaseStyle -> "InactiveTraditional", 
                 SyntaxForm -> "+", Editable -> False, Selectable -> False], 
                "d"}]}], FrameMargins -> 0, Background -> Directive[
              RGBColor[1, 1, 0], 
              Opacity[0.1]]], TraditionalForm], 
          DynamicLocation["VertexID$2", None, Center], BaseStyle -> 
          "Graphics"]}, "DynamicName", BoxID -> 
        "VertexLabelID$2"]}}], $CellContext`flag}, 
    TagBox[
     DynamicBox[GraphComputation`NetworkGraphicsBox[
      3, Typeset`graph, Typeset`boxes, $CellContext`flag], {
      CachedValue :> Typeset`boxes, SingleEvaluation -> True, 
       SynchronousUpdating -> False, TrackedSymbols :> {$CellContext`flag}},
      ImageSizeCache->{{32.298519688725065`, 
       328.20148031127496`}, {-12.409480311274903`, 12.590519688725097`}}],
     MouseAppearanceTag["NetworkGraphics"]],
    AllowKernelInitialization->False,
    UnsavedVariables:>{$CellContext`flag}]],
  BaselinePosition->Axis,
  DefaultBaseStyle->{
   "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
  FrameTicks->None,
  ImagePadding->50]], "Output",
 CellChangeTimes->{{3.593722994385549*^9, 3.593723007185549*^9}, 
   3.5937230997505493`*^9, 3.5937231972105494`*^9, 3.593729463219549*^9, 
   3.593730227098549*^9, 3.593730862347549*^9, 3.593730908644549*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"DependenceGraph", "[", 
  RowBox[{"{", 
   RowBox[{"s1", ",", "s2", ",", "s3", ",", "s4"}], "}"}], "]"}]], "Input",
 CellChangeTimes->{{3.593720790380549*^9, 3.593720793695549*^9}, {
  3.5937225159485493`*^9, 3.593722516308549*^9}}],

Cell[BoxData[
 GraphicsBox[
  NamespaceBox["NetworkGraphics",
   DynamicModuleBox[{Typeset`graph = HoldComplete[
     Graph[{1, 2, 3, 
      4}, {{{1, 2}, {1, 3}, {1, 4}, {2, 3}, {2, 4}, {3, 4}}, Null}, {
      BaselinePosition -> Axis, 
       EdgeShapeFunction -> {
        DirectedEdge[1, 2] -> $CellContext`gFlowDependence, 
         DirectedEdge[1, 4] -> $CellContext`gFlowDependence, 
         DirectedEdge[3, 4] -> $CellContext`gFlowDependence, 
         DirectedEdge[1, 3] -> $CellContext`gOutputDependence, 
         DirectedEdge[2, 4] -> $CellContext`gAntiDependence, 
         DirectedEdge[2, 3] -> $CellContext`gAntiDependence}, ImagePadding -> 
       50, VertexLabels -> {3 -> Placed[
           Inactive[Set][$CellContext`x, 
            Inactive[Plus][$CellContext`c, $CellContext`d]], 
           Center, $CellContext`panelLabel], 4 -> Placed[
           Inactive[Set][$CellContext`x, 
            Inactive[Plus][$CellContext`x, $CellContext`d]], 
           Center, $CellContext`panelLabel], 2 -> Placed[
           Inactive[Set][$CellContext`y, 
            Inactive[Plus][$CellContext`x, $CellContext`c]], 
           Center, $CellContext`panelLabel], 1 -> Placed[
           Inactive[Set][$CellContext`x, 
            Inactive[Plus][$CellContext`a, $CellContext`b]], 
           Center, $CellContext`panelLabel]}}]], Typeset`boxes, 
    Typeset`boxes$s2d = GraphicsGroupBox[{{
       Arrowheads[0.028937842778793414`], 
       Directive[
        Opacity[0.7], 
        Hue[0.6, 0.7, 0.5]], {
        Arrowheads[{{0.1, 0.9}}], 
        ArrowBox[{{0., 3.}, {0., 2.}}]}, {
        Arrowheads[{{0.02, 0.5, 
           GraphicsBox[{
             Thickness[Large], 
             LineBox[{{-1, -1}, {1, 1}}], 
             LineBox[{{-1, 1}, {1, -1}}]}]}, {0.1, 0.9}}], 
        ArrowBox[CompressedData["
1:eJxTTMoPSmViYGCQAWIQjQo4HGbympsuPrRi/0ll7eKvc9gd5NavCb51eNf+
jllJug812R2q9swUPTv56H7LlGV6h5exOWh8mj7B49i5/fcavpXNFmZz8KnJ
OLu+5sr+sg9BbFkFrA5P0pWkOsVu7WfZvPuO3l4Wh/d3bcQjJB7sbzlh8Ovl
T2YHWRvz1kmpj/f/NNgUN1uN2aHaj+H650/P9ie+sedydmZyiJgcKmp/88V+
I1ch9cn7GR3OtYT6hLS92v/erXPeN1NGh0dKDDXGv17vn/FxSUHuMgaH/tzQ
JXdM3u7Xck2d+12AweFaSuhRf7N3+wOap3hqvf5nv5OD4X7Pv3f7lc4t5+1Z
8dfeLDL04+Te9/tPZLG0i0T9sfcLC/2T8vj9fvfIVVsP//9lDwmXD/tnzQSB
n3D++RtHX883/wHnfz6slPrg5Td7RiifPXoDa/SGr3B59nl5Z/m7v8D5X3ti
9/yr/AznX1KvBaJPcD5Y+ZSPcH5Eol+JxoEPcD6UtgcA7hvDDQ==
         "]]}, {
        Arrowheads[{{0.1, 0.9}}], 
        ArrowBox[CompressedData["
1:eJxTTMoPSmViYGBQBWIQjQo4HGbympsuPrTC/qSydvHXOewOcuvXBN86vMu+
Y1aS7kNNdoeqPTNFz04+am+Zskzv8DI2B41P0yd4HDtnf6/hW9lsYTYHn5qM
s+trrtiXfQhiyypgdXiSriTVKXbLnmXz7jt6e1kc3t+1EY+QeGDfcsLg18uf
zA6yNuatk1If2/802BQ3W43ZodqP4frnT8/sE9/Yczk7MzlETA4Vtb/5wt7I
VUh98n5Gh3MtoT4hba/s37t1zvtmyujwSImhxvjXa/sZH5cU5C5jcOjPDV1y
x+StvZZr6tzvAgwO11JCj/qbvbMPaJ7iqfX6n/1ODob7Pf/e2SudW87bs+Kv
vVlk6MfJve/tT2SxtItE/bH3Cwv9k/L4vb175Kqth///soeEywf7NDD4Zu8L
ld+xLNTLhuErXL/51N8Vr5d+tt8FNf+BYcSn4vBP9jD7N9Rkb7sq8tG+D+q+
iNdZXYp73tvD3L/IMsfWK+2t/Xmo/5ye3GpV1XhtD/O/6ettyZsZX9rDwgdG
y0DDD0bDwhdGP4OGP4yGxQ+MVofGH4yuhsYvjIbFP4yeB00fMBo9BQEAMtsN
+g==
         "]]}, {
        Arrowheads[{{0.02, 0.5, 
           GraphicsBox[{
             Thickness[Large], 
             LineBox[{{0, 1}, {0, -1}}]}]}, {0.1, 0.9}}], 
        ArrowBox[{{0., 2.}, {-1., 1.}}]}, {
        Arrowheads[{{0.02, 0.5, 
           GraphicsBox[{
             Thickness[Large], 
             LineBox[{{0, 1}, {0, -1}}]}]}, {0.1, 0.9}}], 
        ArrowBox[CompressedData["
1:eJxTTMoPSmViYGCQAWIQjQYcYIzl8zZ2X7f/bw/jJ000+lCS/Q/O17vRpHuj
6S+cz1O8yJmx7Q+c/ysRpOE3gr/EH4QQ6m3uzpIX+wnnG6pbiSSc+A7np4HB
Nzh/MVj7Fzj/sUUfEH2G85WVQOATnJ/IvS2Be9sHON/+5WS7l5Pfwfl7doPA
azjfEmTc4xdwPkh3AvczON8YDB7D+eDgyX8A55/j757SuPw2nC+ec1As5+A1
OF+yYpepvc4lOH9F+ptHX8+fhvOn2IEceBjOf/Dy2p8NHjvh/H9aZzr5WFfA
+TAAAGdHa/U=
         "]]}, {
        Arrowheads[{{0.1, 0.9}}], 
        ArrowBox[{{-1., 1.}, {0., 0.}}]}}, {
       Directive[
        Hue[0.6, 0.2, 0.8], 
        EdgeForm[
         Directive[
          GrayLevel[0], 
          Opacity[0.7]]]], 
       TagBox[{
         TagBox[
          DiskBox[{0., 3.}, 0.030239520958083826`], "DynamicName", BoxID -> 
          "VertexID$1"], 
         InsetBox[
          FormBox[
           PanelBox[
            RowBox[{"x", 
              TagBox[
              "=", "InactiveToken", BaseStyle -> "InactiveTraditional", 
               SyntaxForm -> "=", Editable -> False, Selectable -> False], 
              RowBox[{"a", 
                TagBox[
                "+", "InactiveToken", BaseStyle -> "InactiveTraditional", 
                 SyntaxForm -> "+", Editable -> False, Selectable -> False], 
                "b"}]}], FrameMargins -> 0, Background -> Directive[
              RGBColor[1, 1, 0], 
              Opacity[0.1]]], TraditionalForm], 
          DynamicLocation["VertexID$1", None, Center], BaseStyle -> 
          "Graphics"]}, "DynamicName", BoxID -> "VertexLabelID$1"], 
       TagBox[{
         TagBox[
          DiskBox[{0., 2.}, 0.030239520958083826`], "DynamicName", BoxID -> 
          "VertexID$2"], 
         InsetBox[
          FormBox[
           PanelBox[
            RowBox[{"y", 
              TagBox[
              "=", "InactiveToken", BaseStyle -> "InactiveTraditional", 
               SyntaxForm -> "=", Editable -> False, Selectable -> False], 
              RowBox[{"x", 
                TagBox[
                "+", "InactiveToken", BaseStyle -> "InactiveTraditional", 
                 SyntaxForm -> "+", Editable -> False, Selectable -> False], 
                "c"}]}], FrameMargins -> 0, Background -> Directive[
              RGBColor[1, 1, 0], 
              Opacity[0.1]]], TraditionalForm], 
          DynamicLocation["VertexID$2", None, Center], BaseStyle -> 
          "Graphics"]}, "DynamicName", BoxID -> "VertexLabelID$2"], 
       TagBox[{
         TagBox[
          DiskBox[{-1., 1.}, 0.030239520958083826`], "DynamicName", BoxID -> 
          "VertexID$3"], 
         InsetBox[
          FormBox[
           PanelBox[
            RowBox[{"x", 
              TagBox[
              "=", "InactiveToken", BaseStyle -> "InactiveTraditional", 
               SyntaxForm -> "=", Editable -> False, Selectable -> False], 
              RowBox[{"c", 
                TagBox[
                "+", "InactiveToken", BaseStyle -> "InactiveTraditional", 
                 SyntaxForm -> "+", Editable -> False, Selectable -> False], 
                "d"}]}], FrameMargins -> 0, Background -> Directive[
              RGBColor[1, 1, 0], 
              Opacity[0.1]]], TraditionalForm], 
          DynamicLocation["VertexID$3", None, Center], BaseStyle -> 
          "Graphics"]}, "DynamicName", BoxID -> "VertexLabelID$3"], 
       TagBox[{
         TagBox[
          DiskBox[{0., 0.}, 0.030239520958083826`], "DynamicName", BoxID -> 
          "VertexID$4"], 
         InsetBox[
          FormBox[
           PanelBox[
            RowBox[{"x", 
              TagBox[
              "=", "InactiveToken", BaseStyle -> "InactiveTraditional", 
               SyntaxForm -> "=", Editable -> False, Selectable -> False], 
              RowBox[{"x", 
                TagBox[
                "+", "InactiveToken", BaseStyle -> "InactiveTraditional", 
                 SyntaxForm -> "+", Editable -> False, Selectable -> False], 
                "d"}]}], FrameMargins -> 0, Background -> Directive[
              RGBColor[1, 1, 0], 
              Opacity[0.1]]], TraditionalForm], 
          DynamicLocation["VertexID$4", None, Center], BaseStyle -> 
          "Graphics"]}, "DynamicName", BoxID -> 
        "VertexLabelID$4"]}}], $CellContext`flag}, 
    TagBox[
     DynamicBox[GraphComputation`NetworkGraphicsBox[
      3, Typeset`graph, Typeset`boxes, $CellContext`flag], {
      CachedValue :> Typeset`boxes, SingleEvaluation -> True, 
       SynchronousUpdating -> False, TrackedSymbols :> {$CellContext`flag}},
      ImageSizeCache->{{28.426001323185616`, 
       272.2393066909899}, {-332.2527877511773, 16.25278775117721}}],
     MouseAppearanceTag["NetworkGraphics"]],
    AllowKernelInitialization->False,
    UnsavedVariables:>{$CellContext`flag}]],
  BaselinePosition->Axis,
  DefaultBaseStyle->{
   "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
  FrameTicks->None,
  ImagePadding->50]], "Output",
 CellChangeTimes->{{3.5937207939825487`*^9, 3.5937208012255487`*^9}, {
   3.5937208681725492`*^9, 3.593720934028549*^9}, {3.593721115304549*^9, 
   3.593721135168549*^9}, {3.593721192098549*^9, 3.5937212014425488`*^9}, {
   3.593721232641549*^9, 3.593721240003549*^9}, {3.5937213047585487`*^9, 
   3.593721317742549*^9}, {3.593721350501549*^9, 3.593721358509549*^9}, {
   3.5937215459425488`*^9, 3.593721582275549*^9}, {3.593721612312549*^9, 
   3.5937216468385487`*^9}, {3.593721739905549*^9, 3.593721794211549*^9}, 
   3.5937218602845488`*^9, {3.593721891068549*^9, 3.593721958494549*^9}, {
   3.593722011295549*^9, 3.593722020021549*^9}, {3.593722084761549*^9, 
   3.5937221140295486`*^9}, 3.593722177939549*^9, {3.593722232064549*^9, 
   3.593722342302549*^9}, 3.5937223887845488`*^9, {3.5937224434095488`*^9, 
   3.5937224513895493`*^9}, {3.5937224813905487`*^9, 3.593722525878549*^9}, 
   3.593722900662549*^9, {3.5937229359825487`*^9, 3.593722945674549*^9}, 
   3.593723104167549*^9, 3.593723199062549*^9, 3.5937294632575493`*^9, 
   3.593730227131549*^9, 3.593730862378549*^9, 3.593730908675549*^9}]
}, Open  ]],

Cell[BoxData[{
 RowBox[{"ClearAll", "[", 
  RowBox[{
  "s1", ",", "s2", ",", "s3", ",", "s4", ",", "x", ",", "a", ",", "b", ",", 
   "c", ",", "d"}], "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"s1", "=", 
   RowBox[{"Inactivate", "[", 
    RowBox[{"a", "=", "0"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"s2", "=", 
   RowBox[{"Inactivate", "[", 
    RowBox[{"b", "=", "a"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"s3", "=", 
   RowBox[{"Inactivate", "[", 
    RowBox[{"a", "=", 
     RowBox[{"b", "+", "1"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"s4", "=", 
   RowBox[{"Inactivate", "[", 
    RowBox[{"c", "=", "a"}], "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.5937302030225487`*^9, 3.593730216674549*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"DependenceGraph", "[", 
  RowBox[{"{", 
   RowBox[{"s1", ",", "s2", ",", "s3", ",", "s4"}], "}"}], "]"}]], "Input"],

Cell[BoxData[
 GraphicsBox[
  NamespaceBox["NetworkGraphics",
   DynamicModuleBox[{Typeset`graph = HoldComplete[
     Graph[{1, 2, 3, 
      4}, {{{1, 2}, {1, 3}, {1, 4}, {2, 3}, {2, 4}, {3, 4}}, Null}, {
      BaselinePosition -> Axis, 
       EdgeShapeFunction -> {
        DirectedEdge[1, 2] -> $CellContext`gFlowDependence, 
         DirectedEdge[1, 4] -> $CellContext`gFlowDependence, 
         DirectedEdge[3, 4] -> $CellContext`gFlowDependence, 
         DirectedEdge[1, 3] -> $CellContext`gOutputDependence, 
         DirectedEdge[2, 4] -> $CellContext`gInputDependence, 
         DirectedEdge[2, 3] -> $CellContext`gAntiDependence}, ImagePadding -> 
       50, VertexLabels -> {3 -> Placed[
           Inactive[Set][$CellContext`a, 
            Inactive[Plus][$CellContext`b, 1]], 
           Center, $CellContext`panelLabel], 4 -> Placed[
           Inactive[Set][$CellContext`c, $CellContext`a], 
           Center, $CellContext`panelLabel], 2 -> Placed[
           Inactive[Set][$CellContext`b, $CellContext`a], 
           Center, $CellContext`panelLabel], 1 -> Placed[
           Inactive[Set][$CellContext`a, 0], 
           Center, $CellContext`panelLabel]}}]], Typeset`boxes, 
    Typeset`boxes$s2d = GraphicsGroupBox[{{
       Arrowheads[0.028937842778793414`], 
       Directive[
        Opacity[0.7], 
        Hue[0.6, 0.7, 0.5]], {
        Arrowheads[{{0.1, 0.9}}], 
        ArrowBox[{{0., 3.}, {0., 2.}}]}, {
        Arrowheads[{{0.02, 0.5, 
           GraphicsBox[{
             Thickness[Large], 
             LineBox[{{-1, -1}, {1, 1}}], 
             LineBox[{{-1, 1}, {1, -1}}]}]}, {0.1, 0.9}}], 
        ArrowBox[CompressedData["
1:eJxTTMoPSmViYGCQAWIQjQo4HGbympsuPrRi/0ll7eKvc9gd5NavCb51eNf+
jllJug812R2q9swUPTv56H7LlGV6h5exOWh8mj7B49i5/fcavpXNFmZz8KnJ
OLu+5sr+sg9BbFkFrA5P0pWkOsVu7WfZvPuO3l4Wh/d3bcQjJB7sbzlh8Ovl
T2YHWRvz1kmpj/f/NNgUN1uN2aHaj+H650/P9ie+sedydmZyiJgcKmp/88V+
I1ch9cn7GR3OtYT6hLS92v/erXPeN1NGh0dKDDXGv17vn/FxSUHuMgaH/tzQ
JXdM3u7Xck2d+12AweFaSuhRf7N3+wOap3hqvf5nv5OD4X7Pv3f7lc4t5+1Z
8dfeLDL04+Te9/tPZLG0i0T9sfcLC/2T8vj9fvfIVVsP//9lDwmXD/tnzQSB
n3D++RtHX883/wHnfz6slPrg5Td7RiifPXoDa/SGr3B59nl5Z/m7v8D5X3ti
9/yr/AznX1KvBaJPcD5Y+ZSPcH5Eol+JxoEPcD6UtgcA7hvDDQ==
         "]]}, {
        Arrowheads[{{0.1, 0.9}}], 
        ArrowBox[CompressedData["
1:eJxTTMoPSmViYGBQBWIQjQo4HGbympsuPrTC/qSydvHXOewOcuvXBN86vMu+
Y1aS7kNNdoeqPTNFz04+am+Zskzv8DI2B41P0yd4HDtnf6/hW9lsYTYHn5qM
s+trrtiXfQhiyypgdXiSriTVKXbLnmXz7jt6e1kc3t+1EY+QeGDfcsLg18uf
zA6yNuatk1If2/802BQ3W43ZodqP4frnT8/sE9/Yczk7MzlETA4Vtb/5wt7I
VUh98n5Gh3MtoT4hba/s37t1zvtmyujwSImhxvjXa/sZH5cU5C5jcOjPDV1y
x+StvZZr6tzvAgwO11JCj/qbvbMPaJ7iqfX6n/1ODob7Pf/e2SudW87bs+Kv
vVlk6MfJve/tT2SxtItE/bH3Cwv9k/L4vb175Kqth///soeEywf7NDD4Zu8L
ld+xLNTLhuErXL/51N8Vr5d+tt8FNf+BYcSn4vBP9jD7N9Rkb7sq8tG+D+q+
iNdZXYp73tvD3L/IMsfWK+2t/Xmo/5ye3GpV1XhtD/O/6ettyZsZX9rDwgdG
y0DDD0bDwhdGP4OGP4yGxQ+MVofGH4yuhsYvjIbFP4yeB00fMBo9BQEAMtsN
+g==
         "]]}, {
        Arrowheads[{{0.02, 0.5, 
           GraphicsBox[{
             Thickness[Large], 
             LineBox[{{0, 1}, {0, -1}}]}]}, {0.1, 0.9}}], 
        ArrowBox[{{0., 2.}, {-1., 1.}}]}, {
        Arrowheads[{{0.02, 0.5, 
           GraphicsBox[{
             Thickness[Large], 
             CircleBox[{0, 0}]}]}, {0.1, 0.9}}], 
        ArrowBox[CompressedData["
1:eJxTTMoPSmViYGCQAWIQjQYcYIzl8zZ2X7f/bw/jJ000+lCS/Q/O17vRpHuj
6S+cz1O8yJmx7Q+c/ysRpOE3gr/EH4QQ6m3uzpIX+wnnG6pbiSSc+A7np4HB
Nzh/MVj7Fzj/sUUfEH2G85WVQOATnJ/IvS2Be9sHON/+5WS7l5Pfwfl7doPA
azjfEmTc4xdwPkh3AvczON8YDB7D+eDgyX8A55/j757SuPw2nC+ec1As5+A1
OF+yYpepvc4lOH9F+ptHX8+fhvOn2IEceBjOf/Dy2p8NHjvh/H9aZzr5WFfA
+TAAAGdHa/U=
         "]]}, {
        Arrowheads[{{0.1, 0.9}}], 
        ArrowBox[{{-1., 1.}, {0., 0.}}]}}, {
       Directive[
        Hue[0.6, 0.2, 0.8], 
        EdgeForm[
         Directive[
          GrayLevel[0], 
          Opacity[0.7]]]], 
       TagBox[{
         TagBox[
          DiskBox[{0., 3.}, 0.030239520958083826`], "DynamicName", BoxID -> 
          "VertexID$1"], 
         InsetBox[
          FormBox[
           PanelBox[
            RowBox[{"a", 
              TagBox[
              "=", "InactiveToken", BaseStyle -> "InactiveTraditional", 
               SyntaxForm -> "=", Editable -> False, Selectable -> False], 
              "0"}], FrameMargins -> 0, Background -> Directive[
              RGBColor[1, 1, 0], 
              Opacity[0.1]]], TraditionalForm], 
          DynamicLocation["VertexID$1", None, Center], BaseStyle -> 
          "Graphics"]}, "DynamicName", BoxID -> "VertexLabelID$1"], 
       TagBox[{
         TagBox[
          DiskBox[{0., 2.}, 0.030239520958083826`], "DynamicName", BoxID -> 
          "VertexID$2"], 
         InsetBox[
          FormBox[
           PanelBox[
            RowBox[{"b", 
              TagBox[
              "=", "InactiveToken", BaseStyle -> "InactiveTraditional", 
               SyntaxForm -> "=", Editable -> False, Selectable -> False], 
              "a"}], FrameMargins -> 0, Background -> Directive[
              RGBColor[1, 1, 0], 
              Opacity[0.1]]], TraditionalForm], 
          DynamicLocation["VertexID$2", None, Center], BaseStyle -> 
          "Graphics"]}, "DynamicName", BoxID -> "VertexLabelID$2"], 
       TagBox[{
         TagBox[
          DiskBox[{-1., 1.}, 0.030239520958083826`], "DynamicName", BoxID -> 
          "VertexID$3"], 
         InsetBox[
          FormBox[
           PanelBox[
            RowBox[{"a", 
              TagBox[
              "=", "InactiveToken", BaseStyle -> "InactiveTraditional", 
               SyntaxForm -> "=", Editable -> False, Selectable -> False], 
              RowBox[{"b", 
                TagBox[
                "+", "InactiveToken", BaseStyle -> "InactiveTraditional", 
                 SyntaxForm -> "+", Editable -> False, Selectable -> False], 
                "1"}]}], FrameMargins -> 0, Background -> Directive[
              RGBColor[1, 1, 0], 
              Opacity[0.1]]], TraditionalForm], 
          DynamicLocation["VertexID$3", None, Center], BaseStyle -> 
          "Graphics"]}, "DynamicName", BoxID -> "VertexLabelID$3"], 
       TagBox[{
         TagBox[
          DiskBox[{0., 0.}, 0.030239520958083826`], "DynamicName", BoxID -> 
          "VertexID$4"], 
         InsetBox[
          FormBox[
           PanelBox[
            RowBox[{"c", 
              TagBox[
              "=", "InactiveToken", BaseStyle -> "InactiveTraditional", 
               SyntaxForm -> "=", Editable -> False, Selectable -> False], 
              "a"}], FrameMargins -> 0, Background -> Directive[
              RGBColor[1, 1, 0], 
              Opacity[0.1]]], TraditionalForm], 
          DynamicLocation["VertexID$4", None, Center], BaseStyle -> 
          "Graphics"]}, "DynamicName", BoxID -> 
        "VertexLabelID$4"]}}], $CellContext`flag}, 
    TagBox[
     DynamicBox[GraphComputation`NetworkGraphicsBox[
      3, Typeset`graph, Typeset`boxes, $CellContext`flag], {
      CachedValue :> Typeset`boxes, SingleEvaluation -> True, 
       SynchronousUpdating -> False, TrackedSymbols :> {$CellContext`flag}},
      ImageSizeCache->{{28.426001323185616`, 
       272.2393066909899}, {-332.25278775117715`, 16.25278775117738}}],
     MouseAppearanceTag["NetworkGraphics"]],
    AllowKernelInitialization->False,
    UnsavedVariables:>{$CellContext`flag}]],
  BaselinePosition->Axis,
  DefaultBaseStyle->{
   "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
  FrameTicks->None,
  ImagePadding->50]], "Output",
 CellChangeTimes->{3.593730862427549*^9, 3.593730908715549*^9}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Finding Data Dependence", "Section",
 CellChangeTimes->{{3.5935646682263327`*^9, 3.5935646699933324`*^9}, {
  3.593567197283109*^9, 3.5935672043875303`*^9}, {3.5935686134847946`*^9, 
  3.593568617363182*^9}, {3.5937204306395493`*^9, 3.5937204324155493`*^9}, {
  3.593720788980549*^9, 3.593720789445549*^9}}],

Cell["\<\
It is easy to see whether you choose ZIV, SIV, \[Ellipsis] but still not sure \
when to use the complicated tests. Based on program analysis [Goff, Kennedy, \
Tseng - PLDI \[CloseCurlyQuote]91], we find that 53% of statements use ZIV, \
46% SIV, and 3% MIV.\
\>", "Text",
 CellChangeTimes->{{3.5936355606147146`*^9, 3.593635586138715*^9}, {
  3.593635968825715*^9, 3.593636055393715*^9}, {3.593636197653715*^9, 
  3.5936362139227147`*^9}}],

Cell[CellGroupData[{

Cell["GCD Test", "Subsection",
 CellChangeTimes->{{3.5935686224276886`*^9, 3.593568624634909*^9}}],

Cell["\<\
The GCD test is a simple check to see if a dependence is possible. It can \
give false positives, but would never give a false negative. It does not find \
the distance vector and is only useful for existance check. Useful for \
testing non-linear subscripts.\
\>", "Text",
 CellChangeTimes->{{3.593630129401715*^9, 3.593630150084715*^9}, {
   3.5936301847257147`*^9, 3.5936301957397146`*^9}, {3.5936323206397147`*^9, 
   3.5936323907937145`*^9}, 3.593633708143715*^9, {3.5936337614377146`*^9, 
   3.5936337686197147`*^9}}],

Cell[TextData[{
 "If you acesses are ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     SubscriptBox["a", "1"], 
     SubscriptBox["i", "1"]}], "+", 
    RowBox[{
     SubscriptBox["a", "2"], 
     SubscriptBox["i", "2"]}], "+", "\[Ellipsis]", "+", 
    RowBox[{
     SubscriptBox["a", "n"], 
     SubscriptBox["i", "n"]}], "+", "k"}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 " and ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{
       SubscriptBox["b", "1"], 
       SubscriptBox["i", "1"]}], "+", 
      RowBox[{
       SubscriptBox["b", "2"], 
       SubscriptBox["i", "2"]}], "+"}], "..."}], "+", 
    RowBox[{
     SubscriptBox["b", "n"], 
     SubscriptBox["i", "n"]}], "+", "m"}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 " then a dependence exists only if ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     RowBox[{
      SubscriptBox["a", "1"], 
      SubscriptBox["i", "1"]}], "+", 
     RowBox[{
      SubscriptBox["a", "2"], 
      SubscriptBox["i", "2"]}], "+", "\[Ellipsis]", "+", 
     RowBox[{
      SubscriptBox["a", "n"], 
      SubscriptBox["i", "n"]}], "+", "k"}], " ", "=", " ", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{
        SubscriptBox["b", "1"], 
        SubscriptBox["j", "1"]}], "+", 
       RowBox[{
        SubscriptBox["b", "2"], 
        SubscriptBox["j", "2"]}], "+"}], "..."}], "+", 
     RowBox[{
      SubscriptBox["b", "p"], 
      SubscriptBox["j", "p"]}], "+", "m"}]}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 " where ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["i", "1"], ",", 
    SubscriptBox["i", "2"], ",", "\[Ellipsis]", ",", 
    SubscriptBox["i", "n"]}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 " and ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["j", "1"], ",", "\[Ellipsis]", ",", 
    SubscriptBox["j", "p"]}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 " are iteration variables. Rewriting the formula we get ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     RowBox[{
      SubscriptBox["a", "1"], 
      SubscriptBox["i", "1"]}], "+", "\[Ellipsis]", "+", 
     RowBox[{
      SubscriptBox["a", "n"], 
      SubscriptBox["i", "n"]}], "-", 
     RowBox[{
      SubscriptBox["b", "1"], 
      SubscriptBox["j", "1"]}], "-", "\[Ellipsis]", "-", 
     RowBox[{
      SubscriptBox["b", "p"], 
      SubscriptBox["j", "p"]}]}], "=", 
    RowBox[{"m", "-", "k"}]}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 ". This is a linear Diophantine equation, where an integer solution for ",
 Cell[BoxData[
  FormBox["x", TraditionalForm]]],
 " and ",
 Cell[BoxData[
  FormBox["y", TraditionalForm]]],
 " exist iff ",
 Cell[BoxData[
  FormBox[
   RowBox[{"GCD", "(", 
    RowBox[{
     SubscriptBox["a", "1"], ",", "\[Ellipsis]", ",", " ", 
     SubscriptBox["a", "n"], ",", 
     RowBox[{"-", 
      SubscriptBox["b", "1"]}], ",", "\[Ellipsis]", ",", 
     RowBox[{"-", 
      SubscriptBox["b", "p"]}]}], ")"}], TraditionalForm]]],
 " divides ",
 Cell[BoxData[
  FormBox[
   RowBox[{"m", "-", "k"}], TraditionalForm]]],
 ". So if the check does not pass, then there is no possible dependence."
}], "Text",
 CellChangeTimes->{{3.593631427900715*^9, 3.593631450828715*^9}, {
  3.5936315071067147`*^9, 3.5936318170557146`*^9}, {3.5936319864427147`*^9, 
  3.593632133726715*^9}}],

Cell[TextData[{
 "Consider the statment ",
 StyleBox["X[2*ii+3] = X[2*ii] + 50. ", "Code"],
 "To find if there is a loop carried dependence, we need to solve the \
equation ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     RowBox[{"x", "*", "ii1"}], "+", "k"}], "=", 
    RowBox[{
     RowBox[{"y", "*", "ii2"}], "+", "m"}]}], TraditionalForm]]],
 " (where ",
 Cell[BoxData[
  FormBox["ii1", TraditionalForm]]],
 " and ",
 Cell[BoxData[
  FormBox["ii2", TraditionalForm]]],
 " are the iteration variables), or",
 Cell[BoxData[
  FormBox[
   RowBox[{" ", 
    RowBox[{
     RowBox[{
      RowBox[{"x", "*", "ii1"}], " ", "-", " ", 
      RowBox[{"y", "*", "ii2"}]}], " ", "=", " ", 
     RowBox[{"m", " ", "-", " ", "k"}]}]}], TraditionalForm]]],
 ". Since GCD(2,2)=2 does not divide -3 then no dependence is possible."
}], "Text",
 CellChangeTimes->{{3.593631843681715*^9, 3.593631917676715*^9}, {
  3.5936321539027147`*^9, 3.5936322443577147`*^9}}],

Cell["Suppose you have the following flow dependence:", "Text",
 CellChangeTimes->{{3.5936302356527147`*^9, 3.5936302475537148`*^9}, {
  3.593631423450715*^9, 3.5936314251617146`*^9}}],

Cell["\<\
1. for (int ii = 0; ii < n; ii++) {
2. \ta[4*ii + 2] = ...;
3. \t... = a[2*ii + 4];
4. }\
\>", "Program",
 CellChangeTimes->{{3.593567097431143*^9, 3.5935671846585846`*^9}, {
  3.593630258368715*^9, 3.593630292769715*^9}, {3.5936315760607147`*^9, 
  3.5936315765817146`*^9}, {3.593632258339715*^9, 3.5936322694657145`*^9}}],

Cell["\<\
Now, since GCD(4,2)=2 does divides 4-2=2 then a dependence is possible.\
\>", "Text",
 CellChangeTimes->{{3.5936322890867147`*^9, 3.593632307497715*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["ZIV Test (zero induction variables)", "Subsection",
 CellChangeTimes->{
  3.593568639637409*^9, {3.593630350174715*^9, 3.5936303510697145`*^9}, {
   3.5936328013247147`*^9, 3.593632802228715*^9}, {3.593632863311715*^9, 
   3.593632863695715*^9}, {3.593632915653715*^9, 3.5936329211807146`*^9}, {
   3.593633294078715*^9, 3.5936332946857147`*^9}, {3.593633543726715*^9, 
   3.593633544023715*^9}, 3.593634004762715*^9}],

Cell[TextData[{
 "Pair of the subscripts of the form ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["c", "1"], TraditionalForm]],
  FormatType->"TraditionalForm"],
 " and ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["c", "2"], TraditionalForm]],
  FormatType->"TraditionalForm"],
 " where ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["c", "1"], TraditionalForm]],
  FormatType->"TraditionalForm"],
 " and ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["c", "2"], TraditionalForm]],
  FormatType->"TraditionalForm"],
 " are constants. If ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["c", "1"], "\[NotEqual]", 
    SubscriptBox["c", "2"]}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 " then a dependence does not exist."
}], "Text",
 CellChangeTimes->{{3.593635496058715*^9, 3.5936355540887146`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
Strong SIV Test (single induction variable, with identical strides)\
\>", "Subsection",
 CellChangeTimes->{
  3.593568639637409*^9, {3.593630350174715*^9, 3.5936303510697145`*^9}, {
   3.5936328013247147`*^9, 3.593632802228715*^9}, {3.593632863311715*^9, 
   3.593632863695715*^9}, {3.593632915653715*^9, 3.593632915821715*^9}, {
   3.593633218700715*^9, 3.5936332198527145`*^9}, {3.593633538559715*^9, 
   3.593633541031715*^9}, 3.5936340152327147`*^9, {3.593634408354715*^9, 
   3.593634408993715*^9}}],

Cell["\<\
See Practical Dependence Testing and \
https://sites.google.com/site/parallelizationforllvm/dependence-test\
\>", "Text",
 CellChangeTimes->{{3.593633346531715*^9, 3.5936333549967146`*^9}, {
  3.593633533880715*^9, 3.5936335346987147`*^9}}],

Cell[TextData[{
 "Have a pair of subscripts of the form ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["c", "1"], "+", 
    RowBox[{
     SubscriptBox["a", "1"], "ii"}]}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 " and ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["c", "2"], "+", 
    RowBox[{
     SubscriptBox["a", "2"], "ii"}]}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 " with ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["a", "1"], "=", 
    SubscriptBox["a", "2"]}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 ". We can prove independence using the GCD test (does ",
 Cell[BoxData[
  FormBox["a", TraditionalForm]],
  FormatType->"TraditionalForm"],
 " divide ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["c", "1"], "-", 
    SubscriptBox["c", "2"]}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 "), otherwise we compute the distance by solving ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     SubscriptBox["c", "1"], "+", 
     RowBox[{
      SubscriptBox["a", "1"], 
      SubscriptBox["ii", "1"]}]}], "=", 
    RowBox[{
     SubscriptBox["c", "2"], "+", 
     RowBox[{
      SubscriptBox["a", "2"], 
      SubscriptBox["ii", "2"]}]}]}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 ". We get the dependence distance ",
 Cell[BoxData[
  FormBox[
   RowBox[{"d", " ", "=", " ", 
    RowBox[{
     RowBox[{
      SubscriptBox["ii", "2"], "-", "ii"}], "=", 
     FractionBox[
      RowBox[{"(", 
       RowBox[{
        SubscriptBox["c", "1"], "-", 
        SubscriptBox["c", "2"]}], ")"}], "a"]}]}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 ". A dependence exists iff ",
 Cell[BoxData[
  FormBox["d", TraditionalForm]],
  FormatType->"TraditionalForm"],
 " is an integer and ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"Abs", "[", "d", "]"}], " ", "<", " ", "U"}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 "-L where ",
 Cell[BoxData[
  FormBox[
   RowBox[{"U", ",", " ", "L"}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 " are the loop\[CloseCurlyQuote]s upper and lower bounds. If a dependence \
exists, then the direction ",
 Cell[BoxData[
  FormBox[
   RowBox[{"dir", "=", 
    TagBox[GridBox[{
       {"\[Piecewise]", GridBox[{
          {"<", 
           RowBox[{"d", ">", "0"}]},
          {"=", 
           RowBox[{"d", "\[Equal]", "0"}]},
          {">", 
           RowBox[{"d", "<", "0"}]}
         },
         AllowedDimensions->{2, Automatic},
         Editable->True,
         GridBoxAlignment->{
          "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, 
           "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
         GridBoxItemSize->{
          "Columns" -> {{Automatic}}, "ColumnsIndexed" -> {}, 
           "Rows" -> {{1.}}, "RowsIndexed" -> {}},
         GridBoxSpacings->{"Columns" -> {
             Offset[0.27999999999999997`], {
              Offset[0.84]}, 
             Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
             Offset[0.2], {
              Offset[0.4]}, 
             Offset[0.2]}, "RowsIndexed" -> {}},
         Selectable->True]}
      },
      GridBoxAlignment->{
       "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
        "RowsIndexed" -> {}},
      GridBoxItemSize->{
       "Columns" -> {{Automatic}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.}}, 
        "RowsIndexed" -> {}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.35]}, 
          Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
          Offset[0.2], {
           Offset[0.4]}, 
          Offset[0.2]}, "RowsIndexed" -> {}}],
     "Piecewise",
     DeleteWithContents->True,
     Editable->False,
     SelectWithContents->True,
     Selectable->False]}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 "."
}], "Text",
 CellChangeTimes->{{3.593634341559715*^9, 3.593634384822715*^9}, {
  3.593634431413715*^9, 3.5936345858437147`*^9}, {3.593634679719715*^9, 
  3.5936346935557146`*^9}, {3.593634975158715*^9, 3.593635023549715*^9}, {
  3.593635646578715*^9, 3.5936356478907146`*^9}, {3.593636110054715*^9, 
  3.593636123700715*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"StrongSIV", "[", 
   RowBox[{"U_", ",", 
    RowBox[{
     RowBox[{"Inactive", "[", "Plus", "]"}], "[", 
     RowBox[{"c1_", ",", 
      RowBox[{
       RowBox[{"Inactive", "[", "Times", "]"}], "[", 
       RowBox[{"a_", ",", "ii_"}], "]"}]}], "]"}], ",", 
    RowBox[{
     RowBox[{"Inactive", "[", "Plus", "]"}], "[", 
     RowBox[{"c2_", ",", 
      RowBox[{
       RowBox[{"Inactive", "[", "Times", "]"}], "[", 
       RowBox[{"a_", ",", "ii2_"}], "]"}]}], "]"}]}], "]"}], ":=", 
  "\[IndentingNewLine]", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"d", "=", 
       FractionBox[
        RowBox[{"c1", "-", "c2"}], "a"]}], ",", "r"}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"r", "=", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"IntegerQ", "[", "d", "]"}], "&&", 
         RowBox[{
          RowBox[{"Abs", "[", "d", "]"}], "<", "U"}]}], ",", 
        "\[IndentingNewLine]", "\"\<<\>\"", ",", "\[IndentingNewLine]", 
        "\"\<Unknown\>\""}], "\[IndentingNewLine]", "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{"d", ",", "r"}], "}"}]}]}], "\[IndentingNewLine]", 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.593634697355715*^9, 3.593634762809715*^9}, {
  3.593634822686715*^9, 3.593634905566715*^9}, {3.593635029479715*^9, 
  3.5936350801997147`*^9}, {3.5936352918497148`*^9, 3.5936353256167145`*^9}}],

Cell["Example:", "Text",
 CellChangeTimes->{{3.593635107412715*^9, 3.5936351102847147`*^9}}],

Cell["\<\
1. for (int ii = 0; ii < 8; ii++) {
2. \ta[ii + 1] = ...;
3. \t... = a[ii + 1];
4. }\
\>", "Program",
 CellChangeTimes->{{3.593567097431143*^9, 3.5935671846585846`*^9}, {
  3.593630258368715*^9, 3.593630292769715*^9}, {3.5936315760607147`*^9, 
  3.5936315765817146`*^9}, {3.593632258339715*^9, 3.5936322694657145`*^9}, {
  3.593635103973715*^9, 3.5936351869497147`*^9}, {3.593635359684715*^9, 
  3.5936353627087145`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"StrongSIV", "[", 
  RowBox[{"8", ",", 
   RowBox[{"Inactivate", "[", 
    RowBox[{"1", "+", 
     RowBox[{"1", "*", "ii"}]}], "]"}], ",", 
   RowBox[{"Inactivate", "[", 
    RowBox[{"1", "+", 
     RowBox[{"1", "*", "ii"}]}], "]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.5936347647607145`*^9, 3.5936347669447145`*^9}, {
  3.5936348091757145`*^9, 3.5936348539757147`*^9}, {3.5936349280417147`*^9, 
  3.593634931976715*^9}, {3.593635084651715*^9, 3.593635091250715*^9}, {
  3.593635123844715*^9, 3.593635160005715*^9}, {3.5936351913997145`*^9, 
  3.593635195598715*^9}, {3.5936353655507145`*^9, 3.593635369108715*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0", ",", "\<\"<\"\>"}], "}"}]], "Output",
 CellChangeTimes->{{3.593634817454715*^9, 3.5936348548307147`*^9}, {
   3.5936349083667145`*^9, 3.5936349322747145`*^9}, {3.593635085249715*^9, 
   3.5936350913967147`*^9}, {3.593635133163715*^9, 3.5936351601547146`*^9}, 
   3.593635195985715*^9, 3.593635328554715*^9, 3.593635369480715*^9, 
   3.593723319337549*^9}]
}, Open  ]],

Cell["Example:", "Text",
 CellChangeTimes->{{3.593635107412715*^9, 3.5936351102847147`*^9}, {
  3.593635307742715*^9, 3.593635337049715*^9}, {3.5936354013247147`*^9, 
  3.593635401516715*^9}}],

Cell["\<\
1. for (int ii = 0; ii < 8; ii++) {
2. \ta[ii + 1] = ...;
3. \t... = a[ii + 0];
4. }\
\>", "Program",
 CellChangeTimes->{{3.593567097431143*^9, 3.5935671846585846`*^9}, {
   3.593630258368715*^9, 3.593630292769715*^9}, {3.5936315760607147`*^9, 
   3.5936315765817146`*^9}, {3.593632258339715*^9, 3.5936322694657145`*^9}, {
   3.593635103973715*^9, 3.5936351869497147`*^9}, 3.5936352240557146`*^9, {
   3.593635280436715*^9, 3.5936352836997147`*^9}, {3.593635373082715*^9, 
   3.593635375153715*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"StrongSIV", "[", 
  RowBox[{"8", ",", 
   RowBox[{"Inactivate", "[", 
    RowBox[{"1", "+", 
     RowBox[{"1", "*", "ii"}]}], "]"}], ",", 
   RowBox[{"Inactivate", "[", 
    RowBox[{"0", "+", 
     RowBox[{"1", "*", "ii"}]}], "]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.5936347647607145`*^9, 3.5936347669447145`*^9}, {
  3.5936348091757145`*^9, 3.5936348539757147`*^9}, {3.5936349280417147`*^9, 
  3.593634931976715*^9}, {3.593635084651715*^9, 3.593635091250715*^9}, {
  3.593635123844715*^9, 3.593635160005715*^9}, {3.5936351913997145`*^9, 
  3.593635195598715*^9}, {3.593635227320715*^9, 3.5936352860607147`*^9}, {
  3.593635378243715*^9, 3.593635382802715*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1", ",", "\<\"<\"\>"}], "}"}]], "Output",
 CellChangeTimes->{{3.593634817454715*^9, 3.5936348548307147`*^9}, {
   3.5936349083667145`*^9, 3.5936349322747145`*^9}, {3.593635085249715*^9, 
   3.5936350913967147`*^9}, {3.593635133163715*^9, 3.5936351601547146`*^9}, 
   3.593635195985715*^9, {3.5936352274587145`*^9, 3.5936352974047146`*^9}, 
   3.593635329643715*^9, 3.593635383174715*^9, 3.593723319407549*^9}]
}, Open  ]],

Cell[TextData[{
 "Example: (fails because ",
 Cell[BoxData[
  FormBox["d", TraditionalForm]],
  FormatType->"TraditionalForm"],
 " is not an integer)"
}], "Text",
 CellChangeTimes->{{3.593635107412715*^9, 3.5936351102847147`*^9}, {
  3.593635307742715*^9, 3.593635337049715*^9}}],

Cell["\<\
1. for (int ii = 0; ii < 8; ii++) {
2. \ta[2*ii + 1] = ...;
3. \t... = a[2*ii + 0];
4. }\
\>", "Program",
 CellChangeTimes->{{3.593567097431143*^9, 3.5935671846585846`*^9}, {
   3.593630258368715*^9, 3.593630292769715*^9}, {3.5936315760607147`*^9, 
   3.5936315765817146`*^9}, {3.593632258339715*^9, 3.5936322694657145`*^9}, {
   3.593635103973715*^9, 3.5936351869497147`*^9}, 3.5936352240557146`*^9, {
   3.593635280436715*^9, 3.5936352836997147`*^9}, {3.593635373082715*^9, 
   3.593635375153715*^9}, {3.5936354068767147`*^9, 3.593635409171715*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"StrongSIV", "[", 
  RowBox[{"8", ",", 
   RowBox[{"Inactivate", "[", 
    RowBox[{"1", "+", 
     RowBox[{"2", "*", "ii"}]}], "]"}], ",", 
   RowBox[{"Inactivate", "[", 
    RowBox[{"0", "+", 
     RowBox[{"2", "*", "ii"}]}], "]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.5936347647607145`*^9, 3.5936347669447145`*^9}, {
  3.5936348091757145`*^9, 3.5936348539757147`*^9}, {3.5936349280417147`*^9, 
  3.593634931976715*^9}, {3.593635084651715*^9, 3.593635091250715*^9}, {
  3.593635123844715*^9, 3.593635160005715*^9}, {3.5936351913997145`*^9, 
  3.593635195598715*^9}, {3.593635227320715*^9, 3.5936352860607147`*^9}, {
  3.593635378243715*^9, 3.593635412972715*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   FractionBox["1", "2"], ",", "\<\"Unknown\"\>"}], "}"}]], "Output",
 CellChangeTimes->{{3.593634817454715*^9, 3.5936348548307147`*^9}, {
   3.5936349083667145`*^9, 3.5936349322747145`*^9}, {3.593635085249715*^9, 
   3.5936350913967147`*^9}, {3.593635133163715*^9, 3.5936351601547146`*^9}, 
   3.593635195985715*^9, {3.5936352274587145`*^9, 3.5936352974047146`*^9}, 
   3.593635329643715*^9, 3.593635383174715*^9, 3.593635413405715*^9, 
   3.593723319479549*^9}]
}, Open  ]],

Cell["Example: (fails because it is outside the loop bounds)", "Text",
 CellChangeTimes->{{3.593635107412715*^9, 3.5936351102847147`*^9}, {
  3.5936354628977146`*^9, 3.5936354696327147`*^9}}],

Cell["\<\
1. for (int ii = 0; ii < 8; ii++) {
2. \ta[2*ii + 16] = ...;
3. \t... = a[2*ii + 0];
4. }\
\>", "Program",
 CellChangeTimes->{{3.593567097431143*^9, 3.5935671846585846`*^9}, {
   3.593630258368715*^9, 3.593630292769715*^9}, {3.5936315760607147`*^9, 
   3.5936315765817146`*^9}, {3.593632258339715*^9, 3.5936322694657145`*^9}, {
   3.593635103973715*^9, 3.593635174360715*^9}, 3.5936353040077147`*^9, {
   3.593635347591715*^9, 3.593635351478715*^9}, {3.593635430535715*^9, 
   3.593635457898715*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"StrongSIV", "[", 
  RowBox[{"8", ",", 
   RowBox[{"Inactivate", "[", 
    RowBox[{"16", "+", 
     RowBox[{"2", "*", "ii"}]}], "]"}], ",", 
   RowBox[{"Inactivate", "[", 
    RowBox[{"0", "+", 
     RowBox[{"2", "*", "ii"}]}], "]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.5936347647607145`*^9, 3.5936347669447145`*^9}, {
  3.5936348091757145`*^9, 3.5936348539757147`*^9}, {3.5936349280417147`*^9, 
  3.593634931976715*^9}, {3.593635084651715*^9, 3.593635091250715*^9}, {
  3.593635123844715*^9, 3.593635160005715*^9}, {3.593635355096715*^9, 
  3.593635356247715*^9}, {3.593635420091715*^9, 3.5936354601807146`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"8", ",", "\<\"Unknown\"\>"}], "}"}]], "Output",
 CellChangeTimes->{{3.593634817454715*^9, 3.5936348548307147`*^9}, {
   3.5936349083667145`*^9, 3.5936349322747145`*^9}, {3.593635085249715*^9, 
   3.5936350913967147`*^9}, {3.593635133163715*^9, 3.5936351601547146`*^9}, {
   3.593635424412715*^9, 3.593635460301715*^9}, 3.593723319553549*^9}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
Weak-zero SIV (single induction variable, with one stride equal to 0) \
\>", "Subsection",
 CellChangeTimes->{
  3.593568639637409*^9, {3.593630350174715*^9, 3.5936303510697145`*^9}, {
   3.5936328013247147`*^9, 3.593632802228715*^9}, {3.593632863311715*^9, 
   3.593632863695715*^9}, {3.593632915653715*^9, 3.593632915821715*^9}, {
   3.593633218700715*^9, 3.5936332198527145`*^9}, {3.593633538559715*^9, 
   3.593633541031715*^9}, {3.5936340152327147`*^9, 3.593634027853715*^9}}],

Cell[TextData[{
 "Have a pair of subscripts of the form ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["c", "1"], "+", 
    RowBox[{"a", " ", "ii"}]}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 " and ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["c", "2"], TraditionalForm]],
  FormatType->"TraditionalForm"],
 ". Solving ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     SubscriptBox["c", "1"], "+", 
     RowBox[{"a", " ", "ii"}]}], "=", 
    SubscriptBox["c", "2"]}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 ". We get the dependence distance ",
 Cell[BoxData[
  FormBox[
   RowBox[{"d", " ", "=", 
    FractionBox[
     RowBox[{"(", 
      RowBox[{
       SubscriptBox["c", "1"], "-", 
       SubscriptBox["c", "2"]}], ")"}], "a"]}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 ". A dependence exists iff ",
 Cell[BoxData[
  FormBox["d", TraditionalForm]],
  FormatType->"TraditionalForm"],
 " is an integer  and ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"Abs", "[", "d", "]"}], " ", "<", " ", "U"}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 "-L where ",
 Cell[BoxData[
  FormBox[
   RowBox[{"U", ",", " ", "L"}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 " are the loop\[CloseCurlyQuote]s upper and lower bounds. If a dependence \
exists, then the direction ",
 Cell[BoxData[
  FormBox[
   RowBox[{"dir", "=", 
    TagBox[GridBox[{
       {"\[Piecewise]", GridBox[{
          {"<", 
           RowBox[{"d", ">", "0"}]},
          {"=", 
           RowBox[{"d", "\[Equal]", "0"}]},
          {">", 
           RowBox[{"d", "<", "0"}]}
         },
         AllowedDimensions->{2, Automatic},
         Editable->True,
         GridBoxAlignment->{
          "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, 
           "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
         GridBoxItemSize->{
          "Columns" -> {{Automatic}}, "ColumnsIndexed" -> {}, 
           "Rows" -> {{1.}}, "RowsIndexed" -> {}},
         GridBoxSpacings->{"Columns" -> {
             Offset[0.27999999999999997`], {
              Offset[0.84]}, 
             Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
             Offset[0.2], {
              Offset[0.4]}, 
             Offset[0.2]}, "RowsIndexed" -> {}},
         Selectable->True]}
      },
      GridBoxAlignment->{
       "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
        "RowsIndexed" -> {}},
      GridBoxItemSize->{
       "Columns" -> {{Automatic}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.}}, 
        "RowsIndexed" -> {}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.35]}, 
          Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
          Offset[0.2], {
           Offset[0.4]}, 
          Offset[0.2]}, "RowsIndexed" -> {}}],
     "Piecewise",
     DeleteWithContents->True,
     Editable->False,
     SelectWithContents->True,
     Selectable->False]}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 "."
}], "Text",
 CellChangeTimes->{{3.593634341559715*^9, 3.593634384822715*^9}, {
   3.593634431413715*^9, 3.5936345858437147`*^9}, {3.593634679719715*^9, 
   3.5936346935557146`*^9}, {3.593634975158715*^9, 3.593635023549715*^9}, {
   3.5936356237117147`*^9, 3.593635639516715*^9}, {3.5936356714747148`*^9, 
   3.593635693721715*^9}, 3.593636133084715*^9}],

Cell[BoxData[
 RowBox[{
  RowBox[{"WeakZeroSIV", "[", 
   RowBox[{"U_", ",", 
    RowBox[{
     RowBox[{"Inactive", "[", "Plus", "]"}], "[", 
     RowBox[{"c1_", ",", 
      RowBox[{
       RowBox[{"Inactive", "[", "Times", "]"}], "[", 
       RowBox[{"a_", ",", "ii_"}], "]"}]}], "]"}], ",", "c2_"}], "]"}], ":=", 
  "\[IndentingNewLine]", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"d", "=", 
       FractionBox[
        RowBox[{"c1", "-", "c2"}], "a"]}], ",", "r"}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"r", "=", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"IntegerQ", "[", "d", "]"}], "&&", 
         RowBox[{
          RowBox[{"Abs", "[", "d", "]"}], "<", "U"}]}], ",", 
        "\[IndentingNewLine]", "\"\<<\>\"", ",", "\[IndentingNewLine]", 
        "\"\<Unknown\>\""}], "\[IndentingNewLine]", "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{"d", ",", "r"}], "}"}]}]}], "\[IndentingNewLine]", 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.593634697355715*^9, 3.593634762809715*^9}, {
  3.593634822686715*^9, 3.593634905566715*^9}, {3.593635029479715*^9, 
  3.5936350801997147`*^9}, {3.5936352918497148`*^9, 3.5936353256167145`*^9}, {
  3.5936357267587147`*^9, 3.5936357361617146`*^9}}],

Cell["Example:", "Text",
 CellChangeTimes->{{3.593635107412715*^9, 3.5936351102847147`*^9}}],

Cell["\<\
1. for (int ii = 0; ii < 8; ii++) {
2. \ta[ii + 1] = ...;
3. \t... = a[1];
4. }\
\>", "Program",
 CellChangeTimes->{{3.593567097431143*^9, 3.5935671846585846`*^9}, {
  3.593630258368715*^9, 3.593630292769715*^9}, {3.5936315760607147`*^9, 
  3.5936315765817146`*^9}, {3.593632258339715*^9, 3.5936322694657145`*^9}, {
  3.593635103973715*^9, 3.5936351869497147`*^9}, {3.593635359684715*^9, 
  3.5936353627087145`*^9}, {3.5936357683437147`*^9, 3.5936357685037146`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"WeakZeroSIV", "[", 
  RowBox[{"8", ",", 
   RowBox[{"Inactivate", "[", 
    RowBox[{"1", "+", 
     RowBox[{"1", "*", "ii"}]}], "]"}], ",", "1"}], "]"}]], "Input",
 CellChangeTimes->{{3.5936347647607145`*^9, 3.5936347669447145`*^9}, {
  3.5936348091757145`*^9, 3.5936348539757147`*^9}, {3.5936349280417147`*^9, 
  3.593634931976715*^9}, {3.593635084651715*^9, 3.593635091250715*^9}, {
  3.593635123844715*^9, 3.593635160005715*^9}, {3.5936351913997145`*^9, 
  3.593635195598715*^9}, {3.5936353655507145`*^9, 3.593635369108715*^9}, {
  3.593635771169715*^9, 3.593635776216715*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0", ",", "\<\"<\"\>"}], "}"}]], "Output",
 CellChangeTimes->{{3.593634817454715*^9, 3.5936348548307147`*^9}, {
   3.5936349083667145`*^9, 3.5936349322747145`*^9}, {3.593635085249715*^9, 
   3.5936350913967147`*^9}, {3.593635133163715*^9, 3.5936351601547146`*^9}, 
   3.593635195985715*^9, 3.593635328554715*^9, 3.593635369480715*^9, 
   3.593635776559715*^9, 3.593723319694549*^9}]
}, Open  ]],

Cell["Example:", "Text",
 CellChangeTimes->{{3.593635107412715*^9, 3.5936351102847147`*^9}, {
  3.593635307742715*^9, 3.593635337049715*^9}, {3.5936354013247147`*^9, 
  3.593635401516715*^9}}],

Cell["\<\
1. for (int ii = 0; ii < 8; ii++) {
2. \ta[ii + 1] = ...;
3. \t... = a[0];
4. }\
\>", "Program",
 CellChangeTimes->{{3.593567097431143*^9, 3.5935671846585846`*^9}, {
   3.593630258368715*^9, 3.593630292769715*^9}, {3.5936315760607147`*^9, 
   3.5936315765817146`*^9}, {3.593632258339715*^9, 3.5936322694657145`*^9}, {
   3.593635103973715*^9, 3.5936351869497147`*^9}, 3.5936352240557146`*^9, {
   3.593635280436715*^9, 3.5936352836997147`*^9}, {3.593635373082715*^9, 
   3.593635375153715*^9}, 3.593635785707715*^9}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"WeakZeroSIV", "[", 
  RowBox[{"8", ",", 
   RowBox[{"Inactivate", "[", 
    RowBox[{"1", "+", 
     RowBox[{"1", "*", "ii"}]}], "]"}], ",", "0"}], "]"}]], "Input",
 CellChangeTimes->{{3.5936347647607145`*^9, 3.5936347669447145`*^9}, {
  3.5936348091757145`*^9, 3.5936348539757147`*^9}, {3.5936349280417147`*^9, 
  3.593634931976715*^9}, {3.593635084651715*^9, 3.593635091250715*^9}, {
  3.593635123844715*^9, 3.593635160005715*^9}, {3.5936351913997145`*^9, 
  3.593635195598715*^9}, {3.593635227320715*^9, 3.5936352860607147`*^9}, {
  3.593635378243715*^9, 3.593635382802715*^9}, {3.5936357791527147`*^9, 
  3.5936357893337145`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1", ",", "\<\"<\"\>"}], "}"}]], "Output",
 CellChangeTimes->{{3.593634817454715*^9, 3.5936348548307147`*^9}, {
   3.5936349083667145`*^9, 3.5936349322747145`*^9}, {3.593635085249715*^9, 
   3.5936350913967147`*^9}, {3.593635133163715*^9, 3.5936351601547146`*^9}, 
   3.593635195985715*^9, {3.5936352274587145`*^9, 3.5936352974047146`*^9}, 
   3.593635329643715*^9, 3.593635383174715*^9, 3.5936357903907146`*^9, 
   3.593723319769549*^9}]
}, Open  ]],

Cell[TextData[{
 "Example: (fails because ",
 Cell[BoxData[
  FormBox["d", TraditionalForm]],
  FormatType->"TraditionalForm"],
 " is not an integer)"
}], "Text",
 CellChangeTimes->{{3.593635107412715*^9, 3.5936351102847147`*^9}, {
  3.593635307742715*^9, 3.593635337049715*^9}}],

Cell["\<\
1. for (int ii = 0; ii < 8; ii++) {
2. \ta[2*ii + 1] = ...;
3. \t... = a[0];
4. }\
\>", "Program",
 CellChangeTimes->{{3.593567097431143*^9, 3.5935671846585846`*^9}, {
   3.593630258368715*^9, 3.593630292769715*^9}, {3.5936315760607147`*^9, 
   3.5936315765817146`*^9}, {3.593632258339715*^9, 3.5936322694657145`*^9}, {
   3.593635103973715*^9, 3.5936351869497147`*^9}, 3.5936352240557146`*^9, {
   3.593635280436715*^9, 3.5936352836997147`*^9}, {3.593635373082715*^9, 
   3.593635375153715*^9}, {3.5936354068767147`*^9, 3.593635409171715*^9}, {
   3.5936358083997145`*^9, 3.5936358085437145`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"WeakZeroSIV", "[", 
  RowBox[{"8", ",", 
   RowBox[{"Inactivate", "[", 
    RowBox[{"1", "+", 
     RowBox[{"2", "*", "ii"}]}], "]"}], ",", "0"}], "]"}]], "Input",
 CellChangeTimes->{{3.5936347647607145`*^9, 3.5936347669447145`*^9}, {
  3.5936348091757145`*^9, 3.5936348539757147`*^9}, {3.5936349280417147`*^9, 
  3.593634931976715*^9}, {3.593635084651715*^9, 3.593635091250715*^9}, {
  3.593635123844715*^9, 3.593635160005715*^9}, {3.5936351913997145`*^9, 
  3.593635195598715*^9}, {3.593635227320715*^9, 3.5936352860607147`*^9}, {
  3.593635378243715*^9, 3.593635412972715*^9}, {3.5936358019487147`*^9, 
  3.5936358113367147`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   FractionBox["1", "2"], ",", "\<\"Unknown\"\>"}], "}"}]], "Output",
 CellChangeTimes->{{3.593634817454715*^9, 3.5936348548307147`*^9}, {
   3.5936349083667145`*^9, 3.5936349322747145`*^9}, {3.593635085249715*^9, 
   3.5936350913967147`*^9}, {3.593635133163715*^9, 3.5936351601547146`*^9}, 
   3.593635195985715*^9, {3.5936352274587145`*^9, 3.5936352974047146`*^9}, 
   3.593635329643715*^9, 3.593635383174715*^9, 3.593635413405715*^9, 
   3.593635811497715*^9, 3.5937233198425493`*^9}]
}, Open  ]],

Cell["Example: (fails because it is outside the loop bounds)", "Text",
 CellChangeTimes->{{3.593635107412715*^9, 3.5936351102847147`*^9}, {
  3.5936354628977146`*^9, 3.5936354696327147`*^9}}],

Cell["\<\
1. for (int ii = 0; ii < 8; ii++) {
2. \ta[ii] = ...;
3. \t... = a[8];
4. }\
\>", "Program",
 CellChangeTimes->{{3.593567097431143*^9, 3.5935671846585846`*^9}, {
   3.593630258368715*^9, 3.593630292769715*^9}, {3.5936315760607147`*^9, 
   3.5936315765817146`*^9}, {3.593632258339715*^9, 3.5936322694657145`*^9}, {
   3.593635103973715*^9, 3.593635174360715*^9}, 3.5936353040077147`*^9, {
   3.593635347591715*^9, 3.593635351478715*^9}, {3.593635430535715*^9, 
   3.593635457898715*^9}, {3.5936358196217146`*^9, 3.593635849743715*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"WeakZeroSIV", "[", 
  RowBox[{"8", ",", 
   RowBox[{"Inactivate", "[", 
    RowBox[{"0", "+", 
     RowBox[{"1", "*", "ii"}]}], "]"}], ",", "8"}], "]"}]], "Input",
 CellChangeTimes->{{3.5936347647607145`*^9, 3.5936347669447145`*^9}, {
  3.5936348091757145`*^9, 3.5936348539757147`*^9}, {3.5936349280417147`*^9, 
  3.593634931976715*^9}, {3.593635084651715*^9, 3.593635091250715*^9}, {
  3.593635123844715*^9, 3.593635160005715*^9}, {3.593635355096715*^9, 
  3.593635356247715*^9}, {3.593635420091715*^9, 3.5936354601807146`*^9}, {
  3.593635815033715*^9, 3.593635859664715*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"-", "8"}], ",", "\<\"Unknown\"\>"}], "}"}]], "Output",
 CellChangeTimes->{{3.593634817454715*^9, 3.5936348548307147`*^9}, {
   3.5936349083667145`*^9, 3.5936349322747145`*^9}, {3.593635085249715*^9, 
   3.5936350913967147`*^9}, {3.593635133163715*^9, 3.5936351601547146`*^9}, {
   3.593635424412715*^9, 3.593635460301715*^9}, {3.5936358231407146`*^9, 
   3.593635859986715*^9}, 3.593723319918549*^9}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
Weak-crossing SIV (single induction variable, with one stride the negative of \
the other) \
\>", "Subsection",
 CellChangeTimes->{
  3.593568639637409*^9, {3.593630350174715*^9, 3.5936303510697145`*^9}, {
   3.5936328013247147`*^9, 3.593632802228715*^9}, {3.593632863311715*^9, 
   3.593632863695715*^9}, {3.593632915653715*^9, 3.593632915821715*^9}, {
   3.593633218700715*^9, 3.5936332198527145`*^9}, {3.593633538559715*^9, 
   3.593633541031715*^9}, {3.5936340152327147`*^9, 3.5936340384917145`*^9}}],

Cell["\<\
See Practical Dependence Testing and \
https://sites.google.com/site/parallelizationforllvm/dependence-test\
\>", "Text",
 CellChangeTimes->{{3.593633346531715*^9, 3.5936333549967146`*^9}, {
  3.593633533880715*^9, 3.5936335346987147`*^9}}],

Cell[TextData[{
 "Have a pair of subscripts of the form ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["c", "1"], "+", 
    RowBox[{"a", " ", "ii"}]}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 " and ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["c", "2"], TraditionalForm]],
  FormatType->"TraditionalForm"],
 ". Solving ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     SubscriptBox["c", "1"], "-", 
     RowBox[{"a", " ", "ii"}]}], "=", 
    SubscriptBox["c", "2"]}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 ". We get the dependence distance ",
 Cell[BoxData[
  FormBox[
   RowBox[{"d", " ", "=", 
    FractionBox[
     RowBox[{"(", 
      RowBox[{
       SubscriptBox["c", "1"], "-", 
       SubscriptBox["c", "2"]}], ")"}], 
     RowBox[{"2", "a"}]]}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 ". A dependence exists iff ",
 Cell[BoxData[
  FormBox["d", TraditionalForm]],
  FormatType->"TraditionalForm"],
 " is an integer  and ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"Abs", "[", "d", "]"}], " ", "<", " ", "U"}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 "-L where ",
 Cell[BoxData[
  FormBox[
   RowBox[{"U", ",", " ", "L"}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 " are the loop\[CloseCurlyQuote]s upper and lower bounds. If a dependence \
exists, then the direction ",
 Cell[BoxData[
  FormBox[
   RowBox[{"dir", "=", 
    TagBox[GridBox[{
       {"\[Piecewise]", GridBox[{
          {"<", 
           RowBox[{"d", ">", "0"}]},
          {"=", 
           RowBox[{"d", "\[Equal]", "0"}]},
          {">", 
           RowBox[{"d", "<", "0"}]}
         },
         AllowedDimensions->{2, Automatic},
         Editable->True,
         GridBoxAlignment->{
          "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, 
           "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
         GridBoxItemSize->{
          "Columns" -> {{Automatic}}, "ColumnsIndexed" -> {}, 
           "Rows" -> {{1.}}, "RowsIndexed" -> {}},
         GridBoxSpacings->{"Columns" -> {
             Offset[0.27999999999999997`], {
              Offset[0.84]}, 
             Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
             Offset[0.2], {
              Offset[0.4]}, 
             Offset[0.2]}, "RowsIndexed" -> {}},
         Selectable->True]}
      },
      GridBoxAlignment->{
       "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
        "RowsIndexed" -> {}},
      GridBoxItemSize->{
       "Columns" -> {{Automatic}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.}}, 
        "RowsIndexed" -> {}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.35]}, 
          Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
          Offset[0.2], {
           Offset[0.4]}, 
          Offset[0.2]}, "RowsIndexed" -> {}}],
     "Piecewise",
     DeleteWithContents->True,
     Editable->False,
     SelectWithContents->True,
     Selectable->False]}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 "."
}], "Text",
 CellChangeTimes->{{3.593634341559715*^9, 3.593634384822715*^9}, {
  3.593634431413715*^9, 3.5936345858437147`*^9}, {3.593634679719715*^9, 
  3.5936346935557146`*^9}, {3.593634975158715*^9, 3.593635023549715*^9}, {
  3.5936356237117147`*^9, 3.593635639516715*^9}, {3.5936356714747148`*^9, 
  3.593635693721715*^9}, {3.593636139690715*^9, 3.5936361587057147`*^9}, {
  3.5936362744357147`*^9, 3.5936362744357147`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"WeakCrossingSIV", "[", 
   RowBox[{"U_", ",", 
    RowBox[{
     RowBox[{"Inactive", "[", "Plus", "]"}], "[", 
     RowBox[{"c1_", ",", 
      RowBox[{
       RowBox[{"Inactive", "[", "Times", "]"}], "[", 
       RowBox[{"a_", ",", "ii_"}], "]"}]}], "]"}], ",", "c2_"}], "]"}], ":=", 
  "\[IndentingNewLine]", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"d", "=", 
       FractionBox[
        RowBox[{"c1", "-", "c2"}], 
        RowBox[{"2", " ", "a"}]]}], ",", "r"}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"r", "=", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"IntegerQ", "[", "d", "]"}], "&&", 
         RowBox[{
          RowBox[{"Abs", "[", "d", "]"}], "<", "U"}]}], ",", 
        "\[IndentingNewLine]", "\"\<<\>\"", ",", "\[IndentingNewLine]", 
        "\"\<Unknown\>\""}], "\[IndentingNewLine]", "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{"d", ",", "r"}], "}"}]}]}], "\[IndentingNewLine]", 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.593634697355715*^9, 3.593634762809715*^9}, {
  3.593634822686715*^9, 3.593634905566715*^9}, {3.593635029479715*^9, 
  3.5936350801997147`*^9}, {3.5936352918497148`*^9, 3.5936353256167145`*^9}, {
  3.5936357267587147`*^9, 3.5936357361617146`*^9}, {3.593636229332715*^9, 
  3.593636230683715*^9}, {3.593636317587715*^9, 3.593636317834715*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["MIV Test (TODO)", "Subsection",
 CellChangeTimes->{
  3.593568639637409*^9, {3.593630350174715*^9, 3.5936303510697145`*^9}, {
   3.5936328013247147`*^9, 3.593632802228715*^9}, {3.593632863311715*^9, 
   3.593632863695715*^9}, {3.593632915653715*^9, 3.5936329211807146`*^9}, {
   3.593633294078715*^9, 3.5936332997647147`*^9}, {3.5936335451267147`*^9, 
   3.593633545391715*^9}}],

Cell["See Practical Dependence Testing", "Text",
 CellChangeTimes->{{3.593633346531715*^9, 3.5936333549967146`*^9}}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Iteration Space", "Section",
 CellChangeTimes->{{3.5935646682263327`*^9, 3.5935646699933324`*^9}, {
  3.593567197283109*^9, 3.5935672043875303`*^9}}],

Cell["The iteration space is defined by the constraint:", "Text",
 CellChangeTimes->{{3.5935672384803076`*^9, 3.5935672578622456`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"iter", "[", 
   RowBox[{"i_", ",", "j_"}], "]"}], ":=", 
  RowBox[{
   RowBox[{"i", "\[GreaterEqual]", "0"}], "&&", 
   RowBox[{"i", "\[LessEqual]", "7"}], "&&", 
   RowBox[{"j", "\[GreaterEqual]", 
    RowBox[{"Max", "[", 
     RowBox[{
      RowBox[{"i", "-", "3"}], ",", "1"}], "]"}]}], "&&", 
   RowBox[{"j", "\[LessEqual]", 
    RowBox[{"Min", "[", 
     RowBox[{"i", ",", "5"}], "]"}]}]}]}]], "Input",
 CellChangeTimes->{{3.5935672586183214`*^9, 3.593567267999259*^9}, {
  3.593568112603711*^9, 3.5935681924997*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Show", "[", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"RegionPlot", "[", 
    RowBox[{
     RowBox[{"iter", "[", 
      RowBox[{"i", ",", "j"}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"i", ",", "0", ",", "8"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"j", ",", "0", ",", "8"}], "}"}], ",", 
     RowBox[{"MaxRecursion", "\[Rule]", "5"}]}], "]"}], ",", 
   RowBox[{"Graphics", "[", 
    RowBox[{"Table", "[", 
     RowBox[{
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"iter", "[", 
         RowBox[{"i", ",", "j"}], "]"}], ",", 
        RowBox[{"Point", "[", 
         RowBox[{"{", 
          RowBox[{"i", ",", "j"}], "}"}], "]"}], ",", 
        RowBox[{"{", "}"}]}], "]"}], ",", 
      RowBox[{"{", 
       RowBox[{"j", ",", "0", ",", "7"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"i", ",", "0", ",", "7"}], "}"}]}], "]"}], "]"}]}], 
  "\[IndentingNewLine]", "]"}]], "Input",
 CellChangeTimes->{{3.593567215822042*^9, 3.593567219991459*^9}, {
  3.593567274279887*^9, 3.5935672860220613`*^9}, {3.5935679525387063`*^9, 
  3.5935680213405857`*^9}}],

Cell[BoxData[
 GraphicsBox[{GraphicsComplexBox[CompressedData["
1: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
s9QD0y7jS14AVveDA/NF/Eq71KccO+0U1maAR3OfGTmg2hvtdRk3TeXWTq0w
SHPfGFl979xrTil7r+nvtWvuA6t1vpcv73ZKuTGi3HKv5r4ucqdj+ny/lAlv
LR9l1NynRda4lPqeWcohP2S1s2nuuyJHm39r5pByr/5SNY/mPqpaJ8zPjfJJ
OXvtzhF5mvuiyCrF5a/nS9ncMvdkoeZ+J3LXkqPdt0u55fNpe/P+O8d8bH/L
+VKmOeuvM0o9bvbcuqVmKc+9NriLR+rpzWO32vikfK3kyINCqYd/tKz64XYp
V3QZtT9c6lmjrza3jpOy7OrkRV2lHk27aamSI2Wfsps/KJB6crat7mKhlJuk
lhXL+Vok2SJMFyUqHh0bWVvaaYf/peyqJ+XGSdlD20seeWD0p3aWsu6CjSNd
kkcz6jW3eqSceKtnlk7O84yPT2cmSwk/ljSdWRiuixNdBqScsco4VawcvcNT
ctW0/9jv0/WeMIXXbtlW6JZxJLhu4+G9LcYIhSsm9pusl3EeeOK0hDSXPVLh
Ae+X7W6RcRj45On1YTqfXuElaybmJUo/fO71OlnV/7tv1+5hckfJA5f+nFBp
kJRNlyy47Pzv3kij2ifdUs65b9riLykxdWzxz5Fwaf+25UN+TZFxdcnVdc1T
pazzRvNGWdLOV86f+G1XKQ/pYvJzZdzbo/UbseOkHL/ydOn50q4jbtQeXSBl
ard11u0yLi1ccPtMkZTHwiYeuijt+O2sXe2LpZzq6vxynIwbo27P/SFFyhd6
1v4mU9rtZueAp7Kk9IXfrpQj7c3avsmUXCnbdP9n005pp58+mDhyn5Q1XG2v
9ZBxV79Ol1f2kfJ2me9rXZX227TgjVO3pNzfo2r3CZInYx5tjp8qpfqdgMD4
KB4MYHXvPYCVHQWwuv8ewOr+ewCr++8BjP5/tOrv5zMkP3z9z9V/CjXnzdb/
uGn3Rc36MDy0v1TlPXrJ559VqvVorOa8BXHms93XfGnRB++LHS4zvuxk923T
R026JWVp1pOxr0Zv1vR6ZVzY8bOf253QnBfL6fdpWtwT1psnrun4vst61/Ty
xpv9CzTnO/A7f0fcMOlknIOf/XTd9gKjzAOf9RnH52rWo1mPHzYpbbNbxpnY
hfJDUb3mZz5hvbrpW47ojjJvvJjzy4EizXkS/H/WX/nXs83B+2o1G4XV8ck8
0Duj+Hy+Zj2b81rY3ap/+1RP1Zzn2rqpQZmcJ6x337Vbe9hk3jgves6LxZrz
K/jjb9Iytzul3eL/R09Zcidd5oGTMj2dtmvWwzl/hV33nJU2uavmfNbgdx4N
ynvCennnExXre2Te2Hpzf2eK5rwM/l839bjDXxKh4okjf7fcbZd54PPn8jdd
1Kynq/vwAd4o3yzs2ljNeatqsQf+KHzCevvq9NUPDTJvvDXghcgszfkc4qs3
T43pb7YE79ulvXA23yvzwFOzrbXiNOvxxFvw0vrzv3cr0Jyf2vPTwmYnnrBe
H5n32gGrzBu/jis3NFdzHoj49IcXa7zokHErfDt9+pRBRulnPzNl5mVqzkul
pbWqMlXmEZeqd92ll3nSyeMJH691yjht37yBLpkHTf/k7IWj2XGiQbMr9gKZ
52Sm//h6mC5BTP78s27FJWHiwskp7nquRPHPpYZ1sywR4otPu9fubKkiXm5x
8H6+O1K0erHu9NEyfpw3f+i+i4ZKwjZwyLJwXVUReu8fPsDOwOg9WN0LDmB1
/zeA1X01+D0wbmD6BUc0vDOvlHyfkrDZqY2lnSleC8iMIW1bJ+uC7xf6f8sf
RzIyJA+1bRK23if/37lNpxbJGlxx/PKFFslr4H9fXfX0ITmflndF1zBp53Uv
dzh5VIMPDjv18gJ3EM+5eENXU7ZXNe2FUalSGnYuyH9QEqvKj7V66XwPaZ/g
GheOLe2jwb9+MDistiuIp/ordJog7Qm8//NVlaZq8IfVxKD20v7ALy44tnGF
1H/w6OZjRqzV4Fq7o/4YLu0F/GbbHWMckmf53v5Hsj5waXDcxOSjXsmb4Mg7
jrNuDY65F14zQ/IkuOrkvLiOGuxJs/zPJnkP/PNS71SLBhc1qvtsqtRzcJeR
7y3O1OAjXzz1apic7xZDMvoPkDwMnhJ7pOZgDS4ds3DSWumHVi+8ET9I+hGe
35Z66RVd8j2F+3XI2KCXPA9+eXDijSLJ4+Div7bezJd2GNp/t5al2y2QfuPK
exefayLtkfH71vNqbpoGZ2wpmDZX8jXYnxxxYIYGnxlou7nFHpy/Rbu8L2zQ
4FkJWb3OpQfnq8PQgkWnNFhsM+yM8gXn70F1W/lIDf5pYXy3Acbg+5Q2r48b
rMELruS8NF/Ob6305d8XSBl+/eD3O63B98tyDPtgnwZ//+XX1a4agu9319Ty
6C0NfrvNMHuiJ6h/31yMN1fX4KibLa6abMH36zz33xWtNFh3s+Yqs7Q37I75
21h/VLnJmnX1mbsuJQ2SkjiB/AM/iZ3X/+mTJF1yEJeJ87dz+IMYPwhmfg+a
d68+JeMW/DDlR9/tMd6oiW/hf96feACMfwbjL8H4L/CRV6ed8so46PTh6EN+
KVnPHilZ06+5lwN//eedw2Vcz/+JLz6pPaIgRUrbzfaZxZr7pMRlvP+i0u9e
3mLX8FXJ7bWtbMH3bbFiV/JgY/B9/V2+mDjXG9Q/4jDFF4G4i/aJkygnLqIc
PxZqX8RhYOJG4h6eV+dGA5j3Qs7468dlpzTzUTE++ud6Gj5tNvmTqEjN/Gz8
+ZSxs4Y/L6X1sKVp5mvAoLUzR2v4Mv9E3dM9NPOXkDTh3hIN/7eZej9rgkY/
LNbZ1X0y7uF9iYPAG7c1vpbuCvo/4hRwnOHwVrs+mP8QR4Tq75rNg68clXFw
xtb7nWyafGtG0le1PJr86tLgZrcNvsef/3Zeo3+Gy7gcPGdHzkOTLYiPvhOx
sZUGj7s6LzFSxtkju/2W0tkS5JcBjVKODdcHx/fn5dPHrHUG5yPh+PUWC9xB
/nj/jbfOHs0O4h1Ttq3aaQ3qW9VSDbPDdEGc23h2wlVDcHw9K3Ub6rmC84He
gzkvBOa8EJjzQmDW15T/DMTBjNeU+HoXsjWYOBV8etDeTU4NJo4EN9vxXp5f
gxlP8pQbTzd4rrgkmG9Trvg1EKfzPHEzmDg2tH14gnWL0PtCS7uOKHFKnmiw
/4/DRZr7QGVrNauQo7nvg/8nLmCdI/T+Ts/wjYvNkhfWHag0LE9zP4d4gTih
b/n6x92a34Ni/23xvqI8i2Yfbs+IAd09UpKXqX26QDxBnEE7tqebbPNLSd7F
vt3w7BXbLj7h/k504YOWvpISU5+P/j5WqLmf0+/QktMXpX+5YDjXs1jKim++
IFz2x/f18Dvw1Suz33iULiX+iXov1dUnjpP+Z+uQ7Bl5mn28pPOb0zxS4p/Y
53v6wUf14p5wf+fMdwuHmSUPVn5mTcsTmvs5W+q1+j5T6mfL3E8aZEk5YN2R
aJ3v8X1A9Ji87ssLtw/YpUTfqTdn/OpzRZKvqv56vc8Jzb7fMPFWmWQp4TP2
BX9b1s6R+YT7O83KN2/lkPnh5oPjVodLe2a/zzDh7KQ8aS+LdtctyZdyW+So
f7I1v9/FfiB2RR54t/kXTq+U2B/1rh95bWOK5M8RT81+PlWzT7h/ru6wVUr4
lX3Esa9Xe9jvCfd38nufTvTJfNI6pmNiquZ+zvCjU7qekPZ7v8beootSVn87
udDpfHyfETsnb+w0r8lQo5TwAfXaNbw+LVfy+cEPG5cdp9lXrHvVucwtJXzP
vmODkss5eU+4v3Nz/YTz6TL/rFK35riumvs5Zd7okp/yhPs3i/t27mSRfpj4
m7ibuCN03/KL5MpvmTX7kquvHW1hk5I8lXrEUQlnB1rPafYpiVsa5Y7MPqG5
v4Ofwb8MLJe6MsX1+L4l60CsF8FLt/xxCzM1933wSztmvXQoSrNPea1Dbu1U
Kf+u9uqG8Cfc/2Edm/OprFtzfpl1as4nsy7N+WPWoTlfzLoz+4esM7/51q6G
GzTx14qft/zb1Xzd1CgirHeOZp90ytghpRdLOaBa9bodNfd7Or35xm2TJl7T
lavz1gBNvLZ63e1dMzTxWo2TfccmeoL+uXFhak57jb8eHX556wqNf667dnPd
Qxp/fKTX9NkPSoLt28u/9aCWxt/+sDgn2yd5nzyL/GrIX+4VRinXGw/Ztkue
Jc/KG5O5uqvk1dhfxj6TI2X0uOFt4ySvzd35444UKc//cXxsgeSxwVVTigul
fM+bUC1H8siNaj3m5EppbjC2Y7H0d7uHbvOES/7Y9dyPVwql3bYffv+d7VIu
nFjj6Sxpp7X39P2yq5RP27v/HC7tZPneL5vESUl+N7Zm2fcLpPzp/Ye/rpD+
j/yROOhK5u8LR0s5yLC/0aH/7lUH4ivywC/PfV1uqZTkpeSjz80fOC7NESty
m1V8uYmU4xOMyZcMflNEL6ujWMpPquS/kWO8Y6rc+/j+XCnXbW+U8lv2bVOT
yOH5JzT3D1p/mOrWy/FkXVKdxw/4rXExG1xeKclX8Ff4CfIW4gX8A7xMnEj8
AB/Dg8SNxBPwH7xDHMm6lTo/H4gnWBcu/+vJibma+0bEB6zbrh/63eV8zf2h
6tNnbYvyJYuWrVtkxHkqq/iH8QazDg5mnQXM/kBaX0tBK1uyGHz9r1Lj/JVE
q4iYki32KNFsqN3iMwR/z+aDGrsm26RkXZl5KOzVc5hD8/t5zMOtFF3tDCnJ
bxxnJ36ul5J1YeYpI/xAhWTN7+UxT+yjqN/Fa1bnHYuUrOsyj7N6DTlu1fw+
HvPIPgvrrllzdr3okpJ1Web50vfRLrfm9/CYZ/Zh1O/eXR4QqUuOVOuq6EGb
iuvG6TW/f4cesE/DuqeuZeSxbClZF0VP8DP4DXWP7Zdv6rqkJM8j7qz21cqB
BZr7a2OP35vZVfP7dugR+wjEzX/ZvjEVS7mnzf9+L9LcV2vwyZ57YzW/Z4ee
sQ+AH7qz4ps5Nsm3+InQ8+wlq5N+858Jnmdf1eN8k2THHRP9cj5ywb1Xpnd9
wnl29Ih9euJe8nbi03bfxN4Z+4Tz7OgR59mJQ1/4rXV0luY8+72OZ94qeMJ5
dvSI8+zEhb7RSaNyNefZCx5+/2vRE86zo0ecZydOm208fzpfc569y/JJjYqf
cJ4dPeI8O3FT80Mb2m7XnGdP+r4kLkvz+6mMH/swzCN5xdcLfBE5mvtm0+/u
m2iTfvuLSZ1HOKRc/Ho5R57028b8tvr5Uj78dnnOCem3J1y/dOKilN1Kt30h
VfrtE22mr8mUcl33S+XGSb/dZFHqx3lSVvou72iR9NuOO0Wvn5Cy8cTEwzNk
/jTymQ2z5kp5OvVcsw0y/6nz+yf3t9iD9+HQg7zdVWqmau67hf39fGqc5vdE
+T/7RuzX4F/ZPwGznwFmf0Gt13kb/35Lkx+zv8s6EPc4snT6jrrk4D071sXh
Rep9e2jbF6M1+Xy3cbNLLdXk7+H1+w3cp8nX4V/2J8HsO4MZL/Y/eJ79MDD7
U2D2i8Ds34A/bfBVxFTt+lxgv519Cs6ddwobO82muR/IunerD+9+YdHcH2S9
i/3wITVm9PNo7guyfk47/H/0qoSuPikPjenR75xmPerjuvX2RWnWnxoevp/e
RLPedGL83gV9NOtL6vxJIJ+Hr8HwL5j9GviS8WY/Gcy5APIB+oNvwPAHGD5Q
68kB+war+9qB98HvgPEjYHfV+hWXumW+sPvKLJvfbyq6fuf60ewoQdxb0Lp3
ncFGyf/Dttx3Om+aBv76YNg+a4zYO6JRRrKr2NTlRsPP5npjxMinSy80W+6b
kobtO37LECeax24cdCJdJ8osLHV3i12+17s1nbn6UmLnUwtaVffEi/kDezZL
dYSJtVkHe59LTxBDf96eu91aRgzb876rlS1R3Nn6oPI4f7jofXvx7ihfotiX
mNMizhMhao4wJQ02VhEdqyw4VZQt+WHx0LQmjiri2cHhCTnGCqKoZtT4uV6D
WDXEtC7FpRfu9i3m9zEniwk7l50ttFcSBSNHFtZzJYueVaOqZlkqKz5k/OB3
MHwNhn/B5Bdg8hUw+QqYfAVMvhJqv/hJR65DNHFEC/R+zFe/9gjTyThtb+99
/pI7pleq5yzvY44VdQ4cjBikf2iq/+q87fVcseLQqK+HONyPTNd2p8dM9ceJ
qz9N/SPcV0ocvflu/c6WePFL3I3y892lxYLh4R+tdSaIVxPqL+tqLiumLGr6
+Wh9okgZ5PjroiFctEvx/nM0O0ksfW/fyAJnOZHRrsKjJe4k8dH29FWZtvLi
3t5l7cJ0BlGy4/2s4pIK4sydv/rvsxqE1+Adk+etqL4H/wDGr7957PiZW4Yo
MWNX4S239Zopcsrq9tU90QIe+PH5sT+0ssWKB7VeytT5Hpr6//3aU4ON8eLP
8z9dLcouLeKm1Zgy15sg0pv33priKiu2ZVy/tsWeJD77otTsXH15MeT01u7n
0g3i4tXF/bZbg+9DfgzmHAiY/BXMORDOBzBf7NeD2T8Hs58dOr/kN2DOnYDJ
X8Ccu6nea9TznS3RIt/zTMMM2y3T3nJtvxytjxXZtoG/e9MfmEZ9n1x2qTtO
hDm6bMq0lRLG3pfe22dNEG9dvPNpnreMOFxh8+FbhiSx4ZV5lhPp5cTE9Xmm
6p4qIj6/acNURwVxc+3pd86lx4ibKbtLTfbeNS22rCuK8sWKb4sqLDU6SkzZ
kRObNHHEi+9Mz9TKMYaJR4WdF/cxJ4oKc3+9VWgPFyv71K4w1Z8k3rny7q5w
X3nRQ3976FqnQWxtWWFeV7NefQ9+HIw/B3N+Csz5KTDnp8D4cTBxJXr1ZefM
c14pKSfvBHP+B0ycC1b3H/znK0/W/N4/53BD2ydvBXN+iP029l849wVm3w3M
eTAw+T6Yc1dg8n4w57HArAeAOZcFJi8Hc15K7RcF9svA7JuBif/AxIFg4kEw
cV3ofhTnnMDEeWDOIYFZZwITByp7D9zX4vzCWU+XiJa24O/Bqv2FwLoP78M6
PZg4Q+3vBOISyol3wOQlav8hcO6QcvIUyjk3RznnE8HkKdTn3CLlrANSzjk3
yjmfGDreob9jQDl5OJj8G0yereoH8kswcUWNLsMnOfzBOBi9p5zz5dgH487/
eR7eW9J1dc2OUmIfxIncq6Oc78GueJ56xOe8L+cZwZxfDB0v8lv2i9kvwi/X
7X52i14XvNfHvFPO/T72c9AT/s/z8LDO9dpNp5S8H+sm3AOknHbYH+J56sHj
P/SaNdcsJd/HOgr3BilH39jf4Xnq4QdesA/8KldKznOq3wMP3DOknDyZ/Ree
px5+ZObxCoO3S8n5T+Jw7iVSTt7M/gjPUw8/dLnxKhEnJedFieO5x0g5eTT7
FzxPPfxY6087xORIyflS8gDuPVJOXs3+As9Tb3qHLumHZLxN3E0cwroM9zgo
x68Rv/A89TLv1VnwoCRaECcSt7BOw70PyvFrxDs8T72Uw3/eyLRdNy2rWu29
LCk5XwVvcg+TctbJWU/neephP+z7cY7u7orjG4xSkmfsL9XqitsZ/J3W0PNk
/J/2uH/J/UriLe5ThsZf3NfqvSk6LlLGN8Q53H8Mrc/9KuLQcmu3PpcsJXF3
2pvd79mlJO4+GVG3r0tK4tS3GpZ+94SUxOHDy+7vECclcXjbnhkTCqQkjt00
+eumqVISlx94c3CNHCmJy5et9XYulpI4N/7vFhXHSUmcXu/7KH+hlMTppSJt
dbKkJA7+IOPf40VSErdPqrB2e7iuoorbe/Ux3M2XknXgPXmTXSlSkjedevv1
z7tKmdQk03hVjiNxfPYB/4Q0ma+QtxzbcOTD9jJeJW7deabizEQ5jsT56SuW
/pmrv27adP1cp3Ga+2jwLffLVHwTuD8G/j8Njo2i
    "], {{
      {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.5], 
       EdgeForm[None], FaceForm[Opacity[0.3]], 
       GraphicsGroupBox[{PolygonBox[CompressedData["
1:eJxNnHf8l9P7x+9tRkgyM4pUtpBUWrJKsrMjKqFQZioJSZJUkrZSKCs7K2SU
vXeyN5lf83c9P6/X5/Hzx3mc633d1zn3uc99zjVe17nfW/Q8s/sZWZIky1dJ
kjzqM9Mk+Sfqv6IsCPqZqEdEeTGERsbvS6IMiNIwSp0oZ0fZIsp6UQZHOTrK
HlEWRmeXJurz+Wh7efAujrI8fhdR1ojyQPx+Nuoro3QP+uAoHaN0jdIlSpso
3aIcFKVdlJcZU5TborwZ5cEo90e5L24y0n2+EPe6ImSHRvk4fq8ZZb0o9UzX
ibJplPWj1I/yapS7otwR5clo81zUY+g7+rzabT9z+43dZq0oa0fZzL83YH6i
7dKor4uyta819H3quM3rUe6NsjDKxJCfEKVv0A/Hvca5/0ZRNvEYG7umry/N
38p1Pff9TvSxLOpJUfYNunOUtkF/H6V5lF2iPBH9T4m6mXmN3Pd2rhnv9q63
ibKr5bj+dpRHoiyK0sI8ZFdarlWUn+OeL0Q9K8puvr5DlHejLI7yWJQlMYaZ
Hs9jQV/vZ7k5U797Rfk0+nk+6qlRWvt+9NfG9e5RuoV8lyhnBD0n6pui3My9
M/XRPsotudp3iDI/V/uOUX6P/l+Mem6U6cGfFuXMoG+PekDUPaOMDZlrovQO
+n3GzbpgzYVM/6hPjPKN55D5nBL8G6OcHPSoqOtG27Wj7BalRZRTg39F8FcP
erUoHYJuH2Vx0NdFGRelD88f438j6geijAj60ihrRtkxyg6Z1j17annUqyfa
G6x39lIX7w/WN3uBdb9uon3DfmL9rek1w3q+PPq7LMo6mdZ9fa/nOl5T9bxe
6/t3i5DbNdM+6Rh1h0xrgj3C3tgo0d69ze3qeY1u7Pab+vdmXmOsuT2jj5aZ
9sNI9myU+pn2Amt9S7dp5HWy0O3Za/e7H/bXqGhzZZSNM63R7b2G61uee7eN
a20y6YvhUV8SZZVM65B32fQ/+6H5f/bDdr5/c7/ru0N+QpT68ayjo/1VUTaP
sm78/iCu7+v13Mp7gzXPPtnTfbUwf3uv5xbeG7t5v7Twumcd7xf97Jtp/9Tu
gdZe2+0tMzauXxOlaaY12sZ75LsYz8ap1i77g73RLpEeQC/s7H3RwX2OietX
R2mcSX90dF8nxe8DU+mV1lF2j7JrlPMS7QX2y03Rz/mJ9s+FQU+KNgNZb9iG
qDtHOTfRPmPv7I1+irJ/0PtE3SnKgUG3irZ7Rrkvfs+MelCiPd4hfrePcoDf
A/OHDukd9zk1yty4dlTURzIPjDHq1+L6PTxn0K9EfWfy//qU99ku+G9F/TBr
1ftgbNAXY7Oij/2inBR0T95f0PvE9Xfi+uNRDgle9yhvMabgvxe8p6LcEL8v
izICGxjXe7APgz4t6r5Rfg06j/IL94kyJNp2jXJr0BsGv0GU04NOgzc96MlR
5kW7GVGmRhnidszjnfH71lzzOSjkNo2ySZQyyq/BGxrlrri+INc72iv4rVKt
03/j9+9RLogyO65faJr7o8M6Ral4RnRP8OYGPSvK5FzvH71Y+L1gu6pEY+Rd
scZWCf5vUV/id41uKz1mxs7aHZ/r3Z8W9CRsQa51tmPUO0QZHPwDWCNex3tG
aZlqTQ3z87H+dojfwxOtv1Wj3S7xe2fzLvGanGXdzpoeGs90SJTUcqt5jfZH
l6bS0TOY/0x+z1nxe51UOn1glI1SvauX4/q1qWzFK0GPty4/J8oGqfTDNnHf
G+La/6Kfl9hfqdbWRVEOsX24OmQuirJt0M1TPTfrvqN9nsrviuc7CR2Sah2w
n351zRrY3vPCvvzNNe8d23SB2x6Tsrj0vm8O/pxc+5U+hnhdce/B3ncHZ7K1
F3ktMd/oi12C3jnKsV7LtDkhynHxu/D4sK0Xm39A0PtHeT5VH0M9ZsY4zO9x
zbh+eyp/88NE/iY+6Qnxe9X/vOPhfqfIoG/xL1e3Lr+cPZ+rhn9vLt+S3ysS
+ZjYzfuDf1VifzFT+yss85H5xwSvTpRRQW8U9YZRJga9VrR9MJXfenTwVsWO
Bn9t22r6fSCXDwm9KJdPiG55KFeNT3ksNgPdHfSnifxN7HXdkHkqlR8K/xPL
r59JT10b9CPYoET+4qO5fD9+1800jtFBfxHlc8sM8F5gPRwX1zdgvXK/aPtS
Kr91Q9veCW6LD4tNP5416LX1dZSvEvltPUO2WZR5QT8Z/UxP5F9+F+Vb08jj
k2LH64XMu6l81c1sqyfzfqPeIsq0oBfn8v0mux98QOzyj1F+SOQ7PpXLz+R+
9fE9UvmMW9kOw2+U6feMoB/P1R9jfjro2e6nYaZx3MhajHpr/EjfCx8W+/hz
Ij8R2/1MLr+R9tuGbJMocyzzUyL/c3bwbjHdxLYU+Y2i7f9S+Z5dLIOevClV
PDM/SoOQ+SWVH72d7Tlyx0e9SZQbgt4+0zXsBT4WvhY+21LWW5T1o+3zrAfW
fa7rCyzTN9r1oW3IvBH1/Khvw94E3S/KwlQ28g7L1zeNr4Xveaf5d6SKl/j9
Fr5b/L4nlexdlt8tk794d9DvRP14XH8slS+GD4fPhi95j+Xh3Ws+fs5jiXyY
/iFzZpRHU8kutHyrTL7jfYl85fvddmvT+H5LUsWHtdcfNP/saHdWlOfi+ntR
L4t6aZS9M/mIDyXyCRZZHv/0Afe/vfn4aS+niouQxa982PJcf8QyD6WK9xj7
IHyiKK8Hr1MmH/rRRP7EY5b/IHhv8n6wi34ntXP9qt8Hsos9P/iGT5k+P+jz
oiyPNsujXhH1R9jPTH7kE4lkn7T856liG3htzG/reonp3e2LoUNXRB/fBv1N
lO9T+ZdPs5eCf5j9rvdSxXs8E7qWdujbi+L6hVG+TqXn0I3ouraOgfiNvkFP
onPQGeg09MZB9rP4jT5AP6ATjrBvxW/2KzqBPXu8/TV+d7bNoV/2MfuXvfw6
eyv486Kcar+sZm+n2pMvJYpvHvd7OcX7hr36KXshyi7UqfYD/iV77mXvSWwX
vgP263PWeZQ9MsUZ33r8rKk3vTbP8BqvXSuve61/ydqL0jrK06nWNPHh16y3
KO2jDPBapq9XUq1L/NrvWRtRDvTafNtr81ueK0rnKOd6vfDOiAWxN1f7/b3r
tXaO1yztv0i1bvB3L/D7rF1D73vtYHexy7nrDz0PxFsf+jrxw3LLYG+h13D9
kdcM8fMHbjvSfGSIiVf8h7fC8sS2H1vmfa9F/PVPzF/Pz/aJaepPvQ4/9m/o
d6P/Z1LN96JUe5hYghj3c69PYtOvvD7Hmb+x6y8sQyz7ha9v4jbIXO+2W7n+
8j/01+6TmBL7hw0lVvnGMt+abuZr35r+3OPb2LzvvMaIib/2PYmbvrf8D6Z3
cc3vnV3/aJpYEBpbSby10vI/mW7lmt/sKXCYn8yf6b5q5X+2zGvYzFT7jJgV
Prbyk6AXRNkpE27wmd/Rm/H7rlT77G3Wsd/JF9idTHbgM2Qy2Rzag5XcznxG
/WAmvf5NlEcy6d2hifxm/M/Do6/G9mE/jGsfpFo73wW9OJPu/CjKl6nW/hFR
tk7V/uPg/2BdeEkin7tnlG1jUTcBDwr+UVGapPLfj4x6m1Ry+OPw8MknRz9/
JIoRiD2IQYiXy+ijiNIrlR/NGE+AH/J/J8JmpwR9Y6Y4DZ+7sOwZqWI87oOv
j88PvUn0V2XqY6dcsVaG75SrHzDffqliSObp9FSxHM83MmQ2SzXGM4M+JdU4
8AsryzNG5pN4AD99VbclvlrNz7Wa+4C+LvoZR79RTksVGzN+MOU1LTM4U1xL
DEgMRiwGxnJVtNncvHNyxYe0OzXKWm5LvIgeQYeATa/rtuiVtf9Dw0cX3ZEL
S8CP6h2lnmWo1zN9bq5Ymt/j7XOtkiheXNP3oh/ivy6+T123nRj8LVNdo2xg
mWuCPyZK81wxOPHlcex502AC1BuZj31mPrDRYC0NzG+UK2Zmvq4EG0j1zkan
6ot+rvc9iPEb52qzqeesjudtYK45Bd8/L9czg++PSjV+YvbR4Aqp3sEFQTfN
Fe+yN9gjxJTvx9heTWWXzksV3w7y2mdfEM8Npv9U8e+wkD88SrNUMTg+BWvn
/FRxL332yIT1IHNBqriXOHJLxuj4/yzGHmWnVLgrGEavRNdZa8T94BjgWfsl
wo129r0uTIUpMDaw2129NpYnosE9wFFamE+9m/vpYRq8dw/fYz+3291tD011
Df7upsFTWrtP+Kyjll5L1KztUxJhyy1N1zEf2VVy4TU7eY238tio9/J41jO9
ru/Tynz00TaewxaeE8aLHQVfxq5SwJbBhsHF2/pZupoG2yGvA9YDptfWNHyw
7famu5kG0yA3A34Epkc+CSwIDJB7gH0Q37S3TGW6nfsBL+xoPvdq4/GQP+rk
/TjBNDKvxkRenyrf0sn3QgY8q7P3Anjfvt5TYE77mT45EwbKb/bc/uaDE0L3
s/wBpju7H/rcxHzaTc2EC9ZiqQdahrF38Ty3dfs2nu8ufl6esaufE/5Bfhdd
zEdmfia/dp6vd/OzM08Hez7Rr9g89PT2Mf7topycKlY82HNC3d10J9P0gU3A
/rG/WeOHeK1iH7BtrCP2N5jQYK//o722sUXYwhqbl2qfsPbAvsCksFHoH3KK
rGv2OlgSNq1Pqj3Dvdjr4BHDEu1RsCHsDDYBfY2ORV+d5P5vyfR8PRLpTmwp
ejK3/drHug49xp7imfr4XthSbBL2CB0KPojd2sp6FX2C/u6bWoenwgJZ/9hD
7OjQoLG92GPsL/aS3Cq2G9uIfcU+YvOxW+he9CmYIzaDPUXOtI/1JbrpfO9X
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
rA==
          "]], PolygonBox[CompressedData["
1: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
DNPdV73oWlB3YIrtt2T2nYrx/wcdIuR9
          "]]}]}, {}, {}, {}, {}}, 
     {RGBColor[0.368417, 0.506779, 0.709798], LineBox[CompressedData["
1:eJwl13nYV2Mex/Ffy1NR0SqFiJAlMTFIKe2otBAqJBLteygtFMkelSZKNRjG
kkRlLfvSgkS2LEXUmJJUovL6XP54X+/v5z73Oc/5nXu7nlo9BnTsX6xQKFQs
UShUKFkobMJ1RYXCRt4PW9Xl+Se0QAO5Im/jSvw/1C1VKDwgV1GXU1fmGfJB
6ge5mlxefSDPlOurN6sPwG9yVf4/WuIMuTpv5xq8BSfo/5B8cN5JfRDPSlbP
5kPl/dWH8Rz5ZPUudU3skA/h39EKDeVavJMP5z9QT/9/y7XVFdRH8Nzcp36Y
j5YrquvwI/Ip6iI+Ks/lI7kkt+ZGfAzv4mO5FJ+o/3/4eLmS+jh+VK6pfozr
yZXVJ/Lj8j/VFfiEvB/Xze/js/lMPon/5H/kvZL1fyK/W66irs//zXdRP8mn
ylXVp/FTyfmG+Tvy7vwersHncGM+nfdwAz44f0f/edwwY6Y+g5+WD1M/w43l
auomPF8+TX0Unynv5UZ8JJ/LTfgsLujTlI+Wr803Q3O5mPZmXEcegrnqNpkX
2pfiX3lHroXD8azclM/CYAyXX+HT0RUN8J62ZnwMjsUGz/0R72uvLi/L/JYv
VTfEG1iurXnmAmrjO7k1t8IEvCV340vwoXtHyWXVQ9XDMF9eyUP5QO3D+AP5
MnUjdMfluCBjmjmB4/GjPEK/4Vgsr5dv5nVZa9Zoa+2vyjfIG9WjeYm8gj/K
HMHEzDttt/Cn8oP8ar4LvsCleAxvZSxwibq4/t34bbmOerV6QtalfDN/EtRt
cY96X33u5nXybH4ZL+FzXIMn8KZrrXC1ukj/Xrwi60m9Sn0TfpbH88dYrW6D
u9T76HMnfyc/xC/iBXyGqzK/8YZrLdEz60//K3l51mXGRD0u30y+Md8mfyNz
EHeoy+hzO38rz+LFWIQ1uCLrEK+71gI91CUyXrws6129Uj0Gm+SxGVusyhrC
berS+kzib+SZvDDP0/Z8xgTdswfgNW2P8G/Gdqm+r2WOYEnGGT9pf5YXZH7i
eTyHIvfcz9MzfhiMr/V9hdfyIO6GaZiKkvrPy3rF01k3mI9Ts97xWfaHrAv3
1udP5ZOz9rNPYI18CpfwnPt4CrpiIL5yz8v8JQ/gLrgXk1E8Y5X9CY/jqexJ
qJd9C59k3+MN7j2OP846yN6Z/Q+r5bpczHPuztzDxeiPL9zzEn/O/fiizB3c
iUL2avc+mj08+2z24OwZrtXGqqxt/sG9NflD+VA+BLXwUc4T3uv67ZkzuBB9
8620vZhvwn24c8Yck7BH22z3zsmZlXMFc1HNter4IOcgf69fZV4hV+FKOAAr
5aq82/WJfCsuQO+MibYX8s34Gj4ft2R94k9tD+S8xQzMwkyUc20/LFeX5/X6
leH35X24NMpimbwv/+H6eJ6ATlm7GQNtizM23Is74qasK+zSNs2992Nq9mdM
R7HMFbynLs7r9NttTN6R9+T8yhmg/V15r/p318fK49ABV2WMtC3KWHBPbo8x
GI2d2ia7917cgym4D9s9a2f2MfWO7B/6bc1eJP/Kv2StZe+Tt/EO10d53g04
D1dmLmhbmLHiK7gdRuJ6bNd2R/am7B/ZA3EXfvasSXxb9l3cion4Vv81mTO4
PHM28zXjqv/arFn0yBrK+sEm/Ue7b0z2eIzD2PxO/adkH8zeo8+c7KWZD/nd
6skYqR6Fa3E9rsNGfd7Jd0b3jHvGBJfp/1z2IyzAIixEU9ea5x3Vzfgb97dQ
t0STzGf3XZT9Xt05ez5fyG2zb6q7cA++mG/MmuNz+Ozsz+iaMyjnHkqpO/MI
HsLnok32h+zx3Jt7ch/uxe1ytnA/vpr75gzJnsLtuC2G5vfLX+a9UDrvm2/B
w/g8tM8eKPfh/tybB3DfXOf+PIj78UAez/O4I3fA8Hxf+av8TpRRz8hZ5lst
4KmYhvaYnn063zpnadZozjZ8j83y5ox7noUOWIolWK99i+tv56zFD5m78hbt
a9Vf531ypuQMyfO0b81Yq8tiA36Vf8kY5pxDp6yDnJt5nvZtrr+rLocufsdI
HsGdcD6ekQfyYB7AQ3hQrvHDqJH17jn7528V/f3/w18gtZyN
       "]]}}], {{{}, {}, {}, {}, {}, {}, {}, {}}, {{}, PointBox[{1, 1}], 
     PointBox[{2, 1}], PointBox[{3, 1}], 
     PointBox[{4, 1}], {}, {}, {}}, {{}, {}, PointBox[{2, 2}], 
     PointBox[{3, 2}], PointBox[{4, 2}], 
     PointBox[{5, 2}], {}, {}}, {{}, {}, {}, PointBox[{3, 3}], 
     PointBox[{4, 3}], PointBox[{5, 3}], 
     PointBox[{6, 3}], {}}, {{}, {}, {}, {}, PointBox[{4, 4}], 
     PointBox[{5, 4}], PointBox[{6, 4}], 
     PointBox[{7, 4}]}, {{}, {}, {}, {}, {}, PointBox[{5, 5}], 
     PointBox[{6, 5}], 
     PointBox[{7, 
      5}]}, {{}, {}, {}, {}, {}, {}, {}, {}}, {{}, {}, {}, {}, {}, {}, {}, \
{}}}},
  AspectRatio->1,
  Axes->{False, False},
  AxesLabel->{None, None},
  AxesOrigin->{Automatic, Automatic},
  BaseStyle->{FontFamily -> "Arial"},
  DisplayFunction->Identity,
  Frame->{{True, True}, {True, True}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  LabelStyle->{FontFamily -> "Arial"},
  Method->{
   "ScalingFunctions" -> None, "TransparentPolygonMesh" -> True, 
    "AxesInFront" -> True},
  PlotRange->{{0, 8}, {0, 8}},
  PlotRangeClipping->True,
  PlotRangePadding->{
    Scaled[0.02], 
    Scaled[0.02]},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{
  3.593567288200279*^9, {3.593567943483801*^9, 3.5935679649569483`*^9}, {
   3.5935680020086527`*^9, 3.593568021792631*^9}, {3.593568127251176*^9, 
   3.5935681936898193`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"g", "=", "\[IndentingNewLine]", 
  RowBox[{"Reduce", "[", 
   RowBox[{
    RowBox[{"iter", "[", 
     RowBox[{"i", ",", "j"}], "]"}], ",", 
    RowBox[{"{", 
     RowBox[{"i", ",", "j"}], "}"}], ",", "Integers"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.593567296288088*^9, 3.5935673959150496`*^9}, {
  3.5935674455620136`*^9, 3.593567449543412*^9}, {3.593567482515709*^9, 
  3.5935674828037376`*^9}, {3.5935675512065773`*^9, 3.5935675521896753`*^9}, {
  3.593567587778234*^9, 3.593567605529009*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"(", 
   RowBox[{
    RowBox[{"i", "\[Equal]", "1"}], "&&", 
    RowBox[{"j", "\[Equal]", "1"}]}], ")"}], "||", 
  RowBox[{"(", 
   RowBox[{
    RowBox[{"i", "\[Equal]", "2"}], "&&", 
    RowBox[{"j", "\[Equal]", "1"}]}], ")"}], "||", 
  RowBox[{"(", 
   RowBox[{
    RowBox[{"i", "\[Equal]", "2"}], "&&", 
    RowBox[{"j", "\[Equal]", "2"}]}], ")"}], "||", 
  RowBox[{"(", 
   RowBox[{
    RowBox[{"i", "\[Equal]", "3"}], "&&", 
    RowBox[{"j", "\[Equal]", "1"}]}], ")"}], "||", 
  RowBox[{"(", 
   RowBox[{
    RowBox[{"i", "\[Equal]", "3"}], "&&", 
    RowBox[{"j", "\[Equal]", "2"}]}], ")"}], "||", 
  RowBox[{"(", 
   RowBox[{
    RowBox[{"i", "\[Equal]", "3"}], "&&", 
    RowBox[{"j", "\[Equal]", "3"}]}], ")"}], "||", 
  RowBox[{"(", 
   RowBox[{
    RowBox[{"i", "\[Equal]", "4"}], "&&", 
    RowBox[{"j", "\[Equal]", "1"}]}], ")"}], "||", 
  RowBox[{"(", 
   RowBox[{
    RowBox[{"i", "\[Equal]", "4"}], "&&", 
    RowBox[{"j", "\[Equal]", "2"}]}], ")"}], "||", 
  RowBox[{"(", 
   RowBox[{
    RowBox[{"i", "\[Equal]", "4"}], "&&", 
    RowBox[{"j", "\[Equal]", "3"}]}], ")"}], "||", 
  RowBox[{"(", 
   RowBox[{
    RowBox[{"i", "\[Equal]", "4"}], "&&", 
    RowBox[{"j", "\[Equal]", "4"}]}], ")"}], "||", 
  RowBox[{"(", 
   RowBox[{
    RowBox[{"i", "\[Equal]", "5"}], "&&", 
    RowBox[{"j", "\[Equal]", "2"}]}], ")"}], "||", 
  RowBox[{"(", 
   RowBox[{
    RowBox[{"i", "\[Equal]", "5"}], "&&", 
    RowBox[{"j", "\[Equal]", "3"}]}], ")"}], "||", 
  RowBox[{"(", 
   RowBox[{
    RowBox[{"i", "\[Equal]", "5"}], "&&", 
    RowBox[{"j", "\[Equal]", "4"}]}], ")"}], "||", 
  RowBox[{"(", 
   RowBox[{
    RowBox[{"i", "\[Equal]", "5"}], "&&", 
    RowBox[{"j", "\[Equal]", "5"}]}], ")"}], "||", 
  RowBox[{"(", 
   RowBox[{
    RowBox[{"i", "\[Equal]", "6"}], "&&", 
    RowBox[{"j", "\[Equal]", "3"}]}], ")"}], "||", 
  RowBox[{"(", 
   RowBox[{
    RowBox[{"i", "\[Equal]", "6"}], "&&", 
    RowBox[{"j", "\[Equal]", "4"}]}], ")"}], "||", 
  RowBox[{"(", 
   RowBox[{
    RowBox[{"i", "\[Equal]", "6"}], "&&", 
    RowBox[{"j", "\[Equal]", "5"}]}], ")"}], "||", 
  RowBox[{"(", 
   RowBox[{
    RowBox[{"i", "\[Equal]", "7"}], "&&", 
    RowBox[{"j", "\[Equal]", "4"}]}], ")"}], "||", 
  RowBox[{"(", 
   RowBox[{
    RowBox[{"i", "\[Equal]", "7"}], "&&", 
    RowBox[{"j", "\[Equal]", "5"}]}], ")"}]}]], "Output",
 CellChangeTimes->{{3.593567302461705*^9, 3.593567347967255*^9}, {
   3.5935673800004587`*^9, 3.593567399092367*^9}, {3.5935674462780857`*^9, 
   3.59356744982444*^9}, 3.5935674834648037`*^9, {3.593567542868744*^9, 
   3.5935675525127077`*^9}, {3.593567588230279*^9, 3.5935676059580517`*^9}, 
   3.5935679435298057`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"pieces", "=", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"i", ",", "j"}], "}"}], "//.", 
   RowBox[{"{", 
    RowBox[{"ToRules", "[", "g", "]"}], "}"}]}]}]], "Input",
 CellChangeTimes->{{3.5935675216656237`*^9, 3.5935675368311396`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"4", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"4", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"4", ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"4", ",", "4"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"5", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"5", ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"5", ",", "4"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"5", ",", "5"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"6", ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"6", ",", "4"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"6", ",", "5"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"7", ",", "4"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"7", ",", "5"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.5935675320966663`*^9, 3.593567554402897*^9}, {
   3.5935675889663525`*^9, 3.5935676065761137`*^9}, 3.5935677143398886`*^9, 
   3.593567943543807*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Graphics", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"PointSize", "[", "0.01", "]"}], ",", "Red", ",", 
     RowBox[{"Point", "[", "pieces", "]"}]}], "}"}], ",", 
   RowBox[{"Axes", "\[Rule]", "True"}], ",", 
   RowBox[{"AxesOrigin", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"0", ",", "0"}], "}"}]}]}], "]"}]], "Input",
 CellChangeTimes->{{3.593567485235981*^9, 3.5935675118256397`*^9}, {
  3.593567561605617*^9, 3.593567572355692*^9}, {3.593567611008557*^9, 
  3.5935676768911448`*^9}, {3.593567725503005*^9, 3.593567729845439*^9}, {
  3.5935680873011813`*^9, 3.593568087454197*^9}}],

Cell[BoxData[
 GraphicsBox[
  {RGBColor[1, 0, 0], PointSize[0.01], 
   PointBox[{{1, 1}, {2, 1}, {2, 2}, {3, 1}, {3, 2}, {3, 3}, {4, 1}, {4, 2}, {
    4, 3}, {4, 4}, {5, 2}, {5, 3}, {5, 4}, {5, 5}, {6, 3}, {6, 4}, {6, 5}, {7,
     4}, {7, 5}}]},
  Axes->True,
  AxesOrigin->{0, 0}]], "Output",
 CellChangeTimes->{{3.593567500048462*^9, 3.5935675125147085`*^9}, {
   3.5935675571371703`*^9, 3.593567574918948*^9}, {3.5935676146769238`*^9, 
   3.5935676770011554`*^9}, {3.5935677149559507`*^9, 3.593567730180473*^9}, 
   3.5935679435618086`*^9, 3.59356808779323*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"With", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"f", "=", 
     RowBox[{"Reduce", "[", 
      RowBox[{
       RowBox[{"iter", "[", 
        RowBox[{"i", ",", "j"}], "]"}], ",", 
       RowBox[{"{", 
        RowBox[{"i", ",", "j"}], "}"}]}], "]"}]}], "}"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"RegionPlot", "[", 
    RowBox[{"f", ",", 
     RowBox[{"{", 
      RowBox[{"i", ",", "0", ",", "8"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"j", ",", "0", ",", "8"}], "}"}]}], "]"}]}], 
  "\[IndentingNewLine]", "]"}]], "Input",
 CellChangeTimes->{{3.5935678262850823`*^9, 3.5935678717456284`*^9}}],

Cell[BoxData[
 GraphicsBox[GraphicsComplexBox[CompressedData["
1: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
   "], {{
     {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.5], 
      EdgeForm[None], FaceForm[Opacity[0.3]], 
      GraphicsGroupBox[{PolygonBox[CompressedData["
1:eJxNWHmcj/UWPmdItsSY7GSXsSQjIWFoisqtREqJprEX5iIqaWWQFkuYLJEw
N3I1V6WStGvTvi8qutKi/S7d2/I8zvN+fu8fz+d83+/7fc93O89zzu/XrHDS
oIlZZvarm1WA3Q3MBs4Gbrboqwp8ClQEqgHV1T4COEq2ElBD9kjgdWALsBl4
AZgPnAvMk49sYJ981QZy1Ka/Y2Tp75961xB4EygHtgIvArcD5wG3yUcDoJHG
00cd+TgaaJzqaw+0BFoBbwMPAduAl4AlwBBgseZsDhyU3xb6rpH8tZJtArSW
PRZ4F3gU2A68DJQCQ4Hl8pELfCNf7YBXgNXAhUAH+aW/jrJtgPeBncAOzcN9
1NUZ/0V7nK/zrQV00T7p70RZ+usqezzwIfAUsAvYA6wDLgLuAfKAHsCP8nUy
0FNt+jtFlv56yZ4EfAw8BzwDvAqUAcOBAo3rDfRN+esnS3+nynLcRGAEkA+s
0jl1BiYBI+WDMciYYTwVA4XyUQRcpjlHAacDCG8bDfQHGO9jgAEW8T0WOEP+
xgFnWsT0eOAsi5ieAAy0iG3yg9yoYsGLqvLznc48zzLcqG4ZbvB5s9r0Mxm4
VGewUWfC/ZIX2drXNO3nEstwI0c+6uh5q9qMAfLjHIvYID/IjfoWPCI/Eq4x
hhvq+8Z6po8met6mNv2QH4MsYjuJdcYoedFcfvg947mFZbjB5+0az2/JLfKq
mQU/BlvE9i6L+GFMkhe5luEaz7Od/HXQc8INPu9Qm37Ij/Plh3xi3Jyge+ks
P/y+i+4o4UYXy3Ajee6p+yA/LrCIbfKD3OhuwYse8kN+k9ttgSt0VwW6+xyd
OfnQS37Ij2EWXCjT3ffRfIzrfMtwg88JN/rJR4GeL1abfq604MxIYLoFTxhb
MyzijNy4yoIn5AZjnTHPOJ1iwRHy4hMLjlQQBlhG68mLSpbhf089kyOM55XA
CgsdewN4wEKbpmoO5pS3gActYnQuUGKRF94BHrGIs1uBBRba/h7wuEWsLAIW
WujzB8CTuu9lwFILjf0IeFZ3lmgT17oWWGOhb5fr7HhuG4D1Fhr1GnC/Bc+5
3t1a8ybgPgs96qdz7as7KFRfgc6VfdcAV1uGt0V6/1cLPXKd92idOc97TOq8
x6buZ1zq7MenznuCzvw6YJbum3u6QnNdC8y0TEzQ5mvtk7T+YToLnsMNwPUW
sTJdfjnuJuBGy8RNsfY4Svs5TXuZon3tVjtLdqr6i3Qm9DFNZ1Skdc3U2V6p
dU/U3LO09qu0jmKt73rLxPYN6ivWOguFyboX5lbGJDVlr0V8U7vnWOh4Fdk5
umvWKoxJajpjkPk0W31zNf5z4DO926vvs+S3RGNuscjHtWT5nNQ/C9T/otr0
/4WFXift/RbavVCW2n2HxtTXGuZrnSWau6recxy5c5eFNrWVn0X69kvggIUW
L5Wljt9podHNNGaJ5l2id0NS33DMy2o3l12m/q+Bryw0cYVsbmo/9TWmVN+W
aq1DU99wzS9pPNfAeB1pEcN8v1JjmEces9CHuy10n5p/SO1cWb6jLjEnrNGY
PWp3ll2r/h+A7y20fr0stf5eixzQXWPW6dt1ekdtoU5s1Dpf1fc9ZDfo25+B
nzTubxY5oE9qvmRMmb5lXmaOr6tv7tP4EWrny25SPzWMdQb1oYbarA0G6l1S
n7NdWe+3aMzf1a4sy2dq+ANaA8f8w6LOqJl6x/431a6pseVac5n2OVz38m3q
HlbpDFlXsOZgncDc8KC+fVvtenr/kMY8rHY9WT4zdzCHbNeY1mq3Sb1L6nO2
m+r9oxrzmNrsZ73NvHOc7A6N6ag2a4zBetdGfTvVX64z4j6eUD/9sAZg7qfe
Mnft0viuarM2OF/vkvqc7U56/5TGPK12J1k+M989qzk4ppfavVPvkvqc7W46
12065+e1tm6yfGZ+oLZR07O0jye0RuoW83Sib9RN6k8xxH64hx9ymTrAWo51
He89V33kP7nfUu84plT9yzWW/azZVumZbXL5kPrIF/I0T+8Pyf9BzUH/5OYP
qbFsM96o359a1NjcI3WcGkpesrZjLUadYf64UH726NvV6udc1EbqVAOdCTWd
2rtG46kJ5ATrIfKCnCP3NqvNmoNcI0eoF4lWsE2+bNH4yvJDjm3VXr7T3hdq
DdTn9urnWVXUHllX9MOdjPPgy3rYez3y5x/AaI+cxZzA3wms50t0p8xZzCnM
SdTvdRh7j0eNcBLsZS4dgq3rUQ+shV3jkc9rwK7yqEvuhl3tkf83wm7wyO05
mre27AHL/JY/qPUwxpjz5unu2Ga8scbep3v8SuNb6F6Ywxanvqmm8/hM3+7X
t7U17oDmOqBvG2gM956t/e/X+H1qZ+u8v1dsTMWeNnnURoxn5kjGYbnu7rBm
4n0Hj/saDHu8R+5j7P2sGOiJvjYeNUmZ+qn9fdHX1uNehsGe4BGfs2Hr6Pyn
eayDaxgJm+cRhxs1B2N7lsf98e4KYU/0iLf+sO08YngubH2P+u4S2M4emrAQ
9liP+vQ22MYedesS2GYetepdsK08cs4y2BYedevJsK098kYf2OM8dPI02FwP
nR4E29FDZy6A7eShYbfANvSol+fAHqP9ngXb3kOPS2B/sahPl+r8ebY3of85
j3r8Vtj/WNTc5Pwn4kh/tal11FXqLzWWGs98QI2nHn+g/p3qp7YzBzFXkV/U
V/4OSTT2rVQ/9fcZzbNXcz2puXZZaO/HqW/pkxrNfMXfSE0tctS7al+Dvcz0
qP1LYf9v8dvgFLTHeMTbHbD/tfhdsRjtXy1+VyxF+38Wvyu6oT3KQ2fuJ3c9
avdHNNd2ncN72i9/I1Mn82R/UtzOIKcVJ/Nh/23xO6erxx3w/Kkn1ElyZwD6
Jnjs5WjYKR41zLUe2kHdqM5Y9qiLroat5vG7pQj2Xxa/Lxp4xAfvkPF7umKY
vs+U/5qwWzx+bzBG5nnESQ5smcfvE55BD51DbdhtHr8rftN8nItnM13nUwt2
q8dvFcZ1L8U2ubtZ/KXuFnjEwBDYSR7x47BjXf/Xedwl7/EI7s+jlj6bZ+Bx
5kfCTvSoeyvAjveopet5cJU8vcgjBzN+yKczxCnOY5qLd7LA416qwE72qHup
K/ke2sKc8LtFXiBHTxVPGVO9FVfk32xxMBu23OO3GdeVpbVRA7pLB6gfMxQb
zT10gZrAPVXSvni3K3W/1MXzPPjL3DJHc7X00Bf6ZPwu94hhxvWdHrHd1EOP
qEXk+u0efCcPFnlwgfuurL0f1lEPLaVejvDQzCYeeketYwxWVRzyDofqHqlP
F3toFHX0Ug8tbeShj9RG6tM5HhpFjq7w4CnzwECPXMA7r6h7552fq3s/rIUe
ekh+HOXBEerZzR6c+hOxb4Tn
         "]], PolygonBox[CompressedData["
1:eJwtlVePjVEYhffLqCEMInq/4I5ERO9lDAaDGb2M6C0Ro3eiCyGj9zKM3nsv
0buIiN/hTnlWlotnznPO+c45+9trvXsaF8zJnV0qpTQZMmBbpFQP+uJToCz+
APbhLeAXFPJ8Lo88pAX8+f3f58E45DEcxUfBCPwhHJDDavwULMInQj7+Fp7i
LaEIbwT98GlQE18Pk/DesAdvAv3x6bAfbwYD8BnQGf8An/EcaIe/h4/J15zF
z4S/S/dQG98Uvv8+0B5/ARfx8jBBa4NifAwswhfDTHwkLMWXwSx8NPyBGzxf
x2MFOIi3gbHJ10zEn8NZ7RVsxGuFf1v3uANvANn4VNiC14Gs/xkdwFuHf0tr
WIkfhwVaK6zCT8JCvADW4oehMHkNK5QNzMfHQ0/tDXzFB8EXfFg4ix/QDb8J
G/DBcBnPhOX6Lt2zPgs/8eHJWQ4PuzL9jA+E5vh3eIPnQh7+EF4pC72G34TX
yhaG4nfhk7qoTuDfkrOoBO2SM9Hae2gPk+/hCT4+3L0TcCy8Zq1Ve6RudIKq
yR15p2zCWb5I7krbcPbqzDO8IJx9CTzSteEuH07Osgp0Tc70pTy8l1fhgvYq
nPVSOKJuqTPJGcirht/Ta+fw8+FZGggN8Z3hWVAnDuElsCQ509PhmdIsLU5+
r0bYdc1VvBqsVDfgUrgDyl4ZNsX3hmdHM9UY3xWeLc1gfXx7uIs6EzQbHcKz
pRnJDmekbJRhMX4d1iTPuLy61pj8WgZ+D4r0W+pUuBPqgjrSK9wJdUGZ9gt3
Ql1QB0rhd7Qmza5mNJyJsmgFXcIZaO+V8QB9Fnbgw2AIfh924/kwJtwBZd8W
8sIzoO6ro4PCHVZ31ck++G3Yqu+CiuHOqWvq5LXwDGr2dM+Vwx1Sd9QRHZS3
YDOamTxbf5PPCs2Y3usenjVdo7OkY7gLOlNOhDNVlprxK+EzYEJyxlpbhL9b
a9TZWy58dusM1lk+NHzvOtOVRU54b5SJ9jYrfG/aY+1d6fBeaw+1d2XC2WkP
ddZXCO/9UairvQn/79CZpbNhVHhvdUb8A7kzwf4=
         "]]}]}, {}, {}, {}, {}}, 
    {RGBColor[0.368417, 0.506779, 0.709798], LineBox[CompressedData["
1:eJwl09VWVVEAhtFzbFEs7MbG7u7uQFHAxk7swu5WFCwEW7G7u7t9AR7CxpgO
L+b49vjXutwrPC4+cmowEAhk0NJHVU5xmjnM5Zez0fpFZ+ssTnKCYqymCKso
yho+u7tOi7OWEqznq32jlmQDpdjEN/sWLc1myrCV7/ZtWpZEyrGdH/ZkLU8S
4ezgp32XVmAnFdlNpj1FK7GHyjTjDU0ZQ3Oe0oIqtOYtrRhHG57Rlmp05B0d
mEAnntOZ6nTnPd2YRA9e0JOa9OUDfZhCP14SSW0G8pEo4hnEK6KpyxA+MZjp
DOU1w6jPPOazgDzspSEJLGQR+UilMSt4wkr2kcZxCpPOco5xlMuEcYllHOEw
FynEBZZyiIOcpyDnWMIB9nOWApxhMU0YxWPyM5NQHhFHI0bykLzMIIQHjKAB
w7lPbqaRi3vEUo8Y7pKTfz9/Du4wgDr05zbZmUw2btGbWvTiJlmZSBZu0JUa
dOE6QcYT4BrtiaAdV/njaKz+1ivB/+/vL01kZpc=
      "]]}}],
  AspectRatio->1,
  Axes->{False, False},
  AxesLabel->{None, None},
  AxesOrigin->{Automatic, Automatic},
  BaseStyle->{FontFamily -> "Arial"},
  DisplayFunction->Identity,
  Frame->{{True, True}, {True, True}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  LabelStyle->{FontFamily -> "Arial"},
  Method->{
   "ScalingFunctions" -> None, "TransparentPolygonMesh" -> True, 
    "AxesInFront" -> True},
  PlotRange->{{0, 8}, {0, 8}},
  PlotRangeClipping->True,
  PlotRangePadding->{
    Scaled[0.02], 
    Scaled[0.02]},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{{3.5935678270361576`*^9, 3.593567872092663*^9}, 
   3.5935679436978226`*^9}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Visualizing Iteration Space Dependence Graph", "Section",
 CellChangeTimes->{{3.5935646682263327`*^9, 3.5935646699933324`*^9}, {
  3.593567197283109*^9, 3.5935672043875303`*^9}, {3.5935686134847946`*^9, 
  3.593568617363182*^9}, {3.5935687004524903`*^9, 3.5935687019956446`*^9}, {
  3.5935731712885294`*^9, 3.5935731727596765`*^9}, {3.593723793815549*^9, 
  3.593723797718549*^9}, {3.5937238949085493`*^9, 3.5937239032105494`*^9}}],

Cell["Given a program", "Text",
 CellChangeTimes->{{3.593723906162549*^9, 3.593723908961549*^9}}],

Cell["\<\
1. for (int ii = 0; ii < 8; ii++) {
2.   for (int jj = 0; jj < 8; jj++) {
2. \t    a[ii + 1][jj] = a[ii][jj];
3.   }
4. }\
\>", "Program",
 CellChangeTimes->{{3.593567097431143*^9, 3.5935671846585846`*^9}, {
  3.593630258368715*^9, 3.593630292769715*^9}, {3.5936315760607147`*^9, 
  3.5936315765817146`*^9}, {3.593632258339715*^9, 3.5936322694657145`*^9}, {
  3.593635103973715*^9, 3.5936351869497147`*^9}, {3.593635359684715*^9, 
  3.5936353627087145`*^9}, {3.593723928845549*^9, 3.593723981979549*^9}}],

Cell["\<\
We notice that the above is a strong SIV, so we can compute the distance \
vector\
\>", "Text",
 CellChangeTimes->{{3.593723985410549*^9, 3.593724016253549*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{"slopeI", ",", "dirI"}], "}"}], "=", 
   RowBox[{"StrongSIV", "[", 
    RowBox[{"7", ",", 
     RowBox[{"Inactivate", "[", 
      RowBox[{"1", "+", 
       RowBox[{"1", "*", "ii"}]}], "]"}], ",", 
     RowBox[{"Inactivate", "[", 
      RowBox[{"0", "+", 
       RowBox[{"1", "*", "ii"}]}], "]"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{"slopeJ", ",", "dirJ"}], "}"}], "=", 
   RowBox[{"StrongSIV", "[", 
    RowBox[{"7", ",", 
     RowBox[{"Inactivate", "[", 
      RowBox[{"0", "+", 
       RowBox[{"1", "*", "jj"}]}], "]"}], ",", 
     RowBox[{"Inactivate", "[", 
      RowBox[{"0", "+", 
       RowBox[{"1", "*", "jj"}]}], "]"}]}], "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.593723640800549*^9, 3.5937236943895493`*^9}, {
  3.5937237493315487`*^9, 3.593723751570549*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"slope", "=", 
  RowBox[{"{", 
   RowBox[{"slopeI", ",", "slopeJ"}], "}"}]}]], "Input",
 CellChangeTimes->{{3.5937236958835487`*^9, 3.5937237127845488`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1", ",", "0"}], "}"}]], "Output",
 CellChangeTimes->{{3.5937237019235487`*^9, 3.593723713966549*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Table", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"Table", "[", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"Red", ",", 
          RowBox[{"Point", "[", 
           RowBox[{"{", 
            RowBox[{"ii", ",", "jj"}], "}"}], "]"}]}], "}"}], ",", 
        RowBox[{"Arrow", "[", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"ii", ",", "jj"}], "}"}], ",", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"ii", ",", "jj"}], "}"}], "+", "slope"}]}], "}"}], 
         "]"}]}], "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{"{", 
       RowBox[{"jj", ",", "ii", ",", "7"}], "}"}]}], "\[IndentingNewLine]", 
     "]"}], ",", "\[IndentingNewLine]", 
    RowBox[{"{", 
     RowBox[{"ii", ",", "7"}], "}"}]}], "\[IndentingNewLine]", "]"}], "//", 
  "Graphics"}]], "Input",
 CellChangeTimes->{{3.5936368402447147`*^9, 3.5936371326727147`*^9}, {
  3.593723716972549*^9, 3.593723720657549*^9}, {3.5937237548425493`*^9, 
  3.5937237579605494`*^9}}],

Cell[BoxData[
 GraphicsBox[{{{
     {RGBColor[1, 0, 0], PointBox[{1, 1}]}, ArrowBox[{{1, 1}, {2, 1}}]}, {
     {RGBColor[1, 0, 0], PointBox[{1, 2}]}, ArrowBox[{{1, 2}, {2, 2}}]}, {
     {RGBColor[1, 0, 0], PointBox[{1, 3}]}, ArrowBox[{{1, 3}, {2, 3}}]}, {
     {RGBColor[1, 0, 0], PointBox[{1, 4}]}, ArrowBox[{{1, 4}, {2, 4}}]}, {
     {RGBColor[1, 0, 0], PointBox[{1, 5}]}, ArrowBox[{{1, 5}, {2, 5}}]}, {
     {RGBColor[1, 0, 0], PointBox[{1, 6}]}, ArrowBox[{{1, 6}, {2, 6}}]}, {
     {RGBColor[1, 0, 0], PointBox[{1, 7}]}, ArrowBox[{{1, 7}, {2, 7}}]}}, {{
     {RGBColor[1, 0, 0], PointBox[{2, 2}]}, ArrowBox[{{2, 2}, {3, 2}}]}, {
     {RGBColor[1, 0, 0], PointBox[{2, 3}]}, ArrowBox[{{2, 3}, {3, 3}}]}, {
     {RGBColor[1, 0, 0], PointBox[{2, 4}]}, ArrowBox[{{2, 4}, {3, 4}}]}, {
     {RGBColor[1, 0, 0], PointBox[{2, 5}]}, ArrowBox[{{2, 5}, {3, 5}}]}, {
     {RGBColor[1, 0, 0], PointBox[{2, 6}]}, ArrowBox[{{2, 6}, {3, 6}}]}, {
     {RGBColor[1, 0, 0], PointBox[{2, 7}]}, ArrowBox[{{2, 7}, {3, 7}}]}}, {{
     {RGBColor[1, 0, 0], PointBox[{3, 3}]}, ArrowBox[{{3, 3}, {4, 3}}]}, {
     {RGBColor[1, 0, 0], PointBox[{3, 4}]}, ArrowBox[{{3, 4}, {4, 4}}]}, {
     {RGBColor[1, 0, 0], PointBox[{3, 5}]}, ArrowBox[{{3, 5}, {4, 5}}]}, {
     {RGBColor[1, 0, 0], PointBox[{3, 6}]}, ArrowBox[{{3, 6}, {4, 6}}]}, {
     {RGBColor[1, 0, 0], PointBox[{3, 7}]}, ArrowBox[{{3, 7}, {4, 7}}]}}, {{
     {RGBColor[1, 0, 0], PointBox[{4, 4}]}, ArrowBox[{{4, 4}, {5, 4}}]}, {
     {RGBColor[1, 0, 0], PointBox[{4, 5}]}, ArrowBox[{{4, 5}, {5, 5}}]}, {
     {RGBColor[1, 0, 0], PointBox[{4, 6}]}, ArrowBox[{{4, 6}, {5, 6}}]}, {
     {RGBColor[1, 0, 0], PointBox[{4, 7}]}, ArrowBox[{{4, 7}, {5, 7}}]}}, {{
     {RGBColor[1, 0, 0], PointBox[{5, 5}]}, ArrowBox[{{5, 5}, {6, 5}}]}, {
     {RGBColor[1, 0, 0], PointBox[{5, 6}]}, ArrowBox[{{5, 6}, {6, 6}}]}, {
     {RGBColor[1, 0, 0], PointBox[{5, 7}]}, ArrowBox[{{5, 7}, {6, 7}}]}}, {{
     {RGBColor[1, 0, 0], PointBox[{6, 6}]}, ArrowBox[{{6, 6}, {7, 6}}]}, {
     {RGBColor[1, 0, 0], PointBox[{6, 7}]}, ArrowBox[{{6, 7}, {7, 7}}]}}, {
    {RGBColor[1, 0, 0], PointBox[{7, 7}]}, 
    ArrowBox[{{7, 7}, {8, 7}}]}}]], "Output",
 CellChangeTimes->{{3.5936368682207146`*^9, 3.5936370127907147`*^9}, {
   3.593637051186715*^9, 3.5936371330017147`*^9}, 3.593723723736549*^9, 
   3.593723758223549*^9}]
}, Open  ]],

Cell["If you have a more complicated statement like:", "Text",
 CellChangeTimes->{{3.593723906162549*^9, 3.593723908961549*^9}, {
  3.5937240866075487`*^9, 3.593724102820549*^9}}],

Cell["\<\
1. for (int ii = 0; ii < 8; ii++) {
2.   for (int jj = 0; jj < 8; jj++) {
2. \t    a[ii + 1][jj] = a[ii + 1][jj] + a[ii][jj+1] + a[ii+1][jj+1];
3.   }
4. }\
\>", "Program",
 CellChangeTimes->{{3.593567097431143*^9, 3.5935671846585846`*^9}, {
  3.593630258368715*^9, 3.593630292769715*^9}, {3.5936315760607147`*^9, 
  3.5936315765817146`*^9}, {3.593632258339715*^9, 3.5936322694657145`*^9}, {
  3.593635103973715*^9, 3.5936351869497147`*^9}, {3.593635359684715*^9, 
  3.5936353627087145`*^9}, {3.593723928845549*^9, 3.593723981979549*^9}, {
  3.593724106435549*^9, 3.5937241194895487`*^9}, {3.593724185277549*^9, 
  3.593724185700549*^9}, {3.593724245977549*^9, 3.593724252312549*^9}}],

Cell["We just need to compute the LHS relation to all the RHS:", "Text",
 CellChangeTimes->{{3.593723985410549*^9, 3.593724016253549*^9}, {
  3.5937241258565493`*^9, 3.5937241524755487`*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{"slopeI1", ",", "dirI1"}], "}"}], "=", 
   RowBox[{"StrongSIV", "[", 
    RowBox[{"7", ",", 
     RowBox[{"Inactivate", "[", 
      RowBox[{"1", "+", 
       RowBox[{"1", "*", "ii"}]}], "]"}], ",", 
     RowBox[{"Inactivate", "[", 
      RowBox[{"0", "+", 
       RowBox[{"1", "*", "ii"}]}], "]"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{"slopeJ1", ",", "dirJ1"}], "}"}], "=", 
   RowBox[{"StrongSIV", "[", 
    RowBox[{"7", ",", 
     RowBox[{"Inactivate", "[", 
      RowBox[{"0", "+", 
       RowBox[{"1", "*", "jj"}]}], "]"}], ",", 
     RowBox[{"Inactivate", "[", 
      RowBox[{"0", "+", 
       RowBox[{"1", "*", "jj"}]}], "]"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{"slopeI2", ",", "dirI2"}], "}"}], "=", 
   RowBox[{"StrongSIV", "[", 
    RowBox[{"7", ",", 
     RowBox[{"Inactivate", "[", 
      RowBox[{"0", "+", 
       RowBox[{"1", "*", "ii"}]}], "]"}], ",", 
     RowBox[{"Inactivate", "[", 
      RowBox[{"0", "+", 
       RowBox[{"1", "*", "ii"}]}], "]"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{"slopeJ2", ",", "dirJ2"}], "}"}], "=", 
   RowBox[{"StrongSIV", "[", 
    RowBox[{"7", ",", 
     RowBox[{"Inactivate", "[", 
      RowBox[{"0", "+", 
       RowBox[{"1", "*", "jj"}]}], "]"}], ",", 
     RowBox[{"Inactivate", "[", 
      RowBox[{"1", "+", 
       RowBox[{"1", "*", "jj"}]}], "]"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{"slopeI3", ",", "dirI3"}], "}"}], "=", 
   RowBox[{"StrongSIV", "[", 
    RowBox[{"7", ",", 
     RowBox[{"Inactivate", "[", 
      RowBox[{"0", "+", 
       RowBox[{"1", "*", "ii"}]}], "]"}], ",", 
     RowBox[{"Inactivate", "[", 
      RowBox[{"1", "+", 
       RowBox[{"1", "*", "ii"}]}], "]"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{"slopeJ3", ",", "dirJ3"}], "}"}], "=", 
   RowBox[{"StrongSIV", "[", 
    RowBox[{"7", ",", 
     RowBox[{"Inactivate", "[", 
      RowBox[{"0", "+", 
       RowBox[{"1", "*", "jj"}]}], "]"}], ",", 
     RowBox[{"Inactivate", "[", 
      RowBox[{"1", "+", 
       RowBox[{"1", "*", "jj"}]}], "]"}]}], "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.593723640800549*^9, 3.5937236943895493`*^9}, {
  3.5937237493315487`*^9, 3.593723751570549*^9}, {3.5937241654755487`*^9, 
  3.593724196925549*^9}, {3.593724255252549*^9, 3.593724264769549*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"slopes", "=", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"slopeI1", ",", "slopeJ1"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"slopeI2", ",", "slopeJ2"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"slopeI3", ",", "slopeJ3"}], "}"}]}], "}"}]}]], "Input",
 CellChangeTimes->{{3.593724201946549*^9, 3.593724215519549*^9}, {
  3.5937242672325487`*^9, 3.593724270486549*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", 
     RowBox[{"-", "1"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "1"}], ",", 
     RowBox[{"-", "1"}]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.593724216131549*^9, 3.593724271777549*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Table", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"Table", "[", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"PointSize", "[", "Large", "]"}], ",", "Red", ",", 
          RowBox[{"Point", "[", 
           RowBox[{"{", 
            RowBox[{"ii", ",", "jj"}], "}"}], "]"}], ",", "Black", ",", 
          RowBox[{"Text", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"ii", ",", "jj"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"ii", ",", 
              RowBox[{"jj", "-", "0.5"}]}], "}"}]}], "]"}]}], "}"}], ",", 
        RowBox[{"Opacity", "[", "0.5", "]"}], ",", 
        RowBox[{
         RowBox[{
          RowBox[{"Arrow", "[", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"ii", ",", "jj"}], "}"}], ",", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{"ii", ",", "jj"}], "}"}], "+", "#"}]}], "}"}], "]"}], 
          "&"}], "/@", "slopes"}]}], "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{"{", 
       RowBox[{"jj", ",", "ii", ",", "7"}], "}"}]}], "\[IndentingNewLine]", 
     "]"}], ",", "\[IndentingNewLine]", 
    RowBox[{"{", 
     RowBox[{"ii", ",", "7"}], "}"}]}], "\[IndentingNewLine]", "]"}], "//", 
  "Graphics"}]], "Input",
 CellChangeTimes->{{3.5936368402447147`*^9, 3.5936371326727147`*^9}, {
  3.593723716972549*^9, 3.593723720657549*^9}, {3.5937237548425493`*^9, 
  3.5937237579605494`*^9}, {3.593724228545549*^9, 3.593724234222549*^9}, {
  3.593724287446549*^9, 3.593724448582549*^9}}],

Cell[BoxData[
 GraphicsBox[{{{
     {RGBColor[1, 0, 0], PointSize[Large], PointBox[{1, 1}], 
      {GrayLevel[0], InsetBox[
        RowBox[{"{", 
         RowBox[{"1", ",", "1"}], "}"}], {1, 0.5}]}}, 
     {Opacity[0.5], ArrowBox[{{1, 1}, {2, 1}}], ArrowBox[{{1, 1}, {1, 0}}], 
      ArrowBox[{{1, 1}, {0, 0}}]}}, {
     {RGBColor[1, 0, 0], PointSize[Large], PointBox[{1, 2}], 
      {GrayLevel[0], InsetBox[
        RowBox[{"{", 
         RowBox[{"1", ",", "2"}], "}"}], {1, 1.5}]}}, 
     {Opacity[0.5], ArrowBox[{{1, 2}, {2, 2}}], ArrowBox[{{1, 2}, {1, 1}}], 
      ArrowBox[{{1, 2}, {0, 1}}]}}, {
     {RGBColor[1, 0, 0], PointSize[Large], PointBox[{1, 3}], 
      {GrayLevel[0], InsetBox[
        RowBox[{"{", 
         RowBox[{"1", ",", "3"}], "}"}], {1, 2.5}]}}, 
     {Opacity[0.5], ArrowBox[{{1, 3}, {2, 3}}], ArrowBox[{{1, 3}, {1, 2}}], 
      ArrowBox[{{1, 3}, {0, 2}}]}}, {
     {RGBColor[1, 0, 0], PointSize[Large], PointBox[{1, 4}], 
      {GrayLevel[0], InsetBox[
        RowBox[{"{", 
         RowBox[{"1", ",", "4"}], "}"}], {1, 3.5}]}}, 
     {Opacity[0.5], ArrowBox[{{1, 4}, {2, 4}}], ArrowBox[{{1, 4}, {1, 3}}], 
      ArrowBox[{{1, 4}, {0, 3}}]}}, {
     {RGBColor[1, 0, 0], PointSize[Large], PointBox[{1, 5}], 
      {GrayLevel[0], InsetBox[
        RowBox[{"{", 
         RowBox[{"1", ",", "5"}], "}"}], {1, 4.5}]}}, 
     {Opacity[0.5], ArrowBox[{{1, 5}, {2, 5}}], ArrowBox[{{1, 5}, {1, 4}}], 
      ArrowBox[{{1, 5}, {0, 4}}]}}, {
     {RGBColor[1, 0, 0], PointSize[Large], PointBox[{1, 6}], 
      {GrayLevel[0], InsetBox[
        RowBox[{"{", 
         RowBox[{"1", ",", "6"}], "}"}], {1, 5.5}]}}, 
     {Opacity[0.5], ArrowBox[{{1, 6}, {2, 6}}], ArrowBox[{{1, 6}, {1, 5}}], 
      ArrowBox[{{1, 6}, {0, 5}}]}}, {
     {RGBColor[1, 0, 0], PointSize[Large], PointBox[{1, 7}], 
      {GrayLevel[0], InsetBox[
        RowBox[{"{", 
         RowBox[{"1", ",", "7"}], "}"}], {1, 6.5}]}}, 
     {Opacity[0.5], ArrowBox[{{1, 7}, {2, 7}}], ArrowBox[{{1, 7}, {1, 6}}], 
      ArrowBox[{{1, 7}, {0, 6}}]}}}, {{
     {RGBColor[1, 0, 0], PointSize[Large], PointBox[{2, 2}], 
      {GrayLevel[0], InsetBox[
        RowBox[{"{", 
         RowBox[{"2", ",", "2"}], "}"}], {2, 1.5}]}}, 
     {Opacity[0.5], ArrowBox[{{2, 2}, {3, 2}}], ArrowBox[{{2, 2}, {2, 1}}], 
      ArrowBox[{{2, 2}, {1, 1}}]}}, {
     {RGBColor[1, 0, 0], PointSize[Large], PointBox[{2, 3}], 
      {GrayLevel[0], InsetBox[
        RowBox[{"{", 
         RowBox[{"2", ",", "3"}], "}"}], {2, 2.5}]}}, 
     {Opacity[0.5], ArrowBox[{{2, 3}, {3, 3}}], ArrowBox[{{2, 3}, {2, 2}}], 
      ArrowBox[{{2, 3}, {1, 2}}]}}, {
     {RGBColor[1, 0, 0], PointSize[Large], PointBox[{2, 4}], 
      {GrayLevel[0], InsetBox[
        RowBox[{"{", 
         RowBox[{"2", ",", "4"}], "}"}], {2, 3.5}]}}, 
     {Opacity[0.5], ArrowBox[{{2, 4}, {3, 4}}], ArrowBox[{{2, 4}, {2, 3}}], 
      ArrowBox[{{2, 4}, {1, 3}}]}}, {
     {RGBColor[1, 0, 0], PointSize[Large], PointBox[{2, 5}], 
      {GrayLevel[0], InsetBox[
        RowBox[{"{", 
         RowBox[{"2", ",", "5"}], "}"}], {2, 4.5}]}}, 
     {Opacity[0.5], ArrowBox[{{2, 5}, {3, 5}}], ArrowBox[{{2, 5}, {2, 4}}], 
      ArrowBox[{{2, 5}, {1, 4}}]}}, {
     {RGBColor[1, 0, 0], PointSize[Large], PointBox[{2, 6}], 
      {GrayLevel[0], InsetBox[
        RowBox[{"{", 
         RowBox[{"2", ",", "6"}], "}"}], {2, 5.5}]}}, 
     {Opacity[0.5], ArrowBox[{{2, 6}, {3, 6}}], ArrowBox[{{2, 6}, {2, 5}}], 
      ArrowBox[{{2, 6}, {1, 5}}]}}, {
     {RGBColor[1, 0, 0], PointSize[Large], PointBox[{2, 7}], 
      {GrayLevel[0], InsetBox[
        RowBox[{"{", 
         RowBox[{"2", ",", "7"}], "}"}], {2, 6.5}]}}, 
     {Opacity[0.5], ArrowBox[{{2, 7}, {3, 7}}], ArrowBox[{{2, 7}, {2, 6}}], 
      ArrowBox[{{2, 7}, {1, 6}}]}}}, {{
     {RGBColor[1, 0, 0], PointSize[Large], PointBox[{3, 3}], 
      {GrayLevel[0], InsetBox[
        RowBox[{"{", 
         RowBox[{"3", ",", "3"}], "}"}], {3, 2.5}]}}, 
     {Opacity[0.5], ArrowBox[{{3, 3}, {4, 3}}], ArrowBox[{{3, 3}, {3, 2}}], 
      ArrowBox[{{3, 3}, {2, 2}}]}}, {
     {RGBColor[1, 0, 0], PointSize[Large], PointBox[{3, 4}], 
      {GrayLevel[0], InsetBox[
        RowBox[{"{", 
         RowBox[{"3", ",", "4"}], "}"}], {3, 3.5}]}}, 
     {Opacity[0.5], ArrowBox[{{3, 4}, {4, 4}}], ArrowBox[{{3, 4}, {3, 3}}], 
      ArrowBox[{{3, 4}, {2, 3}}]}}, {
     {RGBColor[1, 0, 0], PointSize[Large], PointBox[{3, 5}], 
      {GrayLevel[0], InsetBox[
        RowBox[{"{", 
         RowBox[{"3", ",", "5"}], "}"}], {3, 4.5}]}}, 
     {Opacity[0.5], ArrowBox[{{3, 5}, {4, 5}}], ArrowBox[{{3, 5}, {3, 4}}], 
      ArrowBox[{{3, 5}, {2, 4}}]}}, {
     {RGBColor[1, 0, 0], PointSize[Large], PointBox[{3, 6}], 
      {GrayLevel[0], InsetBox[
        RowBox[{"{", 
         RowBox[{"3", ",", "6"}], "}"}], {3, 5.5}]}}, 
     {Opacity[0.5], ArrowBox[{{3, 6}, {4, 6}}], ArrowBox[{{3, 6}, {3, 5}}], 
      ArrowBox[{{3, 6}, {2, 5}}]}}, {
     {RGBColor[1, 0, 0], PointSize[Large], PointBox[{3, 7}], 
      {GrayLevel[0], InsetBox[
        RowBox[{"{", 
         RowBox[{"3", ",", "7"}], "}"}], {3, 6.5}]}}, 
     {Opacity[0.5], ArrowBox[{{3, 7}, {4, 7}}], ArrowBox[{{3, 7}, {3, 6}}], 
      ArrowBox[{{3, 7}, {2, 6}}]}}}, {{
     {RGBColor[1, 0, 0], PointSize[Large], PointBox[{4, 4}], 
      {GrayLevel[0], InsetBox[
        RowBox[{"{", 
         RowBox[{"4", ",", "4"}], "}"}], {4, 3.5}]}}, 
     {Opacity[0.5], ArrowBox[{{4, 4}, {5, 4}}], ArrowBox[{{4, 4}, {4, 3}}], 
      ArrowBox[{{4, 4}, {3, 3}}]}}, {
     {RGBColor[1, 0, 0], PointSize[Large], PointBox[{4, 5}], 
      {GrayLevel[0], InsetBox[
        RowBox[{"{", 
         RowBox[{"4", ",", "5"}], "}"}], {4, 4.5}]}}, 
     {Opacity[0.5], ArrowBox[{{4, 5}, {5, 5}}], ArrowBox[{{4, 5}, {4, 4}}], 
      ArrowBox[{{4, 5}, {3, 4}}]}}, {
     {RGBColor[1, 0, 0], PointSize[Large], PointBox[{4, 6}], 
      {GrayLevel[0], InsetBox[
        RowBox[{"{", 
         RowBox[{"4", ",", "6"}], "}"}], {4, 5.5}]}}, 
     {Opacity[0.5], ArrowBox[{{4, 6}, {5, 6}}], ArrowBox[{{4, 6}, {4, 5}}], 
      ArrowBox[{{4, 6}, {3, 5}}]}}, {
     {RGBColor[1, 0, 0], PointSize[Large], PointBox[{4, 7}], 
      {GrayLevel[0], InsetBox[
        RowBox[{"{", 
         RowBox[{"4", ",", "7"}], "}"}], {4, 6.5}]}}, 
     {Opacity[0.5], ArrowBox[{{4, 7}, {5, 7}}], ArrowBox[{{4, 7}, {4, 6}}], 
      ArrowBox[{{4, 7}, {3, 6}}]}}}, {{
     {RGBColor[1, 0, 0], PointSize[Large], PointBox[{5, 5}], 
      {GrayLevel[0], InsetBox[
        RowBox[{"{", 
         RowBox[{"5", ",", "5"}], "}"}], {5, 4.5}]}}, 
     {Opacity[0.5], ArrowBox[{{5, 5}, {6, 5}}], ArrowBox[{{5, 5}, {5, 4}}], 
      ArrowBox[{{5, 5}, {4, 4}}]}}, {
     {RGBColor[1, 0, 0], PointSize[Large], PointBox[{5, 6}], 
      {GrayLevel[0], InsetBox[
        RowBox[{"{", 
         RowBox[{"5", ",", "6"}], "}"}], {5, 5.5}]}}, 
     {Opacity[0.5], ArrowBox[{{5, 6}, {6, 6}}], ArrowBox[{{5, 6}, {5, 5}}], 
      ArrowBox[{{5, 6}, {4, 5}}]}}, {
     {RGBColor[1, 0, 0], PointSize[Large], PointBox[{5, 7}], 
      {GrayLevel[0], InsetBox[
        RowBox[{"{", 
         RowBox[{"5", ",", "7"}], "}"}], {5, 6.5}]}}, 
     {Opacity[0.5], ArrowBox[{{5, 7}, {6, 7}}], ArrowBox[{{5, 7}, {5, 6}}], 
      ArrowBox[{{5, 7}, {4, 6}}]}}}, {{
     {RGBColor[1, 0, 0], PointSize[Large], PointBox[{6, 6}], 
      {GrayLevel[0], InsetBox[
        RowBox[{"{", 
         RowBox[{"6", ",", "6"}], "}"}], {6, 5.5}]}}, 
     {Opacity[0.5], ArrowBox[{{6, 6}, {7, 6}}], ArrowBox[{{6, 6}, {6, 5}}], 
      ArrowBox[{{6, 6}, {5, 5}}]}}, {
     {RGBColor[1, 0, 0], PointSize[Large], PointBox[{6, 7}], 
      {GrayLevel[0], InsetBox[
        RowBox[{"{", 
         RowBox[{"6", ",", "7"}], "}"}], {6, 6.5}]}}, 
     {Opacity[0.5], ArrowBox[{{6, 7}, {7, 7}}], ArrowBox[{{6, 7}, {6, 6}}], 
      ArrowBox[{{6, 7}, {5, 6}}]}}}, {
    {RGBColor[1, 0, 0], PointSize[Large], PointBox[{7, 7}], 
     {GrayLevel[0], InsetBox[
       RowBox[{"{", 
        RowBox[{"7", ",", "7"}], "}"}], {7, 6.5}]}}, 
    {Opacity[0.5], ArrowBox[{{7, 7}, {8, 7}}], ArrowBox[{{7, 7}, {7, 6}}], 
     ArrowBox[{{7, 7}, {6, 6}}]}}}]], "Output",
 CellChangeTimes->{{3.5936368682207146`*^9, 3.5936370127907147`*^9}, {
   3.593637051186715*^9, 3.5936371330017147`*^9}, 3.593723723736549*^9, 
   3.593723758223549*^9, 3.593724234794549*^9, {3.593724272543549*^9, 
   3.593724389626549*^9}, {3.593724422470549*^9, 3.593724449049549*^9}}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Analysis", "Section",
 CellChangeTimes->{{3.5935646682263327`*^9, 3.5935646699933324`*^9}, {
  3.593567197283109*^9, 3.5935672043875303`*^9}, {3.5935686134847946`*^9, 
  3.593568617363182*^9}, {3.5935687004524903`*^9, 3.5935687019956446`*^9}}],

Cell[BoxData[{
 RowBox[{"ClearAll", "[", "extractLoopConditions", 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"extractLoopConditions", "[", "___", "]"}], ":=", 
  RowBox[{"{", "}"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"extractLoopConditions", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"Inactive", "[", "For", "]"}], "[", 
    RowBox[{
     RowBox[{
      RowBox[{"Inactive", "[", "Set", "]"}], "[", 
      RowBox[{"var_", ",", "start_"}], "]"}], ",", "end_", ",", "incr_", ",", 
     "body_"}], "]"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"iter", ",", "this", ",", "rest"}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"iter", "=", "var"}], ";", "\[IndentingNewLine]", 
     RowBox[{"this", "=", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{
         RowBox[{"Inactive", "[", "Set", "]"}], "[", 
         RowBox[{"iter", ",", "start"}], "]"}], ",", 
        RowBox[{"end", "/.", 
         RowBox[{"{", 
          RowBox[{"var", "\[Rule]", "iter"}], "}"}]}]}], "}"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"rest", "=", 
      RowBox[{
       RowBox[{"extractLoopConditions", "[", "body", "]"}], "/.", 
       RowBox[{"{", 
        RowBox[{"var", "\[Rule]", "iter"}], "}"}]}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"rest", "===", 
        RowBox[{"{", "}"}]}], ",", "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{"iter", ",", "this"}], "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"iter", ",", 
           RowBox[{"Sequence", "@@", 
            RowBox[{"First", "[", "rest", "]"}]}]}], "}"}], ",", 
         RowBox[{"Join", "[", 
          RowBox[{"this", ",", 
           RowBox[{"Last", "[", "rest", "]"}]}], "]"}]}], "}"}]}], 
      "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", 
   "]"}]}]}], "Input",
 CellChangeTimes->{{3.593569466137051*^9, 3.5935696153869743`*^9}, {
   3.5935697007415094`*^9, 3.5935699992923613`*^9}, 3.593570050095441*^9, {
   3.5935701746518955`*^9, 3.5935701754419746`*^9}, {3.5935702648279123`*^9, 
   3.5935702969041195`*^9}, {3.5935714999234095`*^9, 3.5935715022746444`*^9}}],

Cell[BoxData[{
 RowBox[{"ClearAll", "[", "extractLoopBounds", "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"extractLoopBounds", "[", "x_", "]"}], ":=", 
  RowBox[{
   RowBox[{"extractLoopConditions", "[", "x", "]"}], "/.", 
   RowBox[{"{", 
    RowBox[{"Set", "\[Rule]", "GreaterEqual"}], "}"}]}]}]}], "Input",
 CellChangeTimes->{{3.593569466137051*^9, 3.5935696153869743`*^9}, {
   3.5935697007415094`*^9, 3.5935699992923613`*^9}, 3.593570050095441*^9, {
   3.5935701746518955`*^9, 3.5935701754419746`*^9}, {3.5935702648279123`*^9, 
   3.59357032541297*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"i", "=."}], ";", 
  RowBox[{"j", "=."}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"loop", "=", 
  RowBox[{"Inactivate", "[", "\[IndentingNewLine]", 
   RowBox[{"For", "[", 
    RowBox[{
     RowBox[{"i", "=", "0"}], ",", 
     RowBox[{"i", "<", "7"}], ",", 
     RowBox[{"i", "++"}], ",", "\[IndentingNewLine]", 
     RowBox[{"For", "[", 
      RowBox[{
       RowBox[{"j", "=", "0"}], ",", 
       RowBox[{"j", "<", "7"}], ",", 
       RowBox[{"j", "++"}], ",", "\[IndentingNewLine]", "code"}], 
      "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", "]"}], 
   "\[IndentingNewLine]", "]"}]}]}], "Input",
 CellChangeTimes->{{3.5935687032057657`*^9, 3.5935687404424887`*^9}, {
   3.593569528379275*^9, 3.593569529700407*^9}, {3.5935696790073357`*^9, 
   3.593569714099845*^9}, 3.5935697783582697`*^9}],

Cell[BoxData[
 RowBox[{
  TemplateBox[{"For"},
   "InactiveHead",
   BaseStyle->"Inactive",
   SyntaxForm->"Symbol",
   Tooltip->"Inactive[For]"], "[", 
  RowBox[{
   RowBox[{"i", 
    TagBox["=",
     "InactiveToken",
     BaseStyle->"Inactive",
     Editable->False,
     Selectable->False,
     SyntaxForm->"="], "0"}], ",", 
   RowBox[{"i", 
    TagBox["<",
     "InactiveToken",
     BaseStyle->"Inactive",
     Editable->False,
     Selectable->False,
     SyntaxForm->"<"], "7"}], ",", 
   RowBox[{
    TemplateBox[{"Increment"},
     "InactiveHead",
     BaseStyle->"Inactive",
     SyntaxForm->"Symbol",
     Tooltip->"Inactive[Increment]"], "[", "i", "]"}], ",", 
   RowBox[{
    TemplateBox[{"For"},
     "InactiveHead",
     BaseStyle->"Inactive",
     SyntaxForm->"Symbol",
     Tooltip->"Inactive[For]"], "[", 
    RowBox[{
     RowBox[{"j", 
      TagBox["=",
       "InactiveToken",
       BaseStyle->"Inactive",
       Editable->False,
       Selectable->False,
       SyntaxForm->"="], "0"}], ",", 
     RowBox[{"j", 
      TagBox["<",
       "InactiveToken",
       BaseStyle->"Inactive",
       Editable->False,
       Selectable->False,
       SyntaxForm->"<"], "7"}], ",", 
     RowBox[{
      TemplateBox[{"Increment"},
       "InactiveHead",
       BaseStyle->"Inactive",
       SyntaxForm->"Symbol",
       Tooltip->"Inactive[Increment]"], "[", "j", "]"}], ",", "code"}], 
    "]"}]}], "]"}]], "Output",
 CellChangeTimes->{
  3.5935687408165264`*^9, {3.593569530024439*^9, 3.5935696166871047`*^9}, {
   3.5935696800444393`*^9, 3.593569714390874*^9}, {3.5935697576081953`*^9, 
   3.5935697786422987`*^9}, {3.5935698271941533`*^9, 3.593569855506984*^9}, {
   3.5935699575501876`*^9, 3.5935699999724293`*^9}, 3.5935700516245937`*^9, 
   3.593570176624093*^9, 3.5935702695623856`*^9, 3.5935715043168488`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"extractLoopConditions", "[", "loop", "]"}]], "Input",
 CellChangeTimes->{{3.5935695309965363`*^9, 3.5935695328267193`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"i", ",", "j"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"i", 
      TagBox["=",
       "InactiveToken",
       BaseStyle->"Inactive",
       Editable->False,
       Selectable->False,
       SyntaxForm->"="], "0"}], ",", 
     RowBox[{"i", 
      TagBox["<",
       "InactiveToken",
       BaseStyle->"Inactive",
       Editable->False,
       Selectable->False,
       SyntaxForm->"<"], "7"}], ",", 
     RowBox[{"j", 
      TagBox["=",
       "InactiveToken",
       BaseStyle->"Inactive",
       Editable->False,
       Selectable->False,
       SyntaxForm->"="], "0"}], ",", 
     RowBox[{"j", 
      TagBox["<",
       "InactiveToken",
       BaseStyle->"Inactive",
       Editable->False,
       Selectable->False,
       SyntaxForm->"<"], "7"}]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.593569533110748*^9, 3.5935696171761537`*^9}, 
   3.5935696813265676`*^9, 3.593569715973032*^9, {3.5935697657920136`*^9, 
   3.5935697792813625`*^9}, {3.593569827581192*^9, 3.5935698559000235`*^9}, {
   3.593569958183251*^9, 3.5935700004244747`*^9}, 3.593570051995631*^9, 
   3.5935701770411344`*^9, 3.593570269659395*^9, 3.593571504691886*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"i", "=."}], ";", 
  RowBox[{"j", "=."}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"loop", "=", 
  RowBox[{"Inactivate", "[", "\[IndentingNewLine]", 
   RowBox[{"For", "[", 
    RowBox[{
     RowBox[{"i", "=", "0"}], ",", 
     RowBox[{"i", "<=", "7"}], ",", 
     RowBox[{"i", "++"}], ",", "\[IndentingNewLine]", 
     RowBox[{"For", "[", 
      RowBox[{
       RowBox[{"j", "=", 
        RowBox[{"Max", "[", 
         RowBox[{
          RowBox[{"i", "-", "3"}], ",", "1"}], "]"}]}], ",", 
       RowBox[{"j", "<=", 
        RowBox[{"Min", "[", 
         RowBox[{"i", ",", "5"}], "]"}]}], ",", 
       RowBox[{"j", "++"}], ",", "\[IndentingNewLine]", "code"}], 
      "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", "]"}], 
   "\[IndentingNewLine]", "]"}]}]}], "Input",
 CellChangeTimes->{{3.5935687032057657`*^9, 3.5935687404424887`*^9}, {
   3.593569528379275*^9, 3.593569529700407*^9}, {3.5935696790073357`*^9, 
   3.593569714099845*^9}, 3.5935697783582697`*^9, {3.5935700276151934`*^9, 
   3.593570039645396*^9}, {3.5935702179822283`*^9, 3.593570219214351*^9}, {
   3.5935712336347833`*^9, 3.5935712365770774`*^9}, {3.593571524319849*^9, 
   3.593571535222939*^9}, {3.593571580147431*^9, 3.5935715804034567`*^9}, {
   3.5935729229066935`*^9, 3.5935729251609187`*^9}}],

Cell[BoxData[
 RowBox[{
  TemplateBox[{"For"},
   "InactiveHead",
   BaseStyle->"Inactive",
   SyntaxForm->"Symbol",
   Tooltip->"Inactive[For]"], "[", 
  RowBox[{
   RowBox[{"i", 
    TagBox["=",
     "InactiveToken",
     BaseStyle->"Inactive",
     Editable->False,
     Selectable->False,
     SyntaxForm->"="], "0"}], ",", 
   RowBox[{"i", 
    TagBox["\[LessEqual]",
     "InactiveToken",
     BaseStyle->"Inactive",
     Editable->False,
     Selectable->False,
     SyntaxForm->"\[LessEqual]"], "7"}], ",", 
   RowBox[{
    TemplateBox[{"Increment"},
     "InactiveHead",
     BaseStyle->"Inactive",
     SyntaxForm->"Symbol",
     Tooltip->"Inactive[Increment]"], "[", "i", "]"}], ",", 
   RowBox[{
    TemplateBox[{"For"},
     "InactiveHead",
     BaseStyle->"Inactive",
     SyntaxForm->"Symbol",
     Tooltip->"Inactive[For]"], "[", 
    RowBox[{
     RowBox[{"j", 
      TagBox["=",
       "InactiveToken",
       BaseStyle->"Inactive",
       Editable->False,
       Selectable->False,
       SyntaxForm->"="], 
      RowBox[{
       TemplateBox[{"Max"},
        "InactiveHead",
        BaseStyle->"Inactive",
        SyntaxForm->"Symbol",
        Tooltip->"Inactive[Max]"], "[", 
       RowBox[{
        RowBox[{"i", 
         TagBox["+",
          "InactiveToken",
          BaseStyle->"Inactive",
          Editable->False,
          Selectable->False,
          SyntaxForm->"+"], 
         RowBox[{"-", "3"}]}], ",", "1"}], "]"}]}], ",", 
     RowBox[{"j", 
      TagBox["\[LessEqual]",
       "InactiveToken",
       BaseStyle->"Inactive",
       Editable->False,
       Selectable->False,
       SyntaxForm->"\[LessEqual]"], 
      RowBox[{
       TemplateBox[{"Min"},
        "InactiveHead",
        BaseStyle->"Inactive",
        SyntaxForm->"Symbol",
        Tooltip->"Inactive[Min]"], "[", 
       RowBox[{"i", ",", "5"}], "]"}]}], ",", 
     RowBox[{
      TemplateBox[{"Increment"},
       "InactiveHead",
       BaseStyle->"Inactive",
       SyntaxForm->"Symbol",
       Tooltip->"Inactive[Increment]"], "[", "j", "]"}], ",", "code"}], 
    "]"}]}], "]"}]], "Output",
 CellChangeTimes->{
  3.5935687408165264`*^9, {3.593569530024439*^9, 3.5935696166871047`*^9}, {
   3.5935696800444393`*^9, 3.593569714390874*^9}, {3.5935697576081953`*^9, 
   3.5935697786422987`*^9}, {3.5935698271941533`*^9, 3.593569855506984*^9}, {
   3.5935699575501876`*^9, 3.5935699999724293`*^9}, {3.5935700400264344`*^9, 
   3.59357005248568*^9}, 3.5935701780492353`*^9, 3.5935702197264023`*^9, 
   3.5935702697304025`*^9, 3.5935712367530947`*^9, 3.5935715054299603`*^9, 
   3.5935715355679736`*^9, 3.5935715807294893`*^9, 3.5935728694033437`*^9, 
   3.5935729258269854`*^9}]
}, Open  ]],

Cell[BoxData[{
 RowBox[{
  RowBox[{"PlotIterationSpace2D", "[", "x_", "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "r", ",", "iter", ",", "region", ",", "c", ",", "p", ",", "minX", ",", 
      "minY", ",", "maxX", ",", "maxY"}], "}"}], ",", 
    RowBox[{
     RowBox[{"r", "=", 
      RowBox[{"extractLoopBounds", "[", "loop", "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"iter", "=", 
      RowBox[{"Activate", "[", 
       RowBox[{"First", "[", "r", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"region", "=", 
      RowBox[{"Activate", "[", 
       RowBox[{"And", "@@", 
        RowBox[{"Last", "[", "r", "]"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"c", "=", 
      RowBox[{"Reduce", "[", 
       RowBox[{"region", ",", "iter", ",", "Integers"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"p", "=", 
      RowBox[{
       RowBox[{"First", "[", "r", "]"}], "//.", 
       RowBox[{"{", 
        RowBox[{"ToRules", "[", "c", "]"}], "}"}]}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"minX", ",", "maxX"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"minY", ",", "maxY"}], "}"}]}], "}"}], "=", 
      RowBox[{"Map", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Through", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"Min", ",", "Max"}], "}"}], "[", "#", "]"}], "]"}], "&"}],
         ",", 
        RowBox[{"Transpose", "[", "p", "]"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"Show", "[", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"With", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"xhat", "=", 
            RowBox[{"First", "[", "iter", "]"}]}], ",", 
           RowBox[{"yhat", "=", 
            RowBox[{"Last", "[", "iter", "]"}]}]}], "}"}], ",", 
         RowBox[{"RegionPlot", "[", 
          RowBox[{
           RowBox[{"Evaluate", "@", "region"}], ",", 
           RowBox[{"{", 
            RowBox[{"xhat", ",", "minX", ",", "maxX"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"yhat", ",", "minY", ",", "maxY"}], "}"}], ",", 
           RowBox[{"MaxRecursion", "\[Rule]", "5"}], ",", 
           RowBox[{"PlotRange", "\[Rule]", "All"}]}], "]"}]}], 
        "\[IndentingNewLine]", "]"}], ",", "\[IndentingNewLine]", 
       RowBox[{"Graphics", "[", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"PointSize", "[", "Medium", "]"}], ",", "Red", ",", 
          RowBox[{"Point", "[", "p", "]"}]}], "}"}], "]"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"PlotRange", "\[Rule]", "All"}], ",", "\[IndentingNewLine]", 
       RowBox[{"AxesOrigin", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{"0", ",", "0"}], "}"}]}], ",", "\[IndentingNewLine]", 
       RowBox[{"Axes", "\[Rule]", "True"}]}], "\[IndentingNewLine]", 
      "]"}]}]}], "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"PlotIterationSpace3D", "[", "x_", "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "r", ",", "iter", ",", "region", ",", "c", ",", "p", ",", "minX", ",", 
      "minY", ",", "minZ", ",", "maxX", ",", "maxY", ",", "maxZ"}], "}"}], 
    ",", 
    RowBox[{
     RowBox[{"r", "=", 
      RowBox[{"extractLoopBounds", "[", "loop", "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"iter", "=", 
      RowBox[{"Activate", "[", 
       RowBox[{"First", "[", "r", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"region", "=", 
      RowBox[{"Activate", "[", 
       RowBox[{"And", "@@", 
        RowBox[{"Last", "[", "r", "]"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"c", "=", 
      RowBox[{"Reduce", "[", 
       RowBox[{"region", ",", "iter", ",", "Integers"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"p", "=", 
      RowBox[{
       RowBox[{"First", "[", "r", "]"}], "//.", 
       RowBox[{"{", 
        RowBox[{"ToRules", "[", "c", "]"}], "}"}]}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"minX", ",", "maxX"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"minY", ",", "maxY"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"minZ", ",", "maxZ"}], "}"}]}], "}"}], "=", 
      RowBox[{"Map", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Through", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"Min", ",", "Max"}], "}"}], "[", "#", "]"}], "]"}], "&"}],
         ",", 
        RowBox[{"Transpose", "[", "p", "]"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"Show", "[", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"With", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"xhat", "=", 
            RowBox[{"iter", "[", 
             RowBox[{"[", "1", "]"}], "]"}]}], ",", 
           RowBox[{"yhat", "=", 
            RowBox[{"iter", "[", 
             RowBox[{"[", "2", "]"}], "]"}]}], ",", 
           RowBox[{"zhat", "=", 
            RowBox[{"iter", "[", 
             RowBox[{"[", "3", "]"}], "]"}]}]}], "}"}], ",", 
         RowBox[{"RegionPlot3D", "[", 
          RowBox[{
           RowBox[{"Evaluate", "@", "region"}], ",", 
           RowBox[{"{", 
            RowBox[{"xhat", ",", "minX", ",", "maxX"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"yhat", ",", "minY", ",", "maxY"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"zhat", ",", "minZ", ",", "maxZ"}], "}"}], ",", 
           RowBox[{"MaxRecursion", "\[Rule]", "7"}], ",", 
           RowBox[{"PlotPoints", "\[Rule]", "35"}], ",", 
           RowBox[{"PlotStyle", "\[Rule]", 
            RowBox[{"Directive", "[", 
             RowBox[{"Yellow", ",", 
              RowBox[{"Opacity", "[", "0.5", "]"}]}], "]"}]}], ",", 
           RowBox[{"Mesh", "\[Rule]", "None"}], ",", 
           RowBox[{"PlotRange", "\[Rule]", "All"}]}], "]"}]}], "]"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"Graphics3D", "[", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"PointSize", "[", "Medium", "]"}], ",", "Red", ",", 
          RowBox[{"Point", "[", "p", "]"}]}], "}"}], "]"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"PlotRange", "\[Rule]", "All"}], ",", "\[IndentingNewLine]", 
       RowBox[{"AxesOrigin", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{"0", ",", "0"}], "}"}]}], ",", "\[IndentingNewLine]", 
       RowBox[{"Axes", "\[Rule]", "True"}]}], "\[IndentingNewLine]", 
      "]"}]}]}], "\[IndentingNewLine]", "]"}]}]}], "Input",
 CellChangeTimes->{{3.5935724228436923`*^9, 3.593572474437851*^9}, {
   3.5935725067790847`*^9, 3.59357267404381*^9}, 3.5935727205284576`*^9, {
   3.5935727540948143`*^9, 3.5935728860650096`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"PlotIterationSpace2D", "[", "loop", "]"}]], "Input",
 CellChangeTimes->{{3.5935705456869955`*^9, 3.5935705471511416`*^9}, {
  3.593572679191324*^9, 3.593572679638369*^9}}],

Cell[BoxData[
 GraphicsBox[{GraphicsComplexBox[CompressedData["
1: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
zbFe5BDxW2l860Oe2beuoqOyU9jJx2bbr4zH0EHf1FQOCE/tbqr6g6k2moxR
Udk85MJLZaot2Ri25rOUyvDQplVMe53Ijlb2v+mo7FB3Zx/FCXdyMHzacAmV
dfyXXVe+8iJZ1fNvy6ncF5AxUjLWlwwJaRgnpLJk/5CDWltvElanykkzXd85
BzdEKZb4ksgGgoYmup62urtvRV4BpGGwOVNJ10992HWhMSWItKgyws1E18v9
qKympqqYtKv+sKOCrs/RCUl5egU/30bzY/h8H6t5NhlTRozUqfh5NkE/U2vc
sZpfM65t6Cc5raNQT6WWPTi7zGpeTTxJqWugdRPqpxoCz4GdrObTzJQ5D5PR
Ogn1UvtabbsrVPx8mquh03JFAn4+jbspaGSQ1XyadyVB+jSr+TT3Zl5rfsxq
Po3cs/YZtZE/Xwp+z57tv19o4OcjTHB/0NpEJeqRJsmTl8ioNP9cWhhiNc8G
+fmbpEUmNY2rAp06MJrmEZXvD07z/GOqgsoSwc8mf1nNv+mTILg3yWr+zX0v
RT+Zgr/PhXjyeX5xdYGJn8fALHlqzJXy9zG0/9SzbKLSdt4J6VKreTmoF2Zd
lh4Mp3F+6QDpVS3NWyrfJ7yy1H9qGpXq+Xn3Iq3m62TNbjWxodV8nX4+6wss
Ofz5W+RnNlcmRBVb+Hq68/LuPiNl/H2O/TdTW/lR6brwt0l2VvN4UL8svLrn
7XGad6wZvEcgFvx6v/BO8iJdCJUr1MOEF6zm9ygS490/WM3veeqbuUav5M8D
Y//M7fqLBfFCvj/fa+WFrtly/j7I8TseU5Kp9Fn8174Eq3k/qKdW/hNcszF7
jyQ2uI1G+Ot9w8erit9vYu8dLrn/Ryur+UCvkvbv3W01HyjW36WJysyfT8Z+
nf+NnudzRfx+wOA1TRf1VfD3SWLHkr52NK6J6NsssJonlHnkymm18Nf7hnn/
SH2WUtk9sla7/lbzhmCvx6Luxb6T8vdPcsap8s9T6XXt/MoTVvOIYv4u6yvT
/HofcdqNCbpIKksvOLUvvuhFGn2SBoU5f2MazZ93Sp3hTQblPklQ+H5nki6R
58c7+RLyLThZUusnc3TBmT6yLn7kRNHzGZL1AmKfoUqIv+NP9paWJQm32pEw
df43y90AcvFH9N/anQ5k8ZWjwY37BJG/LZPOqA84k9OLGq7W9wsmN8oufxId
dSXu13LTc5+KyFnb1wWWU0JCloxqpHouJg9swiSa855EP9lcLyyOn3/0pk1u
D42Mn3/0OWLwUmE0P/+osN2dDLWCn3+UtH2bxSLl53PY73ycqtfz849mP93y
2ki/9+ctHmM1Tt+Yc+12rurr4EPC8vb01PkXMStfzetnoN9bsMv8TF3zJ9Ne
9qyh33I/UvvHldfyIBsin/L3KAX93kt6K/fqt9iRqx0CbmT6BJLGZS2qGWo7
kn7Ta2uN9Huv7ffstZTKqMgeY5I3BpNWNvv6yZq5kdiZ65/ITwvJ5oE9quno
908/Z+9mGu5NYnSxDTRUtr7QNk37wZc8OrzxHzmV3U1LLgrpulTZfOyW3uc7
c7ggTCyg67A+uqvWmCIgJ4vSeqvoe9fGnHsip/LCD9Eq8xFXsr9vkwADldfL
lhuU9L0eH7BdLqPyTVLivPhRPiS70dKOCirjbN+Mk8z1IjHvxrY3OZiZPLvq
ziYnXzLqc7cTxhqlzBSHfru0K/xJm5KgAFNVO1LkuLq9wj+IdPy5VK6o70wS
nA3PRaki0kPwc6mxpZDrr7Za3lZazM5hmFr2wZLD3z85Ftoo1/IPv9+I/cl9
bd9aQnWe5N6bSwrDxmJm25ZP41RUxk/7d6wiy4b0v/fui5TKmaqOO41vHcnw
BwPq6aicl3AiW17gRsY/ujlCQmXGeY37SPp99OO33pFT2enirb0hztSeJz6K
E1KJ/cwZVUlcN+qvbTvkPKtnNf+oOGtkpHgerXs2P7hhTMpjGo3/o5fg0a/n
sS/W/rNKOpWuXyYsjrGa34N8dVvZkWIllddfy0Ojl+czG/6a1URAJfLTw/Yp
ExRUZr1vvlG2p4zZpx2yy7y7jEE+Oszh7OQ0KgunuzuJh9qT5/+GJJtj7bn8
M8658YEQKstmzmmnmeBC3j9ce01JJfLNaW7aN5uodJyTN0uY4EG+PXawNc3y
4PJNsmiJlyv7OwPk94GXqf/P+dymmo7KCU6tszfNEZPE+YkdFD89iMKmz9g0
apdHP084bl5RwLyyXek4ktrlpfye9Ux7Lcwo++s7QiYHEOXsv+4oX9mTDw42
7bK/B5GpSUJX0xcXgveTWn2OoS+V3HywWe/dl1I5wby6s+y8mNhti9fo5/Dr
ob/wUhJD1yPhYLeZGhk/7wTzT3p2H2SRU3n98YbpMh0//wTzUJrWq3E6hMrM
p65H9Xp+Hgrmo4Q3XJO/icpHzxM+Sg38fBTMS4lsYt/Yj8pJk6evNSr5+5+4
75IWfOZYJJX58YebaMz8/BRunoo4P9pO4EsyevftK9Hw81SO9vjzlVTFz1MJ
iz6QaLbw81RO9zRV0an5eSoRMdVOK4XB3P7A/ee/V4lb8JVZmHddbpj/lZmy
7wkjDsv/pf8e1eVDhpFK9eHzx4TR/HwVzFsZFH27lYHKrk/u+gnC+HkrmL9y
sn7/vtlUxmTLeqhk/PwVzGO51OjG6r5UDnp5fIlZzs9jwXyWm7+3vZlJZVOz
7yupjp/Pws1r2dTXbheVqP+2L756REjrv9SkU6KoGvR955bOVM3NY2rMM59w
3OND9F9ffFGmljA759fvfbmhP3k7a1hT3UBbIlk4wpx4LJB8nXM/TjLWiRxQ
b14Z3kZEfsyN3KOd5k7cXnY+I9xcwiTsOEUMf5UwK74FBAkG2ZJr928PUNB/
n1K4uKeK/ru7RrLOOMaJbCkuWW6m/+5J1tE7cipj5qS/ll7yIuYJPg4mGjcf
JX5JMtP4OGNSl+1aKjecsVjUWcXMoDc7gsVU3n8x+bS+xIa0KJRdU1P59PXr
fKmzE2lXfNxGQGXOm96Ndf7upEtp3XAVlYX5r5trVtPva+naRkXlzMIq9+RB
vqSxjfqRlEq7bGOSZmUBE7/tD8do6n9h9WesUKn4+SQrLme+kFIef/HRTyTe
VMy0Pzxms17J74/755wpUO+zMPN2158lo/7a6fdBdnEafj6JzxWXOeaPND9X
JVxTU369ekTbWmXm98t9Cnoc11O/7vLQqUhE5QFxjXCdkZ9PknK1vVj3ZyCZ
n/DZRvDOkUT9nWWUqvj9c1HRxS/SPBfS+7GqqYbywbFqa6ZJTC7ceQvR9Vkn
lSXBJDkxNlxF+fv2Md+pZgu/n17zR7N6OspDQ57mxgmp1IfYH9GaPbjzFwGW
nk01NH6nfznUS0blMJ8zU4UC/rxF3u2Ha41Sfj4J7s8VtVnxRkv5O2zSqWQV
9UP4I/ZH3G+qfcOoDD3T3SZMwO/vYX+qyr1xiyVUNjh3oY1OyO/vYT8qKG7P
nGQqm19sOk0i5vf3sP9Uc2LwKUcqwzN2HtZK+P097Dc1iF/2LZHK7cOXTRWK
+f099KNTT5elJFBJ/qx/3Wwu4eaj4PxwwJ2ibjoq0/SLtpjV/LxsnB/WjJvw
MpPKw+eLHyk1/PxrnB/eMv6FOIrKk5eUviYtP88a54fTJvXsc5nKF68+19EZ
+fnUOD/8qNWwTtXYuS85dTOUCn5+Bjc/qM1fpiwqbf+acH2Z1TyYm+2brzHW
9CaP3m9/rqXxkmT/6K6geXLl+9RzhzqsvEz5zXbIhs16OT/PHvsdkRcfuIfR
+IDzNY96rEsVUtkyKfZVuNV8GHXqnpGdrOa/yDuMb6zZ60s+fFHHaGhcznje
/KNI8+t97LWj39ulU/5Ux95trTLy9+VxHu3A66fEj8YfnNcp2Kd3TqIyVLZ9
/3qreTCuW17YOggC+PuhHXfflDcJIJaZx0fIaNzv9HL8EqMo4Jf73PfTR4Xf
p/zsOsz1kVTBz9vHebb0N91nJdP4hvM/loONZMVUNoj0e+NlNf9lxdbgbRet
5rv0++P5WOGJIOIyp+5WPc0nbr7aXUej/fU+ePapR9O6Uf5fMVw21ZzD37fH
ebgL7y8cd6TxE+eJXI5smx1PZfPO6hpLrea9+Gl7tp1jNc8lu1OQk6GtmPjO
3fhYSvOWnjnPL8sl4l/uk7/TRx25SuMLN79lgMvTAiqr1Uk4ONdqfgs3n2Vg
e9VRKrfXPR4V8R/zWRLaXpuvkPDzWVbI9hfJZfx8lsyd19JDdPx8lqw9rb5u
0vPzWXL27a/vZxAS/ZaCWmxdlrvzSl6uqIQh2xpdnCX0J3Me3G/6RWRLMrSj
FS01gWTxo8jxYyROpNOObT/yRSKy5snJPS+l7kQ+ucOUiTRvHPsupXESlcOm
S94PpXmi6vPMnfFUno5wbLyP5oWRM3XLj1J5qd2MsbXYvuTskGv1qTR0+LAj
leZ9A5LW2uyi8n2tRl/YPO/vi7bVPKn0GbLulrBdHnN5YgPbOJLHNJA4xgji
fj0P+rnZrHpPqNxeLWqaUMfPS0b8vnQ+daLKzM9PDhXkpkg035lXE0XThAZ+
Hm6dGvN9DVJ+fjLu738YRszH1fw8ZfH8twuTjQIyanIvX4Ocn5+7L0R/WK3n
5ynjfn/+yKMNGmv4+cq11f0vOJocyIf45YfVRn7ebqNaBd1kMn6+Mu7/l40J
HZ2m5ectN15yoyTR7EomTLnSTabg5/N2eBW4SEPrIr9N7dfKqOzz7scPNa2L
6myr4xxGZfPvE0/qaV0k7rUwQkNleMlLs5TWRbX7fJ8hpLLDz14NdbQuatx/
7N9qKkMFr5v51fImVQ59KrRQnkuzqXI3k/LNNl0djX4vP6+5zlJLdwOVh39j
vurNZu68RpWCnj8jKW8drD2MiaIyZbb4VCrlkRf+tQZsoXJLUvI3f+rXH4LW
aQKp3D3f0nAlu38ndrqzisq+l1s2X0D9Ys5Kvf1CKp9kTL5LqB/YrS7QtqPy
n59H2i2h//+e0SUvQigfd7N8yO5I//8T47N7+1F+vCsITbClfPWm1dCRdpSv
etsODj5P+SMv/N+tCZQ/suxS0mdRfy5hOmYVWN2HGJbYvZNBXsiMeKL/0vo/
7vOear9RkS0VkHdPC5Z//4/7vZc7um3sK3MgcdmN6h37j/u+tzrN/jdT7kry
no++Nsnq/u/pBkfqhwn4ecGjNkbJNUJ+XvCEVP1SoZifFzxta6Mragk/L5hE
Z1osIn5ecEZPl816LT8vGPMiVt06f9hMJfbrzEKPR1r2vt6cuh2TrO4LY37E
3fd318RTif08G1dVnSgqh11yGNzK6j4x5kk8+Si7lUsl9vvchLmxl6kcd2X6
+qNW940xX8L05bjTSCqxH+jvNfivcPZ3P66/v1vf6j4y8qEZxb4hE6nk5lEs
efshi8pzpobqe1b3lXH/uLSk67n6VGI/0W9ZjcXr2d8NeTuq1kqr+8w3J7oZ
j1I7VmwTBadT6XoiRhIdaWYyXxa1M3U0M+gHNzuSKg2mMitMWWw55UtWtrtv
yaEyVTMgRKPl5y/ifrS5o+hwMpVph2oM3WV1P3pKpufvGj2/Xw99XdvHD9TQ
fKjobqfbchl/Xxr3pz1C64+5TPOhhH/nKoUGfr8e96mD6m7eHk7zIcGD084G
OX+fGvera9bzfHac5kNzzCtUGh1/vxr3rcmNoQ9DqOyU0Gq6zMTft+buX7/b
XnsplfLE/Uf0NG9G/szdx871i7Wjst+8qh+lAv68J3c/+7N6UwKVhy/9sdao
5s974r52zoyEDzOpbJ6R1EQj5M974v722JnHF7Xw4/vzD+Z9WluFypR2FwfJ
XnmRsym6Abol35g3Jv/Viq0/mPWFB67ot/xgRLKSYssYX3Irde0d7c6fTFlB
6TzJM1vSZ06nzcanlI86NFuv/+JPJt1tU9Pw3I44Fk84q/3gRGLZ44tU1oyM
a66aFkRm3j84SPbJmXiUvvguKnIn4xY08DF8dye7/9h1V/pTRBYYq6/XlwjJ
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
8tf5ZlVGv9wYaKD2Ztv9tNL863yzOuN63V9l5O874Pw/8iPcZ0A+hPsKyH9w
HwH5Du4beI09v0m7Qkz+vPhWYKrKz+uITY7b/lLKz/Po9HPDo6lCTxJ6zMvv
vNX8o7JhT2rr/vQmm8YxjQSZBQzmJU6x7Ty52ML/vp/slfZZiK6A8T3UYOtN
q3lJ80b4XVaW+JJ9k2rtMH+wcPMU2y8I+DZVyP++X693C3v6GSzMet3I8CVW
85UcR3WLlcwNIEPO2C032zpw8xa7Llrc8IuI/32/5t+PDZ9vtifiI1sed7Sa
x7R0tPpnjlMwGXtu6lWllys3j7HP0pLRYyT87/tFlNTZUmpxIVuPGqfZCoK5
+9bNE5nfNVr+fib2a3G/53PXHSuNKT5EsK9eOwONlyeTZtyWS/j5StjPxX2f
+O5PG2iq+hOXfk4DFTR+hs87ohTq+Pud2O/F/Z/CHv4G+c5A4jtQtc5I4+mF
+R+cDVJ+vhL2g3EfaGZ099HC+iJSVZF7R07jK/TF/STog/tIeB7uH+Hv4b5R
RKMP181q/velMJ9iu9vhn5lUSkRvt5jl/DwRzKfIco46NZTKJlX7P1Yq+Pkh
mE+R46b/lkVlyxo3fE1Kfl4I5lN89mjUKIbKbaur1dXp+fkgyJdKneXH3lAZ
urZvhlLGzwNBvjTXdUn0DiqJ1iVKQeuF8SMbG9m6Afkq9isOabaH6Iz8fCj1
v7tyRSb+90jh3y+jjDN6Uhn+KsIob+JF1oy+9U19KY+bNxhneRiWZM5jGrw8
9CDTx5vkjb83StMln3mZvNCtwGqe1OFXb+OTN/oS2ynpT9SjypiRK8+lHbGa
H9U8p4ZXVI0A4ta2W5qe2JP3q753nGA1L+qkqf9Bxz1BxJ+cfyXt7kLGr2ny
up7VfKiIt2uiLjcUk+qy36vqBnqQb2vHJr21mgeF+16ZwSfdCq3ue3317E7y
re57/fC5MHO81X0vh4Cmx99Y3fda7H7vu87qvpe7h9u6OCprhDT0XlQjj8l7
1LdqGJUNXmfEsPe0zvneT7GjstRpyAWJmJ8/dbNBcf3oMH7+FOZTPdyxJ3Yi
lW8Kxh6VDc1jDtTwuGmMtZpHldE9P5JKap1Z96zmUdnmXwuIDuPnUWE+1ZWb
m/7MptL154MrWgk/n4qbVzWWmfKOSh9BJ4E4jJ9Xxc2vijtyaCiVIrvTrTUy
fn4VN89qYq33WVR62aWcVkv4eVaonzqeMnjXo7LKMCfnRbSuvRW/JdzUrYBZ
/MqeUU3zIYtE516z5wIbjclNUNG69tmMeUeMYyyMe07bp9KffqSrV/QB9pxg
jRNvi6S0rp3BNPM1XbQnq0zTVOb5gaSP7+U37LlByen+zXS0rp3Xflc3BZV+
b3UBOlcRiQ2QhrDnCJucvTFeQuvu5R0DFxufepAqL6rdlxd4k647Owxl+1gr
xsTM0gn5+VCoT7EfdmvoG5e4F7TODe2zUvL8B3e+oFncrpN9qUT9iv2wvGYj
Gd1PWyLxrzpPSCXOH4SeygjYRSXqW+yHFYUZVRI3Z9I0aKVe7erMnU9opA+L
rkYl6l/shwladz6mDRKScLHNd0ugkDu/0PJ82rL1VKI+xvngBVsGTxf6epPQ
lac26Kmf4nxDjaHC4YupRP38+uXeI2+odN6W4meg/pq2yixVUYnzD7uGRQrY
cw6t0zYt138Rk7QNrkK2D/XUVC9Eo+fnX7Ub3KZpWFfq99X3nzBH5TO9hlff
IxldxlyqvbKBaWQZc/SYzQphO3uSu+5UppL6++kTf15XU78u2FDfzdTNhVw6
bbIVDPIglr82d1RQf36TvX+L/hiNr3ecLiipPDzbUWMUeXHzs5aO+BSvu1PA
DKgSlKigMnXc3bdaNu7WLP0mp7LPyQGNDDSOMn6TjmmpVJy5OUZG42LnwFef
RVSOOhexQ0/zhF6imN80VKbHPvq8yd+HHPJ4fURNpWb0kIOSZyXMiOpLTxmf
ljD30kNWCxNsyRmfFoGmWZT3T629oV7iRK74741WUPlK7+AoWO9O7gSJlxtT
3En+8zbbwu95kY/JkcMlVM54OaVtcT9fMmllosBE5eehXUIb9/EhRZM6aIX9
i5n44Qsu5j71Iwvb+LkJTtuQwhFnFWnDA8nKCHVH1TVHMnNU4Y8RH4LJxnZF
ieb7bgT1A/r3PrrbgXECfj7sBuXV4xIxP3/ofsve64Rifr7Q0zbX7qgl/Pyg
nIhWroIwfj7Qx3b7O6hk/PyfmdtXMCoJP9/n/wAwHsEg
    "], {{
      {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.5], 
       EdgeForm[None], FaceForm[Opacity[0.3]], 
       GraphicsGroupBox[{PolygonBox[CompressedData["
1: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
pf3vNJdXK+3dMv+Hx1/SGCdbXJp+Ls8z7V6RZ9q9Ms/wW/gu/Bwee0eex1e7
4yk93zRPh8df27A8cF3avDz1r09bN+aZtm/KM3zy5jxPo7qTd8zTkQWQJ25N
ffq/Lb/zqrTBb706z9S/M+O7VfVPhycq3aJ0MnxM6QvNx5lKg5BVNScLK62p
8kVa5jOvQQfV52JK3wn+RuVfww/U5gzK32qY533Heg3/G6r2lkXeQNZTe4sr
rY1OozYGKv3CGhLO23r/JTxG+dvK30JHgm4r/Sj4J5X/qPSe2uyr/P2GecMv
gn8On1hd7QwW3BvZR/0spbSu6t6g8iNUNoPg25TOVuqrtBjtKH+PbyOc0awz
wX8o/13pY7U5q/JPGqabfwn+MzR0TbU9SGl94d+suieqfBbB6wgeInhqpTUF
L6d8CqX/6d357A9kDtpW/pHSHPzuhulUS+0124aH6XcPUvpdOGupbIjShoIx
2PyrOl/wvdX+WYLnRMZTulypPzKfyl5W/pLSGvBJpb8El6rbUfpWdfthixDe
d9lHLys/K/vt/Kz9NVVvBaV/VbdLOLXSD6wh9Xux6s6n8tuVLlaaR+lulV+u
8gWhG4KHK90p+C6lU5peS8+qjbuVrlCaVWmWtu0yyGKsH2wahzRtI+H5+5bX
09uCf1d79ytto+e70RmaXkvzqeynptfJC2rvHqVrlGZXmq1tO8hU0G3hfd+0
/ML6webwa8tr6APB96j8nKbXTH/h/tr0+jy8aZsEdf5S+UNKOyCvKj9faTvm
W/3cq3RD2/ycNYM+flTTOjfPf7e8hj4V/K/qPaq0C99PdeZo20Zwr9IFTa+r
hfT+j6bXwGt6f5/SLUrHNq1fsm7aba+brwQvoLy/UrtpHsh7dNWWfvsTamt3
9iR0rum1NK9w52lbv4LesxagsYsK9++m1wy/+dfstTeFe7/S7UoDUAZaXhsn
6HnFlvf5PkortExDXhPO2YXpxFvCeUDpTmRJfnPL3+JKpUP/871/Cg1ZUu/n
avm7vqk2zitMA+4rvCZ+Fs782KXa1rvmV9kbyh9TugremG+2jn772kpT6/kd
1b2w8P6+Gv6Ub8M8/Z09uJTezd3yt+eb/ZG9/0jh7/cn60DwJYX34jXCOy7f
4yQ9r9zynj9R8Eot06MHC6+z34TzeOFv9o/g0wSfWnivnqL8ZKVrBW/d9v5E
Rz4Z+1DLNOUj9lfhfbwM+6/lb/Cpyq4qvEfnUv6D8u+VNmMfNm3TLDUHnY71
76VVZ96WvzE42ETRubaEVzVt43tE6Yqm55Zy7IjoFAtADwU/o7Rd07YW5Ld+
Kn9H8BOsXfWzHrqW4BH8nqZtXsNVtonSHOwv9pzyp5Q2UtmGSjML3lFph6b1
f9rftmk72uZ6v5nSvIIHIF8q/yr42AaQhXZRvnPT+vNCwvkMeqC0IHOk/Dml
rdTGlui9TeOjr8P3mYNJMg/Ywidqjp3asfQMPfo1wQtqTt+B9uZ3Yc9DL7hf
+Wmpzzz1ylwxN70zPw8pvyjPU6v/STvmuQ8qndf03ud3TJbf8rDyy/K8idLG
TdvbD1C9bwP3zPdh/F1pg/GAP2XG3xsbadN9we/RW2eDrmodXKe0qpDuaNkH
AM4DSmflN2DPZt+gOw/U+3lapkdDW7Zt8G43pV2b1oV3S/vg392yTZw+D9IY
fgjO2ZrDg1V+oNKpTfOEu4V/WMbH2LDvsnbQJc8V/tHCPVJpT5Xt0bQOeIja
/DkwvBzdcHDDODOl7n0t24t5f2TwwBnWsk7DelstOXrfj5qPW5TW0Puj1P6f
Tcv58DZk/gOEczh22qb1Jng5OtRmKt8nMO082LKNlffHBA+cNVvWCVj/qydH
H/lJff5PaS29v1C/91zlZyvtp/ejMobzVX6Kyk5qua+9M4b9MjbaWTfyJmv7
+IybMa/dsmzO3hmWHHn+Z/iz0jp6f7Hav0z5JUqjqde0DH8sdtrAyBbI9mc3
jNMv7Tzesi2P99g1sL3Axx9p2e7JONbIuJCBf1Gf9yitR3/q9yrlVygdzFpp
2sa1i/qdLPauRZqWeW9pGGfhtPNUy3Yu3p8YPHC2xx7S9DhOyLgZ8w/q80al
1Vu2V4HTK+NdPGM+S+X76f0o6DV0W2kzbFQqP1RlhyiNJ7iH0r6Cd0JPb46z
j5AvlnypwD2xjSmNadlOAz7+FPRX9FR49PMt+1F49yc8SmlLeDY6YNO4L7Xs
n1imafsBNgNkjJHtcWVLBsan0AvZSukY1TsP/U75sS3rqIPT7zJpHxv7P/A4
pRGF7QVLp/1XW7a/gzc58oLSqSp7pmUfG/PYxGiotJ3q7oU80BynH5IjVyyX
cmzLb7RsH+/GWyk4U6PvKp2n9xcpv0D5+UqF2m4r7ViYtkGjoW8XCOd0Aae1
rD9QflfDsjz064GGZX9oyqMN79HVsk+hVeBAr6AZq4ZurNayTQsahFwP/lMN
y9rs2+cbXvvDsv6RhYFfaXhtrpH1OXf2OXuz29+A3v9s5g7aN6F+z+H6DW/p
+cym5dn7hfNCy2uC5wublgefbHiu18raXilrqnvdrJN1uHK+efdaWS9r49ym
ZdtHGpYJkA2wVb7c8tri3Wstf2/6wzYML4HXvNnyN0NuHJrvw/dbJWuB9XFp
0++fa/i7btS9BjrmX4g02Eix8WJnpv/hGQPvN8k3ZZ1tkDWPXQEeP35wqQOP
RkagHF6JzILNEzsnOc/wX2QOZA/sdXPkHbbTMjj9U3fL4IO7VfC3Sl34KTZO
cKiHXR+ZqXv+Nst4wB0RfMaGfQabDPYtZBhkgB6BsXFhVwO/Ttk2KQfeLvjY
kIB7pL0d8nvHD0z7Bzb8bnTDNjTawY6HHQObBjYrZCLgS7Nuod3Qc8qRgS7J
XoB/w6Oxk+6e+ZkweJemvZ2Dj22DurzfNXXZR8DY2/s0bAsfme8L36ZN7LD4
x3cNDmW8G5C9CW+bNWV7pnymwPB6+B52Wuyh+H/3SJvYRvfKt9sreOxxbHz7
Zm7xae6duujf6FHI/nun3/Uy3l3zW+C91N0zbfDMXsb+tX/mHz4JjF0MGw/8
q3vvw5vnynvwoBX4yw4I/mWpw9xSD/i6tDk6+KPSDv3iAzooONiC4IXwR/QV
5Btkm7fbjjM4NGM5OOPBXzkqvwVbDjo2+taQrHVs6ehkyIrjNWyDQe99v2Eb
CXos+tD7bfuS0Z3ebdtnj66FroYMh/y2YngjdAqZERkI+Wdu9JO2ZeCnW+bf
Jwm+MzIodqhPo7cjg6LfwL/h3c+1TDexI6wQ2RG58cWWaSW2gBVDQ+/n+8a+
gFz+bdu6IvrMPS3Lpti/7m9ZRsQeBP2FxqEbP9SyDIe95vWWaSI6+Sst00ps
BJ+3rbcju6PzQaOhz1+2/TuR9dHboInQw6/b1reR6R9tWTbCboKOCF2GJpNj
g4AOP9GyXIVNh9+EvWPtfBP0W3Tb8cU7Dm17XOhexHygf4yn8kPanhu+G7ou
euwEKj+s7d+ErQBdEx0TvZn4mE72BDot+ixrBP0cnbyH6o5p+zugtxHTgM7B
98H2hIzF2sGeiB7BWsDOiEyPvohvHn0InQxfKboLaxZ7HHI5awQbGbIyshx2
I+Q5vjP2I3glMi32JuRJ9Dl8w+hMzD12E3gW842NAz70pcb6hdIW6A4a/z5t
f3/qoV+hW+2r8v3bnm/mAF0OPe5Sle3d9tpkXtGL0In2Ef5+bX9D5gD9Db1r
L5Xv2/aa4vehP0+e343ux5q/TO8PaHvtf6z0kdLGLdso0KfgKadgQ4KfKn3I
XMNzld5Xeg++3LJ/+bF8L3RtZBV4E3o0eg085VS1cyM8umVdn7lDF8Bn90TW
yd4a86i21/tpym9SvknLfp+n8n3xZTyTb/e54M/gfy3bt1/IdzxddW/W86Yt
6+noGvCoM7BXUday3o1uAr84U+W3wlNb9h08l++IfQD9CH6HPIhNCplwKY3z
Z9X5SWkgMrnyX5SWV91XmrafTNO2vZM6n6r8E6XhLZfxHtvWh23HZxwXvJdS
juyP/RH5nxw7N7SR/PXA47f9zPvTC9tu6Pux7B++xUPQwrafkf2xMyL/T9S2
PZvnpVXvdz3/1vYz5e83nL8d+GG9O7DtZ77VO/lej6jsyLafkf2xMyKfT9q2
DZvnZdT+n3r+gzUNnW57/z2XPcM8P6qyg9qm63znD/KtH1PZUW0/o5dgQ0RH
mKJtWzXPg9AR9PxX28+Uw0PJPw78ODp+28+snU+yfhgf44SPkL8f+Enk1bbH
t2jsG8iHT6ns2LZpxmrKV23bT7Ar+rLy26CPKjte6d2W7UHoAMj/qwTGjnNC
YR8D779uOgeH/f114BML42FXmlFjmCG+Cdb4Z1nnU6psivg+Fle+Vcsw5dgy
4ZvTdRwfgL1jQHJkzuk7foeNeknl27YMU46NE75Jn31i11gqOXyZPntlXpZG
B2p5bIwTOyV8v2/HPl1sEzN3/IzdeFnlI1uG5+jYP4c+v0xwkRXBx64Dj561
Yx8nto8hyFct24Fn69heCA0ZnPfInMunPeRMcGaNr2HOjvvDPoz8DN2pUo6Q
D0+H5iFPQ/c2C9xJ3gr8eOpD3/Dz4LMf1DBdpE3eQ/OQp6F7WwafvlZUX3u1
PIYRwelKXgb+KDBtIGsjc4+XvA78SWBoE7QNnQT6tmPgCZL3CPxZYHChecjK
0L1dAvdMPn7gp9MfdO+LlFNvN+TkjuN1FlHes+UYmzMKwz2QdbGRBGf3juuA
s0TbcSH43RZtO0aHOsRzEA83X/KJA49Qva2V5lJaCV+J0oiW/XjgEcfyXr4L
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
wufZ0Oe+Y8+1LQd+03Yd8N8uPC/35P2dwXmv8O/kHCa+XOKZWNefFO6Ds4uf
F+6Ds4j4S7lHg/2Hj5f4LfYHfl1irdgf2MCwn8KP8NkS28Sexj9MfBV7Bb8u
MVXs1w8LzxFnNfE/E9vEHsJvTDwTewifN75v4iVZF89m3bAWnst6wL+Kv5XY
T775C1mjfOcX863xteJ7JW6U7/lyvjff8JV8R/yu+GGJkeRbvZZviV8XPy/x
lXyT1/PtmOM3823G6k9ZA+TvBMYHi9+WWEvm/618A+Qy6BKyGfrcu1mH6Ebv
Z42RfxAYHejDrAfyjwJT773U7Zl9PDA6zadZ/1+Kh75R2p7POVr8i/xe4Mfi
v6Ps0fj1HgsMDmeIH4jPEdsXPk7oyd+pgwyAn/Gh+BbZXzwjM3AXx3kdx5Af
Gpg7M/An3h+f4rDgEZP+cNrhe5E/+B/44fgrH0jdnzO2+wJzNuuuwv7lJwuf
4eUbYT/E5wqdpOzxlGMnxO8LzcTvyzM2wxlTPkPsiC8Eh7Gfm/Gzf2kHOYez
WfcW9lnj72Yc2GDvCsyc4+MGD58wfhOe8aHcm3J8KNA3fsusafPulONvfim2
Xe60ObPje21IZ3R8L86stepWtk+vo+88S+0Y6JmV31bZ3nyi4GlK+weOFlyX
9kusrbxv7bjhmZRfW9nW/qPK7yi9No5T+SSlfRFzCn6hsn16dsGPV7ZtP6ex
PCKcHzWe01U+b2l7/CmCZyntW/hT+T2l/bzrKp+tdgw394pwzwjnD05Q+eDa
cR7LKv+wcpwhcf6cB+AsxrbCGVW6fDO9X6g2f+WOEWL3idvnHhLwOTtweuaq
T8Nx/eBw1uCMzCfl3Od0asf3NlF+euZ2kNreSH390/bdL+d3vJbBPa3jczpV
l/gklzUVvhuKctqbIn1ztuO81GUvzC/cH0rvL2zPfF/4dd/CcQZ8c85W3lo4
7uL2wmce8YOQ3xYY/whwdywH5/WIg7g59YkvuDUwvlHe31Q4ZuPE4OFjxe5L
PMFDGs+Vhe9O+bdhfNrFF0wZ74gHuCl9UU7bN6f92zJOYigm7vjOEHz1+Jpp
B78zz5Tjryc2jzs0um0CnKnDLzxL6AxxFNjxeIetADrwV+gM9oO/g39QyqEP
FxS+Z+CXhu30r4ReEQPDGV5iSa7JGJpN20EZE3bR64ODX5734BFLQNm1KQcG
j3ib0WmXWALGSl9bZC4ZA/EY3Nd1buG4DuJU8H/g+5iucPxKdxkwch2+kWcC
Qz/uCA2ZpnBMDPEwTwXeIDQNesee6n63ftbUy1lXfUIDiTm5OHQKXzB+Fegj
tJF3wPhZsAc8lfahc/RBnAbflrWI7xvbPLEj2Oon6Pj+ImJALs/6IWaDOeB7
EIsyXsf3RF2Y+WBeoBVVx/DZScDE5+CX4BnfRFfHbTGvFxdu53f4Xcd9XZ4y
3u2UcfFMHAvjuqxw/AmblTFi8yfnHTEq2NdpA7v6ZSn/S/DPoi0L1Ob3/ZX/
UZp3fK/yfrXlhocFP1RZpnhM+aOV5cQflP9YWZ54XvlzlWW6Z5Q/XVm+uFf5
PZVl0G+Uf1tZRsF2zx1KnEsjXphzxZRBW44PzeFO1+M61hO544vzXZzt2i3l
6M3DRZc+riw/QQ+PDf28tONnaONden9nZbnpC+VfVpalzg+/htb9orJfK8sx
ryp/pbLs84nyTyvLRgtrPhZR+rFtnxz0j/OLb6jsnY51rdNCN3nHuTHOtnGG
jvFzRp0za9eovRUqnwm5VfktlWXrK5UvV/kMyU3MdxUdQvngymdOrlI+pPIZ
kquVL1/57MrlypetfF6FOwGYR8YIPz0h9P/YzAnzPIHGPF5t+esi5b91fObm
X+V/hD/+LXjjymeyFmaeS8f0TMtlf7V54vnKf+n47M7vKu8pvB20tr4XPIHg
bVmbauOfjuMLesCXa8t0XcL5K7y7UlmntlzZVNnEqruz6n4unPEEb134jrez
O76r7Qrh/tnxeaOJBE9YW2a8lDXc8fkWvu9h4UfknNXnLOHhKd8cuULtt2rz
+s0jw23R8Pq5pOM1Smw75/9HN3wulfXJGdjf0hb1eMfdXwcq72i8zS7fecP+
nahjXnOR8gs7xoPnbxv+TvmR4enkR4V3H5Vy2n5HY3yvY72CdT8qNqMPVP5B
x3rIBWmfdm6EJ2sM12RclHP3GPlF/5EfLs1vvFapt/B3zxguyjivV5pM5Sei
qwqeVPC6Dc/Npdlf7+q3rFZbh6L9C9LXG8qfK82DuPuL+8I4K7mlcLeuHTtD
O5Rzj9eHwr2xtBz+pfJbS/O7rZD1Ovb1rKeyOWqf75qb315aNn5DY1iptl75
ueB5autOXwuer7aONK/yL0rL2+srn6v22bB3hLNqbX3wBfXzWGneerngSfR7
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
RmYsvU5OhHdUvv+S7zZF6W9HLN6dpe0t+H5vi/+X78y351tvIPjiynHnx7OH
Kt/NebTyvpXj6tdVfmHlOPUzlC9VOr59EGWV4++RYZFxkWNPqyyzIq8eW3kd
sAaOqrw/2ZvcSwy94w7kIZlP5OFfVW/zOr48+qocr3+Z3t/UsW4+lcoOqUxX
V6r87fnuAyt/e7770Mrfm2+9TOWxMs7VK68J1sMVau/mjnXJ65Tf1rGOiQyO
3I4cPl3ldcAamKXy7+G3zFj59/BbrhHurR3r8jco/1/H+uyg0GriGrClDMlv
XLPyOmONrV/5GzD/c5aeO+btYL5j5TML0LkxoXWHKp+m8vkF5gAewzxwbpe7
AolFYc4Oy7wNzLpF3oOGLJ/19q/6GlHbrrVO5W/M92XtTFF7/YC/YvY4a23q
Ov+xIdypu2wjp70VQpdWDEz70+n9ZJV9huwT+DExGDcjU5S2VzxfWhZEDlyk
y75/bKULdjn+AJvo0l2OJ8De3Ckdi0AcQs/SsQjEISzeZV81NuCZSsdgEX91
Ru24UmJKkQ3PrC0fXqn8qtr6/5JdjhXAVv0gMRe170NdtstxGNhIiIc6u3ZM
1Itq5+LS9reXlV9S2k4yX+k64C8geLku85d5BA/qMm0vKuvY6Nct9niXzz0g
Wx1bW77apnR8KrGprwq+tLQtmnjY22rHxBKTe0vtuFxibG+qHWdL/Ozt+b3I
bvNVlt+I270hfvNTa8fX0g6y8Gm15eGTasf70ib3HWKbwCbBnfHcU89dK9yR
CUyMxKPCfaT2fauPwydr343K/5JTn7sT+Q8W/gO1u96CaYezY8hryIrIdPOG
znNGDP188uihwJs2rNPOH/hh9fNQ7Xtqd4uOSkw1+j046K2cKUOfHPtfv6Vj
74i7OwvZs+NzAegTJ9fWKY6vHa/MHCLPnlBbpj2XfVDbVjVK+X61/Z3oiMRq
EJtxecPwZcov0PsLa9uJLlZ+SW070fq1Yx3w0aLvMmb06D0zz9haLuO71bY3
YZ+dM/vutNL6J7rnSaX1T3TPhwWXXfYz/0+/7/bKZxlaXdZ10XP3h5/Uto0S
P9VODNVkKpu0dqz/+2qnq8t+xLeh36Xt9sRoE5dGTNqTyv9X2o5HzDj2LGxZ
vUvLXshdbyq/vLQv4H72TeVzE9OXlnGRb59Q2ZOVz0pMw7hq+8uJgboqPJ2Y
qWtCS4m3uiG0FNlzqsifvVRv4tpnUomlui50m3iiK0LPZxDcp8v3Us+kfMYu
3yE9u/LZunwv9azKZ+nyndNTqr3Ja8cCzKyyvl2+v5l4pcvCd4hhJ76N2Lan
ld9V5o6y0nQNmjYx8nyXZc6vkEu7fGZrasFLdFkOnKw0zYJe/YT82OXzUuOX
poPQwFZpOggN/Aj9qctnsOYoTROhhzMjK3VZPvxL8FJdPl/VpzRdg6ZVpWMN
kW/PKK1boleeVVq3RK88p7Q+iS75Ony7tO+M34EMzW9h7MiyjJ8+kU3pl7MC
xB0SczheadkOuQ6a145Me0ppfRtdG7rYiez9KDJXaXv1s8rvK+1Tm720boNe
0ywtNyMzf1Q5PhU6/Cz0oMtxHpw/IM6SGEt0mk+i17DP+oU+IK+yp86OPsid
wtyTeaBwR9e2Fx+BjFbbFnwYeltte/QhysfUttNPlbrokkep7Mja9mJ4ws+1
+cIWteOiiL1g39yevcO9Rfy/JP+hQxu0hb8DOjl1aCN3OAFzZ9Tc6Y++7lF+
bmm7PbZW2sHedX/Huhy/94XatlrstL8I3q12HMlfyvepHbfxh/K9ased/KZ8
j9pxId8p/6a2f/hT9lZtv/QX6Hm1fd5fs19r+56h6VNkDmljz7QDbe2d8oNV
dlBtm/0DHevS6NH/1Kan0FKYzP6hUaumTWyV7ImpSu8L/mOB/2Ng/libf9Ze
n/DG32vzR/jwr7V5MXTo79q0CHr2b22axlq7IeuNu6hmz3pAPsPuRCwcPiru
a0a/RqffvbReP3dkGOwJyHR9I9eRg4/Nir0+Uen9zn4tS+/Zsf9l3bE9aq3a
sXTE8fANp8l3xM+Mvxm/OX5k/NH4WZAR5i4tJ3yacs4esGZ6Z52wb+7P3uH9
JKm7Te3YUGLU8NtQThvfhpdPkW81ab4X9Ozu0LRNascREoO1YHCmzFrtFXzo
Td/SNIffMlnW9r0d6+ro6U93bB9hDv/JnBNP/qrafq22nxKZgfuX8V1gg1m8
th0GvXbR6Lbc1z0wcuyTKnui9l3pS6ecMwUfquyj2vF23LvDHdybN+yLWjo4
7+r9e7X9NOyJfbMvaAMc9DvgpYL/pt6/VTu2D5vQErXtQujfS9fWwbGRfF7b
TjIieuCsDe+/3bMHKZsr5ey/vbMHsaN8VduWgr1hqdo2B2ww39a2w2wf+9ey
DctWC3fG3Vm9cGStF4X7Um1fL2fwsYVNmnrzpC52MsYxSeZmUNYwfkHuTH+o
YZmAc7DvNSxfPFRaxuDOKu6OJw5z2dTF5vxkx3YxbGIPdWwzYh7AXSx7mXzx
0DH8l8Cc0WAtzJE9uGZg1gh3T3G3O/Gl2OEHZGyMcYnAi6d92nm4Y/sRtiPK
Fk058bnEVh2cetTH9v5Yx/Y7bHc9M4/MIXdM8d2XE/xEx7Yw5v/Rjm1efKMB
aQvbM3OwTObhIr1ftvTZ7f8DRh2Azw==
          "]], PolygonBox[CompressedData["
1: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
lQ151yKVs/wfcOfl8Q==
          "]]}]}, {}, {}, {}, {}}, 
     {RGBColor[0.368417, 0.506779, 0.709798], LineBox[CompressedData["
1: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
hAlc
       "]]}}], 
   {RGBColor[1, 0, 0], PointSize[Medium], 
    PointBox[{{1, 1}, {2, 1}, {2, 2}, {3, 1}, {3, 2}, {3, 3}, {4, 1}, {4, 
     2}, {4, 3}, {4, 4}, {5, 2}, {5, 3}, {5, 4}, {5, 5}, {6, 3}, {6, 4}, {6, 
     5}, {7, 4}, {7, 5}}]}},
  AspectRatio->1,
  Axes->True,
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  BaseStyle->{FontFamily -> "Arial"},
  DisplayFunction->Identity,
  Frame->{{True, True}, {True, True}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  LabelStyle->{FontFamily -> "Arial"},
  Method->{
   "ScalingFunctions" -> None, "TransparentPolygonMesh" -> True, 
    "AxesInFront" -> True},
  PlotRange->All,
  PlotRangeClipping->True,
  PlotRangePadding->{Automatic, Automatic},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{{3.593570547824209*^9, 3.5935705629497213`*^9}, 
   3.5935706078992157`*^9, {3.5935706765530806`*^9, 3.59357068384881*^9}, 
   3.593570713902815*^9, {3.5935707947148952`*^9, 3.593570926812104*^9}, {
   3.5935709658730097`*^9, 3.593570987760198*^9}, {3.5935710787712984`*^9, 
   3.593571113699791*^9}, {3.593571200328453*^9, 3.5935714615985775`*^9}, {
   3.5935715065570726`*^9, 3.5935716117435904`*^9}, {3.5935716483482504`*^9, 
   3.593571693977813*^9}, {3.5935717711615305`*^9, 3.593571827101124*^9}, {
   3.5935718995813713`*^9, 3.5935720545878706`*^9}, {3.593572087206132*^9, 
   3.5935724022776356`*^9}, {3.5935724812205296`*^9, 
   3.5935725896443706`*^9}, {3.5935726758229876`*^9, 
   3.5935726802424297`*^9}, {3.5935728037797823`*^9, 3.5935728717685804`*^9}, 
   3.5935729289773006`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"i", "=."}], ";", 
  RowBox[{"j", "=."}], ";", 
  RowBox[{"z", "=."}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"loop", "=", 
   RowBox[{"Inactivate", "[", "\[IndentingNewLine]", 
    RowBox[{"For", "[", 
     RowBox[{
      RowBox[{"i", "=", "0"}], ",", 
      RowBox[{"i", "<", "7"}], ",", 
      RowBox[{"i", "++"}], ",", "\[IndentingNewLine]", 
      RowBox[{"For", "[", 
       RowBox[{
        RowBox[{"j", "=", 
         RowBox[{"Max", "[", 
          RowBox[{
           RowBox[{"i", "-", "3"}], ",", "1"}], "]"}]}], ",", 
        RowBox[{"j", "<=", 
         RowBox[{"Min", "[", 
          RowBox[{"i", ",", "5"}], "]"}]}], ",", 
        RowBox[{"j", "++"}], ",", "\[IndentingNewLine]", 
        RowBox[{"For", "[", 
         RowBox[{
          RowBox[{"z", "=", 
           RowBox[{"Max", "[", 
            RowBox[{
             RowBox[{"i", "-", "3"}], ",", "1"}], "]"}]}], ",", 
          RowBox[{"z", "<=", 
           RowBox[{"Min", "[", 
            RowBox[{"j", ",", "5"}], "]"}]}], ",", 
          RowBox[{"z", "++"}], ",", "\[IndentingNewLine]", "code"}], 
         "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", "]"}]}], 
     "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"extractLoopConditions", "[", "loop", "]"}]}], "Input",
 CellChangeTimes->{{3.593572699174322*^9, 3.593572707629168*^9}, {
  3.5935729371851215`*^9, 3.5935729412245255`*^9}, {3.5935730709985013`*^9, 
  3.593573087930194*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"i", ",", "j", ",", "z"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"i", 
      TagBox["=",
       "InactiveToken",
       BaseStyle->"Inactive",
       Editable->False,
       Selectable->False,
       SyntaxForm->"="], "0"}], ",", 
     RowBox[{"i", 
      TagBox["<",
       "InactiveToken",
       BaseStyle->"Inactive",
       Editable->False,
       Selectable->False,
       SyntaxForm->"<"], "7"}], ",", 
     RowBox[{"j", 
      TagBox["=",
       "InactiveToken",
       BaseStyle->"Inactive",
       Editable->False,
       Selectable->False,
       SyntaxForm->"="], 
      RowBox[{
       TemplateBox[{"Max"},
        "InactiveHead",
        BaseStyle->"Inactive",
        SyntaxForm->"Symbol",
        Tooltip->"Inactive[Max]"], "[", 
       RowBox[{
        RowBox[{"i", 
         TagBox["+",
          "InactiveToken",
          BaseStyle->"Inactive",
          Editable->False,
          Selectable->False,
          SyntaxForm->"+"], 
         RowBox[{"-", "3"}]}], ",", "1"}], "]"}]}], ",", 
     RowBox[{"j", 
      TagBox["\[LessEqual]",
       "InactiveToken",
       BaseStyle->"Inactive",
       Editable->False,
       Selectable->False,
       SyntaxForm->"\[LessEqual]"], 
      RowBox[{
       TemplateBox[{"Min"},
        "InactiveHead",
        BaseStyle->"Inactive",
        SyntaxForm->"Symbol",
        Tooltip->"Inactive[Min]"], "[", 
       RowBox[{"i", ",", "5"}], "]"}]}], ",", 
     RowBox[{"z", 
      TagBox["=",
       "InactiveToken",
       BaseStyle->"Inactive",
       Editable->False,
       Selectable->False,
       SyntaxForm->"="], 
      RowBox[{
       TemplateBox[{"Max"},
        "InactiveHead",
        BaseStyle->"Inactive",
        SyntaxForm->"Symbol",
        Tooltip->"Inactive[Max]"], "[", 
       RowBox[{
        RowBox[{"i", 
         TagBox["+",
          "InactiveToken",
          BaseStyle->"Inactive",
          Editable->False,
          Selectable->False,
          SyntaxForm->"+"], 
         RowBox[{"-", "3"}]}], ",", "1"}], "]"}]}], ",", 
     RowBox[{"z", 
      TagBox["\[LessEqual]",
       "InactiveToken",
       BaseStyle->"Inactive",
       Editable->False,
       Selectable->False,
       SyntaxForm->"\[LessEqual]"], 
      RowBox[{
       TemplateBox[{"Min"},
        "InactiveHead",
        BaseStyle->"Inactive",
        SyntaxForm->"Symbol",
        Tooltip->"Inactive[Min]"], "[", 
       RowBox[{"j", ",", "5"}], "]"}]}]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.5935730882842293`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"PlotIterationSpace3D", "[", "loop", "]"}]], "Input",
 CellChangeTimes->{{3.5935726852219276`*^9, 3.5935726853339386`*^9}}],

Cell[BoxData[
 Graphics3DBox[{GraphicsComplex3DBox[CompressedData["
1:eJztnb+vXGlyntnT22zeITnsvuSONlkKChQI0DhSSGMIKHAwjjZwMAYMrAED
XgOGFTigAQcCHFB/AQU4EOBgnQlwQAMbKNsLO1BgYO1I2RBwoGy43DFXHuzS
95xzn3uqnvc7XitzICYNPixWff39qHrr9OnTv/NP/9UP/tlHd+7c+S+f3Lmz
v379cv7z88/vzH++/vzZ9Of6Ff4ff3z956u3n7/5avrz9vNH058369+3OP7s
1/z/9d89TnPHNX86/bkeH/zV9Kf8uzl+/vPr6c8vYpxwz4/t7cfjNGec//1n
139++u7zq59Of97d/ru5/WzxP3l5/af8P/vhdejnauU///r6TxmvuePC8Tfv
k0fvYz7hw/1W7HmFez7NmU+45wfu+RnaX8/Dn07748ffLOO8fiWOuf2b295x
/8WPrv+Uf7c9r/Y/j6fwf/jF9Z8yH+YeJ9zjgRNnHt+P/ibWEe51tD2vcK+j
OesI9zrCvY5D+6t3fZxlXeCef9szz/94Shsvb/bPy3WezYfjLNz2jNfc45nX
pfy77Xl13Nn/9etvT/PK+y3zbT6cn8Jtz/jNGb+5x/n3Prv+U/7d9luvs//B
370P4X5fcO8f+HA/DMbvcSz+vo3zAvd5sT2vcJ8Xc84L3OcF7vMytL9618dZ
zgvc58X2nJcWt+x/uPez7dm3LW5ZR7j3j+1Zn3/z4vrPF99+/sX8Z50/c/s3
tz3zZ858mPP+zD3+T6Z0XP7d9j2+/Be+rOu34/12le8X7n0C97rDvY7w4bm4
Wsc779+nv47zAvd5sT2vcJ8Xc84L3OcF7vMytL9618dZzgvc58X2nJcWt5wX
uM+L7TkvLW45L3CfF9tzXuDe/3DvT9uzD+f1/OxXn382//nV7TqY27+57VkH
c+bVnHky532b+31N8vbr31//3fa8evyz/8Ln9sP7sXDPA9z7EO59Bfc+gXvd
4X6/8PZ+n9157nMK9zm1fft/19zn1JxzCvc5hfucDu2v3vVxlnMK9zm1Pee0
xX35Pvz4nNqec9riWl9fc59T23NO4T6ncJ9T27dzes2H5+6aD/d/sWefz//t
0YebfuJDz8eF27+57dt6Ft7Ws/C2PoW3+S68zV/hfr9TO/2zT/Q+ij2vfl9L
X7Xy+XyV/W7u+YF7n8O9b+Heh3DvK7j3CdzzAO/zuov8AB/3ias9r/Bxn7iL
/AAf94m7yA9D+6t3fZzRJ+4iP9ie/NDiRj+4i/xge/JDixv9yy7yg+17X7KL
/AB3frA9+QHu/AB3frA9+QHu8w73+bI952ia7x++uPP8xfxnPUfm9m9u+3od
rvK6zpXX6wGV1z678tp/VF71UeWeh/nc6X1X+x5/fb/z9c6b9/eHt/tkPU/m
w/1fuO1rv1B57Rcqr/u98tovVF77ncqrHqy81o3KPT/zftL7yPHk6zz+wd+d
3+DDvFTmzdx5Bj7MG2XezH2u4T6ncO83uOfN73/eX68+ivwPd/63Pa9w539z
8j/c+R/u/D+0v3rXx1nyP9z53/bk/xa35H+487/tyf8tbsn/cOd/25P/4c7/
cOd/25P/4c7/cOd/25P/4c7/cOd/25P/4c7ncOdJ25MP+7ztwo/zg+05B9Pb
/6Mvb+J+ue5T8+E4C7c9+9ScfWfOPjJnX5izzuasmznrYM68juOu8zbnhfLv
tufV8zO7L3z+2KnkA3PPM9x5AO5zDfc5hfvcwX2O4D4XcO9zuPdtj7sL3vfL
PvIwfHz9ebWv9X3i4+vP+8jD8PH1533k4aH91bs+zrj+vI88bPt+/XkfeRg+
vv68jzzc4sb1533kYdv3zxn2kYfhzsO279d195GH4c7DticPw52H4c7DticP
w52H4c7DticP93nbhZ+RTqv2XU/tI6/CnX9sT56Z3v4PvmD+1/1ubv/mtme/
m7N/zdmP5uwvc/aLOetvznqasz7juLvgns/fn8KVfx+Pc//c8zb7L3ye95Jv
zId5qeQVc+cNuPMA3Oca7nMK97mD+xzBfS563F1wz3Mfz/752zkBfCfyP9z5
3/a8wp3/zcn/cOd/uPP/0P7qXR9nyf9w53/bk/9b3JL/4c7/tif/t7gl/8Od
/21P/oc7/8Od/21P/oc7/8Od/21P/oc7/8Od/21P/oc7/8Od/21P/u/ztgs/
zv+2J/+3uCX/w53/bU/+7/O/Dz/Ob7Ynj03y7A+e3cR9tp4b8+E4C7c958ac
c2DOvjZnn5qz78zZR+bsC3PWeRx3F5x1GI9nnec575R/tz2vns/luvXK53P3
dl0X8+E5fbvOv7nzEtx5Bu68AXcegPtcw31O4T53Pe4uuM9FH88+OPO6fG54
N+oOfPw5/mrPK3z8Of7dqDvw8ef4d6PuDO2v3vVxxuf4d6Pu2L5/jn836g58
/Dn+3ag7LW58jn836o7t++f4d6PuwMef49+NugN33YG77ti+fw5+N+oO3HXH
9tQduOsO3HXH9tSdPm+78OO6Y3vqTotb6g7cdcf21J0+//vw47pje+pOi1vq
CHx+eZbn13lymqZPPzvcrOOhXW+p3P7NbV+vw1Rer8NUXq/DVF6vw1TO/jWv
12Eqr9dhKq/7JePugtfrVzmefXDP/3wey7+Px3947nme9+nNeH/5/bu3/856
mQ/3Q+G2Z73MWS9z1suc9TJnvcxZL3PWy7x+DpZxd8Hr+cvx7INXXZPjPPR5
fNrHVe23Xmf3g7+7bsKHeaasl7nrF9z1CO76Ane9gDv/w53P4c7PPe4uuPNn
H88++DC/DdbL8z6fpy+OoWfg1jO25xVuPWM+h32z+rGegVvPDO2v3vVxFj0D
t56xPXqmxS16Bm49Y3v0TItb9Azcesb26Bm49Qzcesb26Bm49Qzcesb26Bm4
9Qzcesb26Bm49Qzcesb26Jk+b7vwYz1je/RMi1v0DNx6xvbomT7/+/BjPWN7
9EyLW/QMfD4/Rc/YHj3T1/EQflx/bU+dbXFLHm55YJBPRvn4dx+xH9Z8YG7/
5rYnH5jX7xVVXr93Unk9f5Vznsw5H+bsd3P27zjuLjj7azyefXDWfzzOQ3Cv
15wHPunzl+/r+NzrMuezwpd9vK6v+TA/l7xu7rwNdx6GD/NqyYvmzntw5zG4
81KPuwvuvNHHsw/uc93HeQjudezjPz6fv0/x4l7Ud7jru+15hbu+m1Pf4a7v
cNf3of3Vuz7OUt/hru+2p763uKW+w13fbU99b3FLfYe7vtu+fU/nmrMv7Wf4
vZhiT32Hu77DXd9tT32Hu77DXd9tT32Hu77DXd9tT33v87YLP67vtqe+t7il
vsNd321Pfe/zvw8/ru+2p763uKW+w13fbU997+t4CD+u77anvre4pb63PFDq
u+2p730/HMOP64vtqSPTuh3vkH/WvGI+HGfhtievmJMnzOv3TSvnHJvXc1k5
58ycc2POORjH3QVnn47Hsw/OPhqP8xCcdR6Pf13HeZ0+HG//fbxe9557vWb3
hS/nf113c6873HUE7roAd56HO2/DnYfhzqtw50m4816PuwvuvNTHsw/uvNHH
eQjuc93Hfwzez83F7XqgK+DWFbbnFW5dYY6ugFtXwK0rhvZX7/o4i66AW1fY
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
Lh/2OlL0iLn3Idw6BG5dAbdOgLvuw13H4a7LcNdZ+LBulrpnzn4bj2cf3HWn
j/MQ3HWhj/8Y3Hkb7jzc1/EiuPNkX8f7wb3f+vqSPx7d7g90Mtw62fa8wq2T
zdHJcOtkuHXy0P7qXR9n0clw62Tbo5Nb3KKT4dbJtkcnt7hFJ8Otk22PToZb
J8Otk22PToZbJ8Otk22PToZbJ8Otk22PToZbJ8PnbRq/l/IodHKft134sU62
PTq5xS06GW6dbHt0cp//ffixTrY9OrnFLToZbp1s+3lYhVsnt/0Tz0t7FDq5
xS06ueWBp36O16PQyX0/HMOPdbLt6/ea1/xzL/yMvj9b7dHJcOvktp/je0KP
Qif3/HYRfqyTh/ZvVm6dDLdOtn2/z+5R6OSW9+Jz+0ehk+HWyXDrZNujk3u+
fRh+rH9sj86Z/tcfv7rR56/69ZjKh+N81a/rVPtaTyqv9aTyWh8qr/m+8pq/
K6/5uPKaXyuv+TLj7oLXfJbj2Qev+SbHeQhe80GO/xi8ntfK6/nL9b0IXs9H
ruP94HX/5vo+7PVF4632ff3XfTW7vxnvD6/5y3a+b35frHDvT3Pbsz/Nq36p
nP1pzv40Z3+asz/N2Z/m7M9x3F1w9ud4PPvg7M/xOA/B2Z/j8R+Dsz/N6/dT
c30vgtf7tXMd7wevn6vk+j4M7n34z6fp1biqfd8X8l84f7fOhw/rSNmf5kO9
XfanufUw3PoWbr0Kt/6EW0/2uLvg1nt9PPvg1mN9nIfg1kt9/Mfg7E9z65O+
jhfBrR/6Ot4P7vre1/dhcO9POPtuWoVffsj+Ee7+cVmHU/t+y2c/envL3Z/a
nn4T/+43sa/fe6n+3YfafnZz9e7Wv/vQNs6b789U/+5PbU9/in/3p22cN9/D
qf7dt9qevhX/7lvbOG++z1P9u5+1Pf0s/t3PYg+3f/e5tqfPxb/7XOzh9u/+
1/b0v/h3/4s93P7dF9uevhj/7ouxh9v//FL6ZdvPx5HnG3/Ifrmv1y78u4+2
PX00/smb9g+3f/fXtqe/7vtnH/7h9u++2/b03fh3393G+ew74d/9uO3nv/L8
5w/Zj/f9dgj/7tNtT5+Of/fpbZxP74b/2eypn299iv697/9j+G99us/XJ34e
5yn6+l4X7oV/uP2737c9/T7+3e9jX793F+c3nsNxiusAvX5dhH+4/fv6gO1n
N28ubv37+gD2/XkAq39fN7B9/Z7cWh/vh3/4sP7G/fWnuJ6Af19PwB5u/3P+
ivunTnGdodffh+EfPqzv8TnVas/1B/z7ekIb56tPwr/7StvTP+IfnWT/cPu3
/rd91V//4Bl5adVH2MPxb3v0jjk6xRx9YY4uMKeem1OHzamf5tS9cdxd8OX9
fxSc+mBOXh+P8xCcPDoe/zE4ecucfDNex4vgnO/xOt4Pznkar+/D4Oxfc+/D
eVr07zmfp+feh/P0Fz4v35e5b+HW53Drarj1MNw6Fm79CbduhFvvwa3Tetxd
cPbneDz74OzP8TgPwV33+/iPwV1n4a6Pfb0ugrse9XW8H9z5v6/vw+DOt3Dv
zz5vyzz9yxfrPqv3l068Xo9bf//r1K+D3P7OV/aPtp+n8+b7KZP/1vcV/+16
SvHj/tH29Xsrk/96fbD6b9dlin/3j7av32eZ/NfrjNV/u75T/I9/DzH7R/zX
65XVf+sHi//x7yRm/4h/zrP9w+3f/aPt6/diJv/1+mn1365bFf/uH21fvy8z
+a/XYav/dv2r+J+PQfzeYvaPfX134b/1g94/8TuM2T/in3xn/3D7n49t/D5j
9o99/+zDf7uuV/yPf7cx+0f8k3/tH27/7h9tP7+Nm/u01/15CP/w4f4v/aPt
6/d3Jv/1unn1365XFv/uH20/v42b+8bX/X8M/+26p89X6R9tX7/vM/mnPtk/
3P7dP9qe/hH/fl4l9u06rM9vPAcx+8dedy7Cf7ue6zoSzxnK/hH/fl4Q9u26
cPHv/tH29ftEa328H/7b9eXi3/2j7ekf8e/vGWHfrlMX/+4fbV+/V7LW34fh
v13vdn2P+wezf8R//3zzbR/nq0/Cv/tH29M/4h99Y/9w+3f/aPv6Ocaa304b
+e0U/q3/bY/On56P/ZPXN/vt9aqP2j58vfq3PXrHHJ1ijr4wRxeYU8/NqcPm
1M9x3F1w6tV4PPvg1IfxOA/Bycfj8R+Dk//MyVvm5Btz8sR4fe8H51yO1/dh
cM6BOft3PG/rPpzdln+3fX/f69/n4Rf+Yfrzde5buPU53Loabj0Mt46FW3/C
rRvh1ns97i649VUfzz649Uwf5yG49UMf/zG46zXcdRbu+gh3XevreD+460hf
34fBnbfhzrd93nJf1XOzf7vus/o6cfYZfBrvv/7R+ZbXf5/sWx9X7OH9c/xz
7x+//79u+fj+2HP0icRlfztuf/7yGrf1lSXu+H7ac/SPxOX8OC7ccVu/WeKO
7789R19JXM6n48Idt/WhJe68LeJ+3XP0m8Tl/Dsu3HFbf1riju/vPUcfSlzy
i+PCHbf1rSWu+1Pb05/2fbWLuP352t5Xu4g7vn/4HH0rccmPjgt33Nbnlrju
Z21PP9v38z7iwsf7eR9xx/cnn6PPJS753XHhjtv64hJ3fD/zOfrffo4OERc+
PkeHiDu+//kcfTFxqU+OC3fc1keXuO6XbU+/3M/vMeLCx+f3GHHnvBH3V5+j
jyYu9dVx4Y7b+u4Sd3w/9mpPf01c6rfjwh239ePOV3H/9mpP301c9IHjwh23
9ekl7vh+73P048T1c3eJ6+fu4qf17yXuLA/i/vBz9OldP9yPuHDHbf14iTu+
n1z2N/8+xfXzPYjr53vgp/X7Ja77etvT13dd9DDi+vuV7X1xHaDEdb9ve/p9
4vb7k9e4/T7kb/r74vpAievrALaf3/ZNnCnu/M/l/kziwh0X7ri+PmD7ev/g
WhdOEbd/nui6cIq4vm5ge64bELf3lWvc3j9+08/L64zrftD2s/vXy+dGv/cZ
9WLVub2OnG/92x59ao5+NEffmaO/zNFH47i74OiL8Xj2wanP43EeglPfxuM/
Bqc+mJO/zcmv5uQ/c/KTOfnDnPNtzvkz53yM5y33j/fbPF3l38fzfH7u/Ta7
L/xPp+G9zP0Jd98Ed18DZx+auy+AW7f3uLvg1r19PPvg1o19nIfg1l19/Mfg
1i1w6wq46z7cdRnuugl3XYO77sBdF+DO233eTsG9D/t8LvH/51feT8t1gon3
/bQ8l+Dp08v2HK5nL355y92/257+Hf99X67+4fbvPt329On47/t79Q+3f/fj
tqcfx38/J6t/uP2777Z9/V2/yX8/b6t/uP27v7Y9/XVf3134r887q/7dR9ue
Phr//fy/7+O8eW5a9e9+2fb0y33/7MM/3P7dF9uevhj/PR+97+Okzy3+55fS
/9qe/rfvz0P4hw/3f+lzbV9/Z3Dy3/Pj+z5O+tPi3/3s0P6mP173/zH8w4fn
q/Sttq+/Szj57/n6fR8nv9tb/Ls/tf3815t+d/Lf8/7qHz48v/E7e5fRh+K/
14/3fZz8fk3x737T9vSb+PfvtmDffvek+Hdfafv6ux+T/17P3vdx8jzt4t/9
o+3pH/Hv5z1i356XWPy7T7Q9fSL+e31938fJc2mKf/eDtqcfxH+v0+/7OPke
bvHvvs/29H347/V+9Q+3f/d3tq/f91rz22kjv53C/5xm4n7Y1Z4+Dv9df7zv
+/B1+ne/Znv6tZ4/zxv58zzOz9HHXIbenp6v8u9/zP5ZdVDfD6t/26NHzNER
5tR/c+r2eDy74NTJ8Xj2walL43Eegi/v/25w8rc5edecfGlOnjOvz8mpvD4n
p/L6nJzKOcfmnD9zzs143k7B2afj+Vz326zDy7+Px3l+7v02v6+b9bx/W5cv
Y3+2c3m9P23P/jRnf5qzP83Zn+Px7IKzP8fj2Qdnf47HeQjO/hyP/xic/WnO
/jRnf5rX3x+rnP1pXp8TXDn705z9ac7+HM/bKTj7czyfua+8D+dp1Lrl/Ofr
7H7wd+9buPs7+LAvK/vT3H1Qj7sL7r6jj2cf3Dq/j/Ow8f7vBrcehlvHwq0/
4daNcOs9uHUa3PoKbl0Et56BW4f0eTsFd93v83neGE9y/j7l2X/05brPeIWz
z+DL+175/LZ+9r9vua8/2J7rD/hnv9o/3P59/cH2XH/AP/ve/uH27+sPtuf6
A/45P/bfricU/77+MLS/fu3rsgv/cPv39Qfbc/0B/5xn+4fbv68/2J7rD33/
7MM/3P59/cH2XH/AP/nF/uH2P2/7cv3B9lx/6PvzEP7hw/1frj/YnusP+Cff
2T/c/n39wfZcf+j7/xj+4cPzVa4/2J7rD/gn/9o/3P59/cH289u4fsU/edz+
4cPzW64/2J7rD/inHtg/3P59/cH2XH/Av38fFnu4/c8v5fqD7bn+gH/qk/3D
7d/XH2zP9Qf89993WP3D7d/XH2zP9Qf8Uy/tH27/vv5ge64/4J+6a/9w+/f1
B9vPf71+xT/12/7h9u/rD7bn+kPPb6eN/HYK/3Oaie+55vUH/M///Dr9w+3f
1x9sz/WHnj/PG/nzPM7P8flkXn/o+yf9t761+HdfaXv6x56fLzfy82X4t/63
fdWh/+EV+2rVR32/rf5tj94xR6eY1/sNK6/3A1Ze79fLce6DUz/H4zwEp16N
x38MXu+3qrzeD1V5vV+p8no/UeU1/1Ve78epvN4vUzl5wpzzPZ63U3DO03g+
zxvjSe59OA9D85Tjv3zufTi7L3w557lv4dbncOtquPUw3DoWbv3Zx7MPbr3X
x3kIbn3Vx38Mbj0Dtw6BWz/AXffhrtdw11m46yOc/WnuetTn7RTc+b/P53lj
PMm9P/s4l3r/X3/Wr8fRR06cfQaf9fUXj285/SLc/aPt6/OfJ//1ul71D7d/
94+2r8+FnvzX64PVP9z+3T/afp62m8/DJ//1OmP1D7d/94+2p3/Ef71eWf3D
7d/9o+3pH/u678M/3P7dP9q+Pnd68l+vn1b/cPt3/2h7+se+Pw/hH27/7h9t
X59TPfknT9k/3P7dP9qe/rHv/2P4hw/PV+kfbV+faz35r9eXq3+4/bt/tD39
I/7rderqHz48v6V/tH19Dvbkv17vrv7h9u/+0fb0j/iv182rf7j9z2m09I+2
r8/NnvzX6+/VP9z+3T/anv4R//U6fvUPt/85f5X+0fb1OduT//p5QPUPt3/3
j7anf8Q/9dL+4fbv/tH289u4+Tx88l8/n6j+4fbv/tH29I89v5028tsp/Lt/
tP3815vPwyf/6AD7h9u/+0fb0z/2/HneyJ/ncX4u/aPt6R/7/kn/cPt3/2h7
+seeny838vNl+Hf/aHv6x74/0z/c/q3/bY/On/LF5SPy9qqPej5f9ZTt0Tvm
6BRz9IU5usB8eb/74NTh8fgPwal74/Efg1NnzKkP5uR1c/KxOXnUnPxnTt4y
J9+YkyfG83YKzrkcz+d5YzzJ2b/jcV72Oq55ynV5/Nz7cHZf+Pz7P1/kvoWz
P82tq+HWw3DrWDj709y6sY/zENw6rY//GNy6CG49A7cOgVs/wF334a7XcNdZ
uOsj3HWtz9spuOtIn8/zxniSO9/2cSZn3/329f/6J2Wf8Qpnn8Gnv/23n66c
V+zZf7aHY7+sm/bry5W7T7Q9fSJx2d+OC3fcdh5KXPePtqd/JC7nx3HhjtvO
W4nrvtL29JXE5Xw6Ltxx23kucd1v2p5+k7icf8eFO27LFyWu+1Db04f2/XmI
uHDHbfmoxHV/OrS/fiUu+ctx4Y7b8l2J677V9vSt/dwdIy7ccVs+LXHdz9qe
fpa45F/HhTtuy9clrvtc29PnEpf87rhwx231oMR1/2t7+l/iUj8cF+64rd6U
uO6LbU9fTNz+O9lrXLjjtnpW4rpftj39MnGpf44Ld9xWL0tc99G2p48mLvXV
ceGO2+pxiev+2vb018Slfjsu3HFbvS9x3Xfbnr6buOgDx4U7btMTL1Uf43eW
sh8nLvrDceGO2/RKiTv6nZpqT5/e68Jpoy74OZrSQy+Vt+N5ydm/Exf95Lhw
x216q8R1X297+vpej84b9ei8UY/O4zoY34vNfr/v54zr+8z7/sy4vg5ge64D
9Dp4uVEHLzfq4GXEnc3iftu8PtDPUcaFj89Rxh19bljtuW7Q6+/jjfr7eKP+
Ph7X/eins++b8se/e3mTZ14+Dt0Lx7/t63N0Kkc/mqPvzNFf5ugjc/SLOfrC
nPpvXp8jUjn107w+h6Py+pyMyqkP5jV/V05+NSf/jeftFJz8MZ7P88Z4knM+
xuNM7v02PSfvheap2vf5Xv++fJ/4cddRX+X+hLtvgruvgbvvgLsvgFu3w62r
4exDc+tS+FA3Fh1nbt0Fty6CW7fArSvgrvtw1+U+b6fgrmt9Ps8b40nuvN3H
mdz7EM7+2l2vwvNnT273E69w9hN83scvVr7o/ZW7f7c9/Tv+W39d/MPt3326
7enT8c/+tn+4/bsftz39OP45J/YPt3/33ban78Y/583+4fbv/tr29Nf459za
P9z+3Ufbnj4a/5x/+4fbv/tl29Mv4588Yv9w+3dfbHv6YvyTj+wfbv/uf21P
/4t/8pr9w+3ffa7t6XPxT360f7j9u5+1Pf0s/smz9g+3f/ettqdvxT/52v7h
9u/+1Pb0p/gn79s/3P7dh9qePhT/1A/7h9v//FL6TdvTb+KfOmT/cPt3X2l7
+sqe304b+e0U/t0/2p7+Ef/URfuH27/7RNvTJ/b8ed7In+dxfi79oO3pB/v+
Sf9w+3ffZ3v6vp6fLzfy82X4d39ne/q7vj/TP9z+3cfZnj6u5//HG/n/8bi+
lH7N9vRr+He/1s7py/RvHW579Pa0Dr/4gE59EnoGPhx/sbcf6xZz21uHmNve
usLc9tYJ5rZ33Te3veu4ue3HdXnltnedNbe966a57V0HzW3vumZue9cpc9u7
7pjb3nXE3PauC+bj/Xba2G+nsHfeNh/vz/PG/jxvzE/a1/ya+/lyYz9fbsxn
2sPH+//xxv7PPOO8tMXn/a19lOfoycY5Wv7/f3q95qn6HPuJk4/657ff7b9X
+/SjW+6+zPbzMG6ehz/5b/1U8Q+3f/dltqcvwz/5zv7h9u++zPb0ZfgnP9o/
3P7dl9mevgz/5FP7h9v/8ve1L7M9fRn+yb/2D7d/92W2py/D/7LP7oV/uP27
L7M9fRn++/c6V/9w+3dfZnv6MvxTD+y/9VnFv/uyof2bi1v//Xudq//2e7XF
v/sy29OX4b9/r3PXx8nv1Rb/7stsT1+G//69ztU/3P7dl9mevgz//Xuduz5O
fq+2+HdfZnv6MvxT/+wfbv9z/ip9me3py/BPvbR/uP27L7M9fVnPb6eN/HYK
/+7LbE9fhn/qsf3D7d99me3py3r+PG/kz3P4d19me/qyvn/Sf3tuUvHvvsz2
9GU9P19u5OfL8D+/xPNyvht9Wd+f6R9u/+7LbE9f1vO/78/67i0f1pe4j3K1
py/Dvz8Xw759DlX8uy+zPX1Zry9PNurLk/H4S59lbl0Btx6Au47DXX/hy9+P
43FGvXsSdQru+gJ3XYA7n8Odh+HOn3DnPbjzVZ+3U3Dnhz6f543xJPc56uNM
7n0L936zrh6v17IOv/PZqm/r52sTZz/Bl/excvQs3PrW9uhb/DddWvzD7d/6
1vboW/yzv+0fbv/Wt7ZH3+Kfc2L/cPufp73oW9ujb/HPebN/uP1b39oefYt/
zq39w+3f+tb26Fv8c/7tH27/1re2R9/inzxi/3D7t761/fw23lzc+u+/V736
h9u/9a3t0bf4J6/ZP9z+rW9tj77FP/nR/uH2b31re/Qt/smz9g+3f+tb26Nv
8U++tn+4/Vvf2h59i3/yvv3D7d/61vbo257fThv57RT+rW9tj77FP3XI/uH2
P7/E7yumvu35079ntfJhfo7fT0h92/dP+ofbv/Wt7dG3PT9fbuTny/A/p8l4
rmHq274/0z/c/q1vbT//9dWl8v/jjfz/eFxf4ntIqW/x7/u72jl9mf6tb21f
7/NZ68uTjfryZDz+omPNXfe77joEd53teugYfFzXnkQ9qvqp1hG48z/ceRvu
fAt3noQ7v8Gdl/q8nYI7D/T5PG+MJ7nPSx9ncu9PuPeVdex4vZbrwz8pOrN+
3vSTog/hUxr/vaef9ufz87u6Re/ZHt7/36ddZ75YufWk7dGTxGW/Om7ThyVu
058l7jwtRWfaHp1JXM6D48Idt+nSEtf60/boT+Jy3hwX7rhwx7UutT26lLj9
eQhr3PY8/xK36dgS13rV9uhV4pIvHBfuuE3flrjWsbaf3/abi9u4/fkJa9z2
/P8St+neEtf61vboW+L25yqscdvvAjzT+0IPl7jWvbZH9xK3P29hjQt33KaT
S1zrYdujh4lLvnZcuOM2/VziWifbHp1MXOqB48Idt+nqEtf62fboZ+JSbxwX
7rhNb5e41tW2R1f3fH7ayOeniAt3XOtt26O3iUu9dFy44zZ9XuLOyxi/T/5p
6PBej84b9egccZtuf6F6Eb9L9mno876fMy58vJ8zrnW77dHtvQ5ebtTBy4jb
dP4L1al43vmnoef7Ocq4cMdt+v+F9nk83+7T0Pm9/j7eqL+PI27rC1z343kG
n4b+J66/x0Fcf48DP61fKHHdF9ievqDX/Scbdf9JxIUP32/R/+bWP11/HoOP
9cOTqO9w11+46yPc9Qvu+tL17sPgzs9w588+n6fgzj99Ps8b40nu89XHmdz7
E+79Y/0/Xq8ny+9ivFp1Na9w9gF8WZ+VL/V25bPbop9tPw+D3zd5tepb+4fb
v3Wy7dHJ+Gdf2j/c/q2HbY8exn//3vTqp/3uVfFv3Wt7dC/+OSf2D7d/61vb
z2/jzcWt//496NVP+92r4t861vboWPz37ztrnPzuVfFvvWp79Cr++/eaVz9w
+7cutT26FP/kEfuH27/1p+3Rn/gnH9k/3P6tM22PzsQ/ec3+4fZvPWl79CT+
yY/2D7d/60bboxvxT561f7j9Wx/aHn3Y8945/MPt3zrQ9vPb4PetXq06bbx/
0r/1nu3Rez0/X27k58vwb11ne3Rd35/pH27/1m+2R7/1/P94I/8/HteXeA5W
6jT8+/uz7Zy+TP/WY7ZHj/X68mSjvjwZj7/oK3PXtV6vXY+eRB2BO//Dnbfh
zrdw58muZx4Gd16CO590XXIK7vPb5/m8MZ7k3ud9nMm9r9o6lv1gfTVer0Wn
33/0W7frXa9TTpz1hi/3s6x8qbcrt/6xPfoH/+wb+4fbv/WP7dE/+O+/k7T6
gdv/PE1F/9ge/YN/9rH9w+3f+sf289t4c3Hrn/Ng/3D7t/6xPfoH//33nzTO
a27/1j+2R//gn/Np/3D7t/6xPfoH/5xz+4fbv/WP7dE/+Cdf2H/TM8W/9c/Q
nt9xu/ZP3rF/uP1b/9ge/YN/8pf9w+3f+sf26B/8kwftH27/1j+2R//gn3xq
/3D7t/6xPfqn75/0D7d/6x/bo396XvXvIK3c/q1/bI/+6fsz/cPt3/rH9uif
nv8fb+T/x+F/zl/x3NPfCv2Dfz8npJ3Tl+nf+sf26J9eX/x9hZUPx3/H3z9Y
+bju+H7/lTvP93r8cXDnVbjzYdcVD4M7/8CdN+A+721+Xif3+erjSe793MeZ
3PsH7nW3zhmv15Pnf//63f3bl6sO4RXOusKXv3/vlnfd8b3QIbbf4ugT4vb7
aFf/7TkjH5Lbv3WL7bc4eobx9Pt39X7RLZ4HdEsZD9xxrX+G/gd8/uu1LmKc
/X7idTzteSsfknuccI+zP7dlHY/1le23OLqL8ff7ntdxNh31IbnHDx/O8+3z
ZS6Ce5zWdbbf4ug93le/b3sdf3uuzYfkfl9wv6/+fJyL4H5f9blOdfzWmbbf
4uhP3i/51+8X7vcL9/uF+/02P+X99v724+B+v3C/L+th229xdDLzQL3xPMA9
D3DPA9zz0PyUeej9/MfBh+t++/tAD4L7/VrP236Lo/OZH+qu5wfu+YF7fuCe
n+anzE+/rvFxcM8P3PPT+osyP3DPg/sU229x+hfmDV3ieYN73uCeN7jnrfkp
89av+3wc3PMG97zBPW9wzxvc8+O+zPZbnH6N+UTPeT7hnk+45xPu+Wx+XDdf
53zCPZ9wzyfc8wn3fMI9n3DPm/tT229x+lbmGX3seYZ7nuGeZ7jnufkp89yv
P34c3PMM9zzDPc9wzzN8uG9vP28+Bfd8un+3/Ranr+91OecfPq7LOf/wcV3O
+e/XeV2Xc/7bdYMy//1+XNffnH+4579/rn8K7vnvnwet8+zrHuNxJud6COtC
H+h1gXtd4F4XuNel+SnrAve6wL0ucK8L3OsC97rAvS5wr0u7LuRz8fQy1qWP
Z+W+jmT7Lc71pa7rcr3gY12X6wUf67pcL/hY1+V6wce6LtcLPtZvuV5wrxfc
6wX3evXxJPe6+HrdePzJZ/evLnXd43GsI9zrCPc6wr2OzU9ZR7jXEe51hHsd
4V5HuNcR7nWEex3hXke417GPJ7nXsY9z5fNL/P7S97ReybmOyvr6ucrYt+f2
fkju9fXzlod+yvr6ecvmXl8/b9nc6+vnLZt7ff28ZXOvr5+3PB5Pcq+vn7ds
7nX0dWzbb3Gub/frlk9i3eFed7jXHe51b37KusO97nCvO9zrDve6w73ucK87
3OsO97rDve59PMm97n2cyb3ucK+vr2Pbvr9+/fn8Nq9f+btft/7d/Df5+U2v
y/f/fh58WedfBF/m433w5br93wRf9tG3wZd1+PX4/T2789yc53CYL+v2UfAl
7j74cj6+E5zPl8yX39U6Bl+ee3Yv+LLvLoL3c+Z1eBB82dcPg8+/7/XlJ8H/
pJ2nlU+j/OWHvz1f8sXb4Mu8vgu+vO9vgi/jeh/c+wW+3Hf+bfBlPn4VfNmP
H4LPy/Ni3Uc97i4434Mdj2cffNmn3wm+jPMQ3Purj/8YfPn7veA9v3u9LoJ7
3/V1vB+853ev78PgPb+v/KX2I/uT64Pwadw/jOuJy37847g+u+7/5Xl/K59m
98/ievd6jpbvc658Wr2/iM8J1vO4fM638inqX8XnKOu55vMh+HSf1J/H50lL
PvnL+JxszRvLdfmVT/v1r+PzvzX/zNNT8tA0z8f4/HLNY8tzXo4t7u+Wz1Pr
fNb76dv6fv9u7OdpGJ+W+/vh5Nv5+7Zv1/MyzfoflO/3wsnby+dS67mbZvEH
5fvDNe6U/+dlLHVgivpH5bk5dT7r7wTUuH9YnlMJn/dn+d0COHVqdu96VX43
sc/nr5d6W+rect1r/V3GPg83efDq2153rvOj8yT5dN5HJa9Ov3fz9Prvzrfz
ObrOy87P1Pd5v5Q6v1w/+uZz53l0wrz/i16Y9/11nXC9QG/My1Z0xxz2zdvP
XXesT9A71idw6xO43z/c+gRufQK3Pun+d8GtT3rcfXDrkz6eu8GtT+DWJ3Dr
E7jzVNeVD4Jbn8CtT+DWJ3UdR8/B3nqu9dbzq7eeU731POqt505vPV966znS
W8+L3nou9Nbzn7ee87z1POet5zZvPZ956znMW89b3nqu8tbzk7eek7z1POSt
5x5vPd946znGv+m5xFvPW9t6fsXW99q27sfeun9pqx/c4r4+AN+6zuDrSPD5
ZXDdydcV4VvXJ309ucUdXH/25wXwrc8d/LlPizv4nMif08Fnt4PP9djHfH7a
4g4+b+U8dH26/Tk452rRHev1ja37DXzfRVv3wX0avl+lxR3c3+L7eVrcwf0/
Y926fX+U7+NqcQf3ffn+NPjWfW7L63p/XYv7f7lPb+v+uq373LbuK9u6X2vr
fqet+4K27pPZuj9k6/6Hrc/xtz533vo8dOvzuK3PfbY+R9i6/rx1fRK+dZ1z
6z7erft+t773tPU9KfI2nO+nT1FH32ff+v67n2vEc7G2nqNFfYHPL0/z9ziW
c3Bn83mzf9vn7Q/j3tl+LpPnh9et7xlt3Ze7vG5d59zmv+l66d9d9174/6/X
vf8P4hb4Ag==
    "], {{
      {RGBColor[1, 1, 0], Opacity[0.5], EdgeForm[None], 
       GraphicsGroup3DBox[{Polygon3DBox[CompressedData["
1:eJwtk01PU1EQhof29va2sFATwRYltBs1Bo00YCER3IkLNaI/QBEFTITWr4Wo
RALElRo1QWMlJurCtbZF0R17g8EP3BgThYA/QE2E+oxzFk+m586c+XjnNNUz
1D0YEpE+CMPBqMgAHII0jvWwAVJxkReQhoVAJBcT+YJtrhZ5DBmoeCKLsASp
GpFRSMNOfFOwC85yrxuOwkiVSB7OwSDnD+SbD8zq+WNg9de5HpqJ2w0ZmKXX
1zAD7/C9gbchq//D9aD1tY9GOEa+75CN2Xxf3Yya45XLs5l6kyDQBu+hHb5x
fxzGakwD1aIxbn6NywY2R87NkuScgHqoRC2v5qylp4qK7Fk+zTsBA3zqhzMw
R1wJytBZZTPrvG0+9aDdWT1nfZt7xs2+Sq2/sAYnIiLHoQe2kXcrbIdrnK/C
CExTI4MeBaxHjd/4/0CO/oYgDw3MeYGY8xDmdwg8WOYcwa5g98RM36zb7RG3
3y1xu+O5HJrrIrZJrCftR/VYc5oksJsgCU95Kw1o8wxbi3sj1Im9I31PTUrY
7mj8HFqUoOzbPb3/BC6hSy+cgryY1qqzxhZdfEtgO9N9tcI4+o3BDc+0UB30
m/omdJ/cmQSBhzANBd/0GHaaaM2Tru6DiOmumj+n17twD7pIsR8OwCz6F6EE
e8k1Dx2+xd5x8dXuPxoXeyNF904+EzdKXwvYTnwdsE8s30uXU3vsilqfj+ij
FTuF7ePbaeiHFr4lod43v8YVYJiil+GK7opcq1CBFWosw0+4HrVcmmcHjZZo
shg3q+cy9hZxN+G2WJ2Eq3VfzPf/u9i+69ysITfvYTG9VKtKxHag+uub/eXe
rWqgWnzSvQT2vvVt/wOpC5Of
          "]], Polygon3DBox[CompressedData["
1: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
GincpCjuTLjDgA/8oOfvUkhv6rucQ/TsLFwrHFYUd3MdhI5FcUfXw3c/yIis
3JU0sJzI10bPtgJ3JNyVIAfytHEcPVsVxR0h+nZ0fYeYfzvXV+Q7qgLza+c4
70mU2i/4A7mv8L4X+Q+33boWxX02997csXG3lr8j7+W98NGm9TaNNO7g+7gM
Zbl35w6Ouzfu37m3v8G0/J08adzVHWf0NQ94cdbNeXrjgjjz5p2CG82jsmXF
17dY5iNtV+jocpRt3t1p3KFzp8VdVlWDMPdeVaxTT5c5yrT+rpO6eW+DO1Pu
Sqsbg8wT3uxD2I8MFioLJYVh8yPd97B9Ofd1fDBXeKMw7v2573/dNMLc7b8k
vFwY9+oLHJ5WGHfl0LjD/Mh15vdCxFdbBnjPK4z3EKjjBfOEF3e9L5pGeL77
4Uxhhvtjp8K4q+Ou81qPCy+5TBf341dcprfHhJedp5vHhGmmdbdc3N0OtXy9
XNf0whgvejo8zWVfs02wBXepc0wjzN3mq6YR5m4yP2ZUL4z5bLDrqmJ/MGYw
dpwk1PCTOHe1J/vJ3e2pjlc3v2HOn3+ngH3jac53t+nEGYNn2SbYhrGPsZ29
Tj/b7AXbvat1x3bc8y+x3ui/2D6e7jxLTJtp3stcZrZtgO7cx06yv/Db5ZZl
ttPecdlZDi+zTK86D3MI+2raDG2wvzHXPmDNUCykCmPuY25kz02bX6a5Zmki
9tzcQdXy/h36cbb98kTcJWE79trcKSXNE14HOR++4k6J/KfZ1pTjbqqCeJ4u
1CyId0qKCoMHZZnPE0JBYcz1zP/0Nd6vYS492mHez8rPvYT3K4x5GVq2MPos
fZW5Ly1kCmPuO9S8i1zXAbZF2mnYZG0i9uTMw8y/GfM83DxOtfwVPAetScRZ
BGcfXyZibmzjdkT7ucZtqJ/9Q1um/zBP0tZZw9Ef5riNXe/wqy6Tb+PcAX6Q
CB++7jI3mOdst4k+9gvyIBf+qSwZzxTO4tzZPsW3Z/s8CbnPsd7IX9P5K9s/
3C3SR/Aj/qNPEYfOXSR3hdUtJ/IhJ/KSj3T6MOnk426RdkH7gE78MtbBrHvZ
JwpLEvFOFe9SLU7s4ck96L3CzmLNqcJQoaOfxHcLtwp/C/8Iu4TtwkXCn8Jf
Qn3hDqFQ+4qEcLvCtYWfhJ+Fc4XNwh/CNuF3ob2wozjqpb6t5gffC533b9dF
mXZJlRFuEgYJHYSOwmDhZqd1cJg861l76Hm5sEHhsXqWik85YZzCP1g+5Dzb
euywXOhzi/KsEb4QhgoXiLbFciLfj8IvwiZho/X8VTjP+o4VDpQtDhAepk6h
fCpopD0iHJQKGmmjhX0ULhNGKfwAsipcKowsDh7w2l94SOHhQkrhYuFuhe8S
kgoXCXcq3DYZNsNWA5NRhrL7CWMUflDYNxV1jrbcyP+bcL5122xfbTId/S9w
Oj7G1//peVtx1EndtAHaAjqgCzqgC3VSN3VS94vCy+hsn6ADuqADumyVz/5g
XSbZS+zrTsIQ+/xIYZQwWjgqGe8d/ivsKtrzTuY/rAeL4n098o0RjnH+HkJP
4U7hDuF31rJCVuFMMnjsMo/8O3/w2lEU70AeY34PCRWS8Z7m38JfRXHH+pOw
kbWl0gqFP51WpnA5YaTlR4/Dk8ET3tuL4v3K5xyG57OWDZtgC2Q8NhltmrZ8
nOUYazrydLeO6Ha7cJBwndBbKC+0FloJ1ws3CG2Ea4QBQn+hi9BVuE24VbjW
NMK3OK2bMMx58E1n9xV8dLV5wutGp13rskNdtrtlG+a627qtDrBsV7ssMu5v
fSizXzLaxjahNBltpLx16yUcaPSyjw8wepoHvPaxDuhUZp7dLde+RjfnIS91
4UN8R530SfpmTrhf4XuEdCr6JH1zhJBJBY20BcKVCjcT5il8qZ5NhKbCZcJb
orXQs6XwtsKvCo0UbizMUXiGcLHCFwovue9cpHB9YRr912n1hPOFK1LBD75v
FEdd1N3cdSJDM8vwusJVhY+K4+y6mvCB8L/iOKv+UHhUODgVYxZj12PCIamg
kTZXuNz1Ul/DVMiPHq8URx3Uhd6zi0Mv8lMO/ZAd/S6xDujVQJhZHPrxJA7f
VywXZ1pdUyFfV5+tc7bVTegoXCu8r7T3mD8U7iR0FtoLK4sjDv1d6949Fef4
H9tXVwtthFbCUtGu0bOtsMx24qy/hu3VJRXl4bNKWFIc5eGD72fb5+iY9+Wl
9v0l9s2Vrqu520FrYWFxtAeexK8SFln2rta1s/VEX+RYVbzHJp2s6yrriJ9P
ECoXR5lVjr/nOPTjhfnCYuuB/NSJDSoIR/tJHFtUdBujrR0uHErbcJt4w/Gj
rMMil8/7dH9hX+EbYb2wQVgnTBWmu92/tJcN4HOE63nLdOL3CtlU9Dn63n1C
SSpopNFH6avQ7nNdzOEbXWct4fviWBewHnhNeLM4+snrDs+3LaB95/yUO7M4
xh7G1+HC3clo03Nth4Osyyy3A3T60jqj61fC18K3whnC6X5+63rgz53aF8LJ
wonF0Tc/K457JfrCacJa86H8iuLow7QD/E87/cR8TrTdsT996QBhjcvD5xTX
84Xppzgffbm885d3fI71m2WbvW4daTvvFEffWuJ2slw4rjjayzuWcaXzfGab
fGWdjnN+2iXtkXZ/jfshbeg3jcWbhbRsnUpGmDmcuRsaZ0OfCZ8XxRnRW8L8
oviGg285livPCqGPcKXQUng3GXTiyxyH3jwZ37rMFd4oim9JeM4rim9G6nit
uUhYnIw1ZyNhvrBAaCy85Tj0S5NxtrVUWFYUZ1yLHYfOu+V8yzJHeK0ovmmZ
7Th0vnlZ4Pqamv8C0RYVxTv0vEvPWdy76FkUZ3L1nb7Y/C+0PRY4/2vW71zX
hx5LhWbWZ3/tWQ4qiPeieR96qmgvC+cItfwkPk2oLXxi++MHzg6Zxz8U3vd8
/oYwT2goXJKMs7ZVwgdFcfY4U7RZQl3hvGTY6V3rhb0+FlYXxZkfZ391lGdG
MsqdZ7mX2o/N7Wf8vVLo53rn2S+XWiZkW5WM9RDrlo8sM7JzFvqR621pOYm3
sLzTXH8d67/S+qBXU7fDNUVx5pg/yyT+ZVGcQU5RmReFs4QzkkFfWxRnlqQ/
7fUO6x7ex6mkPI8KjwmVhYnCc8KpwsnCzUWxB2LvM8R84Pd1UZyN8q3CLLcr
2tM484Mv68mawuRkyIU8lFtXFGeqHS3DH16T8s3St66PejnjPdXyTBJOS8aa
7mPbFNvyjdMW91m+CeK7gl+FTUXxTQFryM+Fz5Kx3mdd+D/zgFd1YbwwQahh
u2G/qW6P7AE/EVYnYw/0pOtinOD7ozHCD8KPwsPCScrzjO14suuk7k+Tsafc
4PxjbM8Jzn+S68cPTwhV7I/zPT4w7tR1ndTNuMU3FVWc/0mhqmVcbR3RlW8W
2D+wj+B7nietb3XnH2/bY8OnbDNs90tRfPNws2X/xLZ43HX/als/4rzUQV2v
Kc9c4WLhIj/nup/SP8sVxB1BYbx+VrCiKGxey22dvkhfvSAZfX+RbYotF3ss
qGfen9s2VawLNmJPxp6KNjmzKOqkj651HznDPqbe5R4LarptEj/ZbZ8xdLH7
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
wPxZIHH4wo93D14ojnvvctYL/bi74IyMszbuNrgb4cyNs2fu5Llr50yadwqI
Q+dMkzsK3l3gjJOzWs5qOLPnrJ4zG56c5XPGmT9rJc7dAGee+TsGzqTzZ9PE
uWvgbJkndxucMRMvKQ4duGPmrhkdsCd25ewQPZAfPdCHvSR3Dtw1sKfEL8Sh
4x/04l0CzmTzZ/HEebeCM1qevAvyfTLiPInzbsaPCm9MxhqPtd1PyagH/bED
9SE38mOn/Fk29sKO2C9/h8WZYf7slTh+xr/cc3+ZjHdAuLPO+u6oknC873W5
azpOODYVvq2r5wWp8DHvRfB+xJHCEam4F047b8VUvAfB+xA1hOqpeG+C9yeO
Fo5KRdlCh490Gu9GHOM8+5gHZaul4j0L3reoKlTxPSX7SfaV3L0gF/fFL7sN
cqfGnSv3xlOK426M++wThMrWNedwJfPex3VVdd5yrusE2yJr22AT3o3IFke7
ob0gO+93VLAO6M77KCfaBk/T9vQ8Q3iyOO6VuV8+XTgtFe/JcPd8qnCKwwc7
7VTnPUyo6TLP0H71PFuYSLssjjtF9J7itostpnlMKLaPKlrGOqnwJ3593mWw
1TnCc8UhO+/jnGQdCPNuz8mmnem8tYWzXOYc09H1QOt0isucY1+c7zKTaKuW
g/rR41zT0Ye9AO9+8R4Xa3fuLrir+Nl9gzBn7b+Yxj6J/RLv3ox2mL1U/l0g
9l03Oo13d1LFYUPqSjsvc+dDLjNBeLY49EKf8c5PuWRxrPNZ7/NeEO8DdTGN
MO8OdTKNMO8PXW8Z8u8+sY5nPc+7E7xPwT6BvUD+XSfmkZuFm4RrhA7CEGFw
ccwzyI2tspa/s+ukrmGWrbt53el8k+zrEus22X5/znTaQqnTdyb37EN3JAOE
mfOY+5jzmPuYE5kb/0nGuuMql92VjDUJNNLYc7IPYp+0KRlzZFvr9m8yQJgy
lO1nm2Grkc6HLQY5D7a4pTje0+D9jCfsM3xF/0oIT9lvSZfFnryLNta+htfD
9vkg5xlrWjvb+mb7YrDrpK5HTB/sMDzZG/ezrNzF9zGNMPfx15lGmPt6zqjX
Cd8k4x0mziC/NY00ziW/M4007jm472Avvtlh7m+2mHaHeX2djHeONgg/JGNd
stt5Ocvc6jLrnWe3bX+7y65N7nnn6SvPEbe6r3E3tcl9jvD/7NdNDnO/85tp
qy3zZtPucX3UO9xYbx3vdp1rXSd1p91mGWd5t417y/fd93+yLpzP/mGduAtI
2Ncjrcs3brfbPUawT2dO3Wgd2KdD+9k60DahkdbbPsNXvG+x1jzzbb+H+/Bw
91n6cm/npU83KAt5kGuEZcG3Oy3TGtuWtSTnL8jN2MI7c/l351Lu26Ntp/X2
1S63i+8c/se8v3V4p+241rL+ZVutcV1/uO6vnIYMjfiOTfhGaFwS96DrfBbO
fefnft92Ld+XlcR7q6M0Xt+XivdXB+l5eFrzlnCj6aSPFu5nLhV9f+EAoSwd
3+ntp2dpOt5p2lfPA4V+qfjGej/nL+c8D4j2YCreYc2/y0p8TCreseXd2pGp
yEc69LGpeMd3p2V9SHjYMvGe70OWMf8OLjIPT8U7obwLOkLhe1PxTixyIV95
4Xrnu8+63eN81I8c5McG2GI/60q5Q4X+qSiPbgf722hswrtVJXrm0vGOViod
cei880Q5yh8mDLCtjzAP6mFO/Z/wsedjbIrd0ul4h6qKnjWEuxS+PRV8jhJu
SgU/1mFPCU+kYj1Wattn9uLBszAd72Md5Lr3t458G75POvyI/9BjH9PRJ2N+
+D6bjne5itOhJ/oVuS7Skq6TeJHrTKQjP+W4Q2CNON4yI/uhwmPC49hGGOc4
dN7xxqf47I7Unneab1V4cCrej+Jdp6EK35KKd6RuTkUcOu8okY/8twlD7PfT
Jc9J6fA/71oPs215Vxo+w0yHH3RszzvIpLMGe1qYkIr14iTWQcIiYaHTnhHe
EuYJzwrPCQuE+cJE0wi/7bRJLkueKcILwlJhSSrW5RPNs6Lrmiwsdp2TXWaJ
aZWkVzWhulA5Hbpjuzttg4G2HbYYZL3Q7+5UvEt9h/vIPS5zjHUdb9+Rj/5F
P/vNffER4dFU9FHe1ervtsk7X/TjsfYr/ixwfsrRlze5TuTEt7x3how3pOKd
K/jQ1nnnDH4b7FPykBc66fgdf3/hPk9f5R0x2jRx6Lxj1se86ed9HR5oW9zo
cv2tB+WRgTyU4/2vZ+yPt+3jqrY3dj/ebYq2BR37/SxsFn4XfsHGjkP/KRXv
mm7CD6l4R5XnllS8I0v8D2Gby1C2lWmEm5tO+p+uo7nT4M37tBvNn3p4t3Wr
8Fcq3tnkXc6/hX9S8Q4b77Jxr/evsD0V93utnf9vp+8SCtKxh2MvtwO/Cv8J
Oy33FtfT0jy2W+ZW5r3b5aDfJl47hR20VeHXjGzId9DCbwoPEvZROCfcqHB3
IaFwId9iK9xB2CHsFDoKfzkOva3wt/CPsEvYLnR2HHp7oZdQJF7/6dlN2G3+
1NPFfP8VrjX/a2yvXdb/P5dPZrnclWksa6mQEfpmgkYe6uotFCucEq7LhB7E
ofcwr7TLJp0vyzfrmciPDXLOA+8SPcvxzbrC12ciH/mhE99uW2/bqy3tsK9o
M9+7LdI2fxCOlg+OTccYSp+q4LbNWFLRbZw49GPSMaYc7zBjCuUof1w6xtJj
nJc573DPCcwNu/dqC0WeO2hDzFHk+ddt8QiXr+jfJBlinvAa5L52svsgfY6x
6VQ9T0vH3H5iOuLQGbuqOf8pHiPvdB8+3rowljC/Ygf0R48T0jEn5OcG4szL
+bmB+Zl64N/B/YN5j/nuS2Gd8K3wVSr20Z+kYs5n7v/UeUj7TFjj+KfOV8+0
T1yWvf/nwhepODv5xHlXm+dP9id+3eAx4CeHeaf7a+G7VLyzXt981qbiDAZ+
vPP9jeus5/A6y7TG5Si/PhXvvF9m3t+47AbXvc403rX/MRXjUGPXs9Zy1He+
7932vjXfH10O/vRV+hh9iz7M3PiisCwVc+RU4SXhXeEdILuvEFYK7wrnCB+Y
dobwnvC+cKbbyJmOrxLOct7/CauFD4XzHf/AvFY4/KHr+Fj4RKgrnOsn8U+F
C4SLhM/MI8+L+Oeuo6HwpWn5vMS/cp41wlrhUuFip30jrHOe2sJHluNc5yP/
18JlQmPn/9J1rXL+2taXfN8KXZyfsf4xPR9Px5h/o56/Cb8KNwi9hB+E74We
BuH1Qg/hOmGj8KPQ2/jRZSjbX9hsnjeaJ7w3CdcLfYSfzOM62/ELob7tOUD4
3TzgdYuwHVmFocJNwh/CVmGQQXiLMNDYYh7wulnY5jKUHSz8adrN5gnvv4Qh
6ZijdrjOW0z7y2UGW84v7LeLbVfs+53QTRiXDvtiZ+bIsxU+Lx1tg/ZVx3Ho
tfCb93fs8xqWxN6ptn3NXukj4VqFOwsfpsKnpJOPPdV7QlvFrxGWK/ym0ETh
RsIbqaCR1iYdfaiW666ZjnUye6Mz3Vbg92oq2hht5bVU6EgcOmv4ego3SEdb
oz2zLrzQerE+ZC1Y175kTVjT9aE7/XO0ZaBu1ur5PkU59L3ebeUXoZ9lRvar
09H/VwrtFW4nrEjFmrq5ws3SseZmndxK4SvTsV4GhFumYz0NCLdIx5ocEIYH
vFj3XaHw5elY/z2k5yPoiX7pmFOJQ2c9hgzIgg/wBTIgCzzya0h4NU3HfuF9
oUM6dEAXfIpvOwkfpAKEOwqrUgHClHnfYyC2uCodYyQ84Y3P3/SY2TodNlji
cZS80JZ6bJ1qPqT1s61/FvraR4yBjLPMoZxzvyLMTMV5N2fcs0wjjTPk6cK0
VJw/cw4+23nIyxn1yx7DaxgvWYbqLjPNecjLufQM8zzZdc40jTT2lexVaNtz
hdfQG9sKr6djHUEcOusJ5vq59IV0zPlzHIfOXjs/R9APWE9wj8CejT0c9wnD
lPZPOtawt7nd0qZZY7A2Oc552TOwl+Pegj0ce75KxiTzPN66v+x++a71nOF2
vcLhmW4nKx1+xe3gfdt2TirGhQ/NC/u9Z56v2PYfuMwsl/nQtFm2DbaanY6y
0103PNiDsgdin8temDuWydapsn021e2omkGYebuqQZg9axVjinnAa4J5027f
tC8nOIxPn7CP8e3rqThbedV+O8w+RX704IxmusPoMkN4UXg5HWccnHVwNjFJ
eD4dZxoTHYfOGm6C8KzwnPC0+/oTwpPu8/uY37R0nKGwN3hKz/Hp2COwzn7C
5RgbmFefcj7m1wMs49R0nLGUOTw5HWcqrF2Xp2PdQltc5jh01pyL3RdZ6yyx
Hi+k4wwqZdnhNcU6TDb/l0wrcf4XbY+s81Au6T5P32dOZm5mjT7BNkA31rrP
2G4JjwnvWC7W16yNl1pu5F3kOHTW0Owr5qejT1Z0P3wrHXuI/F6E+NvpWIu/
Yn/j9/L28Szb8ADL/Kz9hqzzLQu2WWCZFrvOyvYT8hfYX0+47NP28VTznmGb
4eeZ6ThTzJ99zrRcyMPeYKH1rGK95rvuedZjofOhzyXpmC+ZN5knu3m9+4/3
quzr2N+V8VtzmRhrDtbzoEyMOfvreYBwknBiJtYm5fU8MBNrlH+xUSbKULaE
/aNQWajEXjETNMLHO61UOMF58HuxnslMrMloC6lM0EhjbkhngkYaazl4ZjIx
T7M2TKBTOtaIgHCBaBvSsTYsYh+ciTUiIEwZyiJLOaGKZYInvKmTupEJ2eAB
L/KWCVVdhvA+QjXT9suEzbBVDeFqoZ3PAtr4zICzg5l7+bqD9/74uLqeU4UX
zfM44VlhonCs9UCWo4WjhIrCM8LTQgXnmWgaab/ZJ9jsV9sCfY4xj2LbtqLL
72sdkL26ddvX4Wq2e9a+PM52yjh8rHmlHa7ouorN+xjbvdCyH2m/JRw+IhPr
7pzbDLL/5TaITKyBWSsfYBuTxtjSWuGrMjHG0Iew+ZWZGH+utA+wfatM9LN2
ppGXsfUa+wV/5Ms0y8R4xljdQuGWmRj7qIf8lKO+KzKRTj7GqGaum7qaZ2It
3kDPhpkYm+lX9JXThFMz0XcOE2oKpwsjlKeWnmcL9yp8j3CmwmcId6ZjTrhY
4QszsR5ELvTHDshHv6R/niKcLNTPRP3Iwd4Avz3nNoXPmlhXZG2aiTHp0kzU
QV3sbWjjtHv2NVvcB+g37HF+dx/K2Xfsc2gzlKEs+5x93Y5I22kbIGN+n4PM
+BTf4uP93Oa2WVfkuUy4RJiMX4UlwmLzOci2RGfmvkZ6Ns7E2IvdG5n+uMfd
JuaJrs/ZZ9BIY6y+PBN+nei2dqBteZLLNbGtLnM95KfceI+dh9iX+Jhxb5Jt
ju0ZI16wDowfXYWemTi7Y2xmDO9pOmukTg6TxnjN2pGzQ87ymMsYs2/KxJyd
n7uJ35yJOZ0zxu4uxxqGuY2zRujEqQP+1DPbfaOT62LMukEYmIlzUs4GWQcM
NJ05j7mWOQQ5lnke6mOd0IW5lbNHzhaZmzjTGGye8GLcQx7kYvxDL/JTDv3Y
646gL2Riz3t3JuLQ2bsPV/g+4X7hnkzwvlW4TRiSiXOUW02n7lv0HJaJMwrO
Km5X+K5MnKl87Lx3CHeaB3YcmokzHOxJOcpTjvycsdzhOqmLM1HsgV2YoylH
eeqlPuqhPvRAfs5YkB89OI9Bz5GZOGNB38+tI3Wsdt5RwmjrzDnNKNvgK/tm
sHUf5HLDbZs7zRf+D2TibKaPfYlv+9qnxKEvcFvs4zTa6KHCY8LjwuGZmBNe
dJumbTNvvJSJOay62xTtiXbF2Mu8+LLzkJd54CnhiUzMARMyMZfNE950mLns
LdPGOw9pbwjjLA9y7Rb/h/R8RHhUeDgTfYy+xrhxgkH4+UysPyq4DngeY0xw
PUcb4y0jshaYP/Wwvhij51hhVzrOYHiOtVzIU9l1MQZUsi7Mz29bJ8ZhxoYF
wvxMjBuzhFcyMX6Mcl0P2+cbrOMo+56znwczIQf141fi0PEv88ps84Q3/ZAz
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
8v1nO9sEW/C9Ld+G35UOuZAHHe6zTMiC3A/6XQd+K4NvLB+yjdCd357gXQje
neD72v9/JyId9F9tG/I/bJt+ZZ1vT8f398Ntu/ttA/TAftgRffiOs51l5Xth
vp1t6/Ag+5LvLwfYp4wxa93OOzj8tds8tE2Ma8JG4UePQZscpk9yB7DZYxJj
E/MU8xVnf51MJ/13j3EbzY97As7yODP82WMUfZg1BmeNLYVmuZgzmTuXCy2E
93IxtzLXct55RS7WGu86/2LHr3D/X+4yS923W5i2xGNDS9f3vvvvKvN/z/mW
OkxdrBHaWUf27Ozd0WWrxzp0YpzeYhthK84sObtkjGJsvttrRdaCw71OJA79
Lq8Z73WYd0c6ewy4zWNCD/P7wfbCl3xfPNA+bWOfDzJti+X71TL1tu++y8V4
iq/X5+Is9Rv74Wf7tY/TNtpXG9wuvnZe5nDm0nXWs6v9vs70Tq5ro/nk6/zO
7exah9eb51r7DN/xTTlnSMW5mN+ZA5k7udu+T+P3vWVxx/2i1gXjFX5KeFLo
IXTn7kp4rzTuyb/jbLk07su5c/7RNNKo5wq3Hc6i7lG54WVxh8+dNXfY24Rf
S+PO+k7mzbK4887ffRO/vSzu/rhT3eUylOWu/K6yKDfO9VL/SMXvL4t85B+t
8ChhQlnog17vlsadCWv8XeaNXMh3d1nczf/quij7QFnwhkaYOrh7H1EWeqHP
ROk5ORdzHfP9845Df0ZYgD6qr58wj7W9aBOE8UIN+oRoPW1n7DspF2vws4Uz
hVrmCa+awhnCc7nId6Zpz5gnvPHjCMuJP+mL3Ddwb0GfHG19frTv2Htw11Hb
e5BzlWeq66xl3ujytOvg3POyXLxzwvknuo0TnsBftiP+wU/YE51oO9xpcrfJ
XeVSYVlp3FVyD/qOsLg07iSxEbZqL7xuOun4bklp3KM+XRY0yl6vcD/hLYXf
MA/KzC+NO8L5jlMWXyxy/cjB3SlrYNbCtIknXTc6octjZSEHNMKPlsXd3LCy
uBcZ77ZGWfaKtLm+Qh9hoehvl0Y7HuZytGfuZpfbLj1sh+WmYw/uohdazo4O
w++6sqChxzjLuGAvHd8sjftQ7jbfct3ceb7mNOz6um35tPvFu7bZWy7H3Wg5
+fU2YYiQzQXPN82H++C5wg1lYfc3XM9Cy93Weefb1tQ5x2W4E+eOe5Z5IQt3
rNyTwm+u87Z2/jcsTyvnpxx3tSW52Luyls7lQvZ+tjuyDLH8rEXZ+1BPe99R
U9+ros0RZgozcnEvzX0t97bcQfIO1atOq+txjDmNM3DGM+4luQNmD8Ve6iXz
Ym/2suViDV5m+WY4/SX3q6Zu27Ql7swP8104d8kPlcVd5au2Bfaqax6UpW9e
kIs9JXvFC3PhwxfdB2kbnEsMLYs7Xc4nBtte2I39Uyt8mou9LmuB/z9jN53z
+vwemjN5zubZg7V3mXxe4h3Mg3qG+t6eu2HshL2Y+7kzaG7e1NXCbWqI5yDm
ItYBjD+MQ6wHWAewHmCuYz/J3Qh7AeRCHvgShw7/6bYHdjnPOlAf9XLfwZkE
Zwx1qCcXfb+3ZO1VFn2PsaxpLtYu7GfWeM/DvMl8Odm+w7dT3HbezMW5Bnvz
Nxyf43YzyPrR9thDN3Ae0i6yH+E32WPsFMkxuSzabDm3G9oPe7d9/GRv2bks
4t/apsjMfU9T69rCOsAHfuzL6APMI8wnL1r/OrbHdNuLMwjOlHin8GLbYL5l
RnbGHey11GMS7Yz2xtqAMb9+Ls4u5rr8TNsif9aTP/Oo7/ba0PVxdsU7jPu4
L9H2OXPDluwV82dH+In5cbnHyvlOf9Mywof9aWPzY166zHo02MtG0Ji7LnVe
/MzdF+2c9s46lPXn/wHngDjB
          "]], 
         Polygon3DBox[{{1746, 1747, 1748, 1597, 1594}, {2974, 2975, 2976, 
          2866, 2863}, {1405, 1406, 1404, 1377, 1378}, {2073, 2074, 2072, 
          2045, 2046}, {528, 529, 527, 510, 511}, {914, 915, 913, 891, 892}, {
          247, 248, 246, 234, 235}, {2414, 2415, 2416, 2265, 2262}, {71, 72, 
          70, 63, 64}}], Polygon3DBox[CompressedData["
1:eJwt1FtMzmEYAPC3VM42baRI9c1xZJTysWFubJmz4VIiYaNy2pI5Z8zxwlYS
c9y4cqHvo+KuS5s5HzanSNi4Nx38vnHx29v7f/7v87zv83+/8soqV25PDiEU
kMbi/iFsooJynnh4j59JIfTQSzftxCkWm0WU2VxNDeEyN8WaiXGXA+zgsJxH
OEod76x5QytLzJeyiBJaPOswdtPDHw6xmff2+p0ffKOdNsr7hbCXWmrIJ4u1
KSFUUsV2RhKYMjiEqeQzjdZBzsvYISHkkEset8VuctDZ+lL/Navb+IdDNJrH
iNNMEaO5pbltPKCVPZQzXIoRjCQdqYOyoWqgPrGTXbwbEMJbUpxhFJlk8FiO
h2SrcZEmGqhnDC3WzLI+ykwKue9ZRI2JTGICWWQkeiiebAP9SGKb+Sq61Oql
jx5uc56x3skhlzxqvLubYlawkuU8UfMeC/WolPWsS/RQ77soTuyTKLM54dse
49dQ5/JeE5dIomRYCPvV2mAsYz3Z5imMc7dmUMB0UvjtXHfFmokRZzwR0lhk
/UHjPmpJpVedTP3LYhQXzA+QbW8XaaKBesZQp8YZznKaarbSKBYjTjNFjOa5
nC95xWsWMI+nYs8ScV4wlzls1YvPfOEjH9jCHTVaaOU+DZxjjZ5/5wdf6WQ1
h93hIxyljvFEuOLiXeM6NyimkFK5NrOFCpZRwiPfrJOvfOE41XySq4NTenqS
E/4+RtSaecxnLvlMpsz3qaKaSuZTyAp3egMbKSNCOkIh8X/K1QtF8v//CYa/
txaU+Q==
          "]]}]}, 
      {RGBColor[1, 1, 0], Opacity[0.5], EdgeForm[None], 
       GraphicsGroup3DBox[{Polygon3DBox[CompressedData["
1:eJwl0j1PVEEUBuDjAhFx78qiKKjhw2WDfBlAaiCxVhNDRQIkECpwl3+AGDX0
SsMfEAIFsVb5AWpsiLHnowBjolZK4zPZ4sk7Z+7M3jlzt3u++qSSi4gR6hjO
jBmlpRCxavKqHOWa5/dlL++M78rP+Ygv7FufV3+tj8hkH+vW9MtLLDZENMmc
3CRYbYpYY9v8a/vfsEGHeutCRKecUc8yR4keyuSoo573fOAjw/aUUz/yonM1
ssQvfvOH4mW98YK/6n+c81L9igbjgv3TerkiD9XHHPHMO9Z4ntXqNH/CKWf8
yNd6TT038t26bxyks6t/OltZ3kp34eJvyyEemL8n99zHrtyhmVP3X5QDLFgz
KNuZsvemvJHWGrelsXe00Z6+BRkF3rLFNg95xOOsdu/p/pv1PJa+k9/XcnSl
7+X+u2VrukdnuC7H7Zlgkjvpf2BNSS7r+SmfqHhWZYX/hWM+vQ==
          "]], Polygon3DBox[CompressedData["
1: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
+R8HGZQx
          "]], Polygon3DBox[CompressedData["
1:eJwt08tP00EQwPHpAwt2d2kRaYsReQqKpBSNFyOa6MWER2LgYrQaGhITbet/
UPGBPfv4C0xqjfHSqBcFbxxQ4UgkXDiUBGoMwsXHxW8zv8MnmWlnpzu7266Z
/NWcX0QG0YA+DDuRJM4Rn0XAioRhYRDEGxbFqGlDKCDix3M+L6GMV3iBKeoS
1MSdrimhl8+TSGEYfdhhfYSaZlwLikxjz4j8xl/8wb7R3h+xgE94jTSyyCOH
m8jUZ6LXSRSJH4ruvw1xxODQ7xPppqYLs8S3MHeQerSERaKIIMtv5/ANX/EF
P+nZy7oe5/WBn/mOkLc7nX0STdSdIT+NVuKI6P6XyCt4h0XyCxjDBMZxERVq
+/n+ODaJN0T3dQjzeIxHYZ29gDncxz2r83Sy7hjKxC99eraO3GKVeBnfqV2r
36voXtet3unh+n5xmziDS3w3RH7K6fmmRc/2BPmA072+FT3fbqv33IMEapzX
rtE7/YUf3lmu4ANr3+OzN/t1705vYBJVaraN9tjBltE5n1p9c8/wwOqMHfQ5
il3iGgrsu4U86vSNVfGE8yqikT4hHDB6FoaaMK7wR7jcoO/OZ/X9+/HP6Js9
793VKEas3ukI61JO/z+dor2bjL6bu7iD/xCEXp8=
          "]]}]}, {}, {}, {}, {}, {}}, {
      {GrayLevel[0.3], Line3DBox[CompressedData["
1:eJwt0DEoBAAUBuB3x92EhZJYLrKo224xyXSyiMliuK5uEYWyiUnWG5QMBsPV
GSQDJd2gy6COMhhuoAy65G4wGG7xKcPX2977358prC+uJSJihRS5gYg+c5AR
JphimlnmKbDKPmUuuOWNL7pMWpqjyBYVrumQSEYMsUSJKjXSPRFjlNjhkBbJ
3ohlNmnQIi9skT26/PBNh08+eOeVJi8888gD99xR44YrLjnnjAqnnHBMuz9i
TjcHbg9TlSvLk9zbjFP32y4zpKjr4YgNFsgyilXx13n6v/NfP80ypg==
        "]], Line3DBox[CompressedData["
1:eJwl0UVWgmEAAMDPrQvu4HVsMbH97QIV7AJsLFTsTnie0nnPxZxgaqJUPFkV
QojIVodQGwuhjnoaaKSJZlqI00ob7XTQSRcJuumhlz76GWCQISKGGWGUMcaZ
YJIppplhliQp5phngTQZFllimRVWWWOdDTbZYpssOfLssMse+xxwyBEFjjnh
lDPOKXLBJVeUuOaGW+6454FHnnjmhVfeeOeDT7745ocyFX5j/wd/5M81+w==

        "]]}, 
      {GrayLevel[0.3], Line3DBox[CompressedData["
1:eJwl0Fk2gmEAANAvMtdPCFESMkTmlViABwtguR1D5nk4CJnjnuPhbuAWNrfX
t2IhhA3iVJIh7LDLHvtUOeCQI4454ZQzzrngkiuuueGWO+554JEnajzzwit1
3njng0+++OaHBr+EKIQYTTQTp4VW2ming066SJAkopseUvTSRz9pBhhkiAzD
jJAlxyh5xigwzgSTFJlimhlmKTHHPGUWWGSJZVZYZS36P/8DcRcwOg==
        "]], Line3DBox[{3540, 3542, 3544, 3540}], 
       Line3DBox[{3541, 3638, 3639, 3640, 3641, 3642, 3643, 3644, 3645, 3646, 
        3647, 3648, 3649, 3650, 3651, 3652, 3653, 3654, 3655, 3656, 1280, 
        1434, 1282, 1163, 1049, 940, 816, 722, 633, 549, 455, 386, 322, 263, 
        199, 155, 116, 82, 48, 29, 15, 8, 7, 3541}], 
       Line3DBox[{2687, 3753, 2832, 2833, 2948, 2949, 3077, 3078, 3079, 3179, 
        3180, 3275, 3276, 3519, 3765, 3766, 3767, 3768, 3769, 3770, 3771, 
        3772, 3773, 3774, 3775, 3776, 3777, 3778, 3779, 3780, 3781, 3537, 
        3539, 3296, 3201, 3101, 2973, 2858, 2738, 2737, 2734, 2732, 2730, 
        2728, 2726, 2724, 2722, 2720, 2718, 2716, 2714, 2712, 2710, 2708, 
        2706, 2704, 2702, 2700, 2698, 2696, 2694, 2692, 2690, 2687}], 
       Line3DBox[{2736, 3755, 3756, 3757, 3758, 3759, 3760, 3761, 3763, 3538, 
        3295, 3200, 3100, 2972, 2857, 2736}], 
       Line3DBox[{3299, 3300, 3302, 3306, 3308, 3313, 3315, 3321, 3323, 3330, 
        3332, 3340, 3342, 3351, 3353, 3363, 3365, 3376, 3378, 3390, 3392, 
        3405, 3407, 3421, 3423, 3438, 3440, 3456, 3458, 3475, 3477, 3495, 
        3497, 3516, 3518, 3764, 3762, 3782, 3536, 3535, 3534, 3533, 3532, 
        3531, 3530, 3529, 3528, 3527, 3526, 3525, 3524, 3523, 3522, 3521, 
        3520, 3499, 3479, 3460, 3442, 3425, 3409, 3394, 3380, 3367, 3355, 
        3344, 3334, 3325, 3317, 3310, 3304, 3299}]}}},
    VertexNormals->CompressedData["
1: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
nZ7PvIDwf4v8xS+Y8g+yM/XHcbo7uu6YQ/jx3lpRgvAPJPyy+ztc+4sQ/sGE
n86jNJyev0SfL95DK4rpxMdTZ/9ai/8swo/nwYjChH8o4dfOLzqic+4xFx+9
9mv718PMjL8ePxd/7V5pJ+f3x6cQ4f+R8MvuX5vbfi7+9Bxsc/ll96/N7T8n
sZ1BOud3mdv/Zc+/Mvf7y52zrd0j37vI+8cfvfFN278ernP+FcdvR/j7M+Mb
p8/pm0TjG11fmxsfbv+6BMG592Mpwj+A8NN9ag2n/Wcp4cdzrUQBwv8T4efW
jxSfTfh7Iv9XOt8vjp+u+zh/elnC31cy/rRfdUF/+qHl4E/fhP70Cp3An54u
DfjTG3mZ+tNp+2+kB3/6wzpwz2khvOc0nU0b1Z8ehP70g+hPb+gH/vTRo8Gf
vj4L+NNz4P2Y9STv2cyGeH2CF0S8GsHzIu7wgfGciNcleG7EaxE8P+LVJXGO
h8MLIG4viRvlyYd4DYJnQrwRwbMi7ijJ44L+9NzoT++P/vRClcGfPnjAdtWf
/twR/OkVMvdT/en+JzxVf3rFDuBP37EB/Oklc1RT/ekTj/iq/vToZcdVf7rf
HvCnhx4Gf/oe9KenQn/6BfSnH0Z/+mv0p49Af/odvH/zFPEpP0H8CMFfIb7v
A+PPET+YTNrDxcdo3LTygQR/gHgQwe8hHkzw24iHEDyBwTn+0AHgT2+F966m
Xgn+9K1bK6r+9Nil6r6+GLgF/OlFw8GfXrUr+NMjD4I/vXwZ8KfHTAN/+oV+
4E9vMs/UT7TMCfxEJdGfvgf96VvQn/4S/ek90Z/ujP50Twfwp1eLA396lbvg
T5+A/vQhnuBPr+UE/vSyk03r7d4S6m1HfEx4X4dYT3xM6D8Q58A3pOQsC/70
shmLm/jT6bqvHKm3G9bbhtTbjqm3AeNf1ltXliL19sR62zOfdyOp19Ggj7gO
4mWYOHOfdy2p14nUK6ujLk/q/Vbn8+rFWU9frd1/ytXbidTrJhlnWd01F2dr
P1863+b6lbn9WXada/Tz+pJ660k+X6rfNvp89eqVXRcb7c8+pN7GZvqIjX5/
9eqVXUcbHa/04iyrD+fG59ak3vbM96g+qVdWN87V60bq7cTEuYmZ7wX6fLvp
9GfuPaj9Lqszr0jq7WxwvKJxltWflyb19tCJ8wadcZLbl6fnvRcl9fbBer8l
9bpivX6k3jqS4wbF6bjRxeDzlR2faRyqkHo7Yb2upF7UuYtVpN6mks9X73vU
1eD7l/YrLu/xDJ/vYsTFGPCnH0gD/nSnJ8GqP/0i+tProD/dDv3pY9CfvtMP
/OnuxJ/+nPBHoD99OvrTh6I/PQ/608PRny7Qn46+YKUp+tOXoz/9Nt5fvIv4
lCMQD5K8J/oy4sclcaM8VxA/ZuH919biiUT8qCRulP8O4jsJ/gzxjQSPR3wP
waMQPyLJH0j86U3Qn35wOPjTF9mDP33/YvCnt/AGf3oC3lsdfxj86WPgfDBR
7Yq67hIFH4I/PY0/+NOD0J+eAf3pK9Gf3hj96dfgeyC4e5+DEC9O8BOIFyP4
KSvxnEG8oCQPhyc1TzDihSV5tPJFCH6Iudd7G+I1Jctr7SzA3N9NzxPwR7wO
wYvlBH96EfSnO6E//Rv0p09Gf3oW9Kf7oD/dGf3pkehPL4v+9MPoT38B5+2J
KrPBn746L/jTV08Bf/oL9KeXXwX+9BOPwZ9+kfjX8HssXhH/GuZ1xFz0p4f1
Bn/6DMXUn071q2GE/xTy4zmNifgeg/5lbT1uLj93Ppt2fvsTXHdHEH58n4j0
hH8b45/VO6frEuE/gfzpdPg5f3pSx5+ul7n+o8fPzTOzkfOfzeWXPUfL3Ocr
q18NJ/zBks+XW88Gkf5znvCHSMZHOy9opo5/wdz4y65PLxP+4zrjj/Y7N3+m
60Gu/+vxy/ojuOer139k15WRhB/nZSIN4Q+Q9F+XITjXfx6S+Bwj/LL7s6GE
/wzyPyf8B83kjyL8RyTjL8vP9X+99svmK8yND6ffpuMSx/+M8B8yOL5p9b50
AX/6I/SnX0d/eij60zvDPpzyoKGpP53G4QTenz4E70/fjPen25j8vL1/vXtQ
1eHRu68oa6N/+nr9ivOKQ4R79k4l3q43afkUPAVPwVPwpMET/86OVxxeF327
Y9C3Oxp9u27o222Pvt2c6NuNRN9uNPp26y4B3+7Q0+DbPeQOvt0d7TKovt3z
+8C3+3wh+HZTe4JvN09FU98N6kpEWeK7QZ248AL/i1LoDPh2Rwwz9e1SXS7H
b0f4/2LupaX7oXRdlp/wV5fk5/bFqC43L+FHPZEoTfjvE35uf5POG43GX/ud
mzdSXW4+Jj5lCP89ws/lw+m9PLkIf23J+HDxp7pcc+PPtZ+uywoR/qqS8ZG9
V9fc+OudOz3Jwvhz6zKqy83N9M9KhD+e8MvuD3L85Ql/gpm+aXP7j2ze4yvC
X4XxpdJ7sWX39b4k/HUkfZ3cvJ2ua3IQ/noW+jopzo3Per5OWV0uHT9rWhh/
2q+48ZnG54KZ7efir+cLll2XcfzVde495/IeXNzgJ7nNx1LwTwNP/Dvb31bX
Bl+h+zTwFTq18lR9hffx3tsf0VdYFX2FP0wEX2G/9eArzFUKfIVr64Gv8JIb
+AoTyoKvcPxI8BWuCQdfoYcb+ArHE18A3h8ubpcsYOIL+CvqruoLmIG+wimH
wVc4dxX4Cl+grzB8AvgKhxcFX+E4wo/3XYtYwv8Y+Suhr7Djr+Ar/MPb1FdI
57eTCf93Ou3Xfi+E48BonbwWd2+jHr/s/JaLTzThf0L4qQ5BwzU93lQ7y+LD
7TvQ+a258eHaT987sv3nEeGXnd8a7f/a7y+x/X/qtJ+LTzzhf0j4Zee33PNd
lcmUf+hTU/4C2M/H6rwfKb/W/rWE/3vCL7uvYW58ZOe35sZHm/+PJO2n6wLO
F+l+n9zrmvXdvssFOvMrzpfdhfA/I/zc/Oof54ow90p/S/gfS/LTdSv3fPsQ
/oSs7/ZF0vUX7VdcfPoR/ttmtp/yd0L+rjrxkdUPc748vfhz60cubvCT3OZF
Kfi/C0/8O9uvbgSA/2hhAPiPnuQC/9HEvDVV/9GeluA/mjQK/Ef7i4H/KPMC
8B9l/RL8R/fCTfWilzKAXjQ7+o+Oov/oDPqPnqH/qAv6jzzQf1S0IviPxmSN
V/1Hs/3Bf+QxDPxHMXvRf5QN/EdcvfS+yIGoU/UmOlUX1KmeR/9RJvQfVdPx
H90m9V7J8O57wQbr1Kv9LuvLjif1RmG9DqRePL9ZLCH1tpDUIacn9zoZ/bzL
Sb1fk3q1cxKO6uhkjD5fvXr1dNdedu+vl/u8C0m9ren9p8y5ClSXxcWZe756
9XJ5Xfo+5fqVuc9XO4ehk44Ox3cv8S8Uef/9a3r6dtk8MFcv16/0vkfc+53i
CSTOETr9Wa9ebtygeh5/8nk74Od1Yu6bM9dHQPH+K0m/coB6G5F6PbDeNTq+
J9n7C7qTeuOw3haMb0LPxyc7P/+e1HvJ4d1+jW8t/LwUH0bqPefw/ue7TOd9
JJuvHkjqvazzedfp+FK5PDb1AXHPtzmpt7tkvbLz/76k3qtYbxNSb2/J58uN
Gyl57xTccjzx72z/6TIc9P+XokD/3/PYl6r+/wDq/+uj/j8A9f8lUf9/CPX/
GfF+us/mgP5/K+r/J6H+/2pp0P87o/5/Fer/6f04vqgPvEP0gadRH/gF6v93
DAD9v3cNU/0/fd89J/wbdfi137nz1em5r+byy+pvXxH+dQb1sXrnwz9j2q/H
z50vTc/dovdn+f3L4v+Euf8rwUrt5+5v0uPXzpF20jlfmn6/ZJ8vFx+Kc/F/
QPiDzGz/bcK/SzI+3PnM9LnEE/49FurDab3c/Y+pdPwLeu3n7nfbaeX+ycWH
9h/6fGXjf4vw72biT/XhsvG/w8THWv3TxuQnub33U/APgyf+ne0PjqiznYA6
27z5QWdbBHW2Hqiz7YA62+zepjrbn/F+nFZbQWdrtwR0tlmnwf04vwaAzvZF
NOhsD9QAnW08Od/eXed+h2Bv0NlOuA862zJupjpb6o/j+KmO6BKjw9Tbp75D
+Hsgfz0dflkdJtd+quOiOjHZfeoYwt9Pkl9Wh2lu/GX3qbn4Ux1aGKPD1Dsf
lWu/7P019HxUqsM0l192n/o+4e8qGR/Z81G5+6H0dIyy56Ny95tU1NHZyuow
uftl9Pq/rI4xgfD3lNQxyp6Pepfwd5e8v0m2/Vz8qQ7/juTzpePDX4T/Wwt1
mLR/2pj8JLf3cgpuXTzx7+xzb3lXvQdEabwB9ZABU1U9ZCG8Z6El6iGfPQY9
5Lv5uHqM4/5Ep+GEOo2krpfDt5P2OH7k9nB4coubUdyXtL/pv6z9HP5vfy5G
8QDyeet94p+Xw/8t48bHwv+/fS+shaf0K+vin+p7J7nhG0icnVPi/EHxbST+
DVLinyxwQZ5L7ZTnkqzxlPfvp4GvJc/RNeU5flJ4yrzu/zOe+HeRPNqTgr8f
T/y70Pk7+ff/eL4W/nu9dhktn4J/qvi5zkOGHvQPVw7uydvWMyxWNP/ydb/b
y8O5fp/s2p+Cp+ApeAqegn/a+NlMeVZ5BMaKI+5jL/epHaLM3vhX3IrFkXQe
lMzmgym4LN61S7PHh1YGKWcvTD26O0+sKFd+xeUBC68qLa56t4kvc1bUb+62
cH5CnHL1xLMr8dkuiadTZ22uujhaBHzvnzqD99v1sVHcZhrgWz4xHg6/j/g+
C3kOI55A8CWI5xxsih9H/KZke/Yi/oDg8xHPT/hfhy8v6bE/Vtz4ZmrC8yf+
SlyNxXYHTlxVZt7OPsKn8xkRk/XFsIHtr4kR6frOmuEVo9ycn3+h758HRLbf
49unbnhD3Mn9vWflPm/PXd9fG/Rm52ub6s04/ATiJwiO5cR+SZ7tiEcR/BH6
T5frnD+jh3M8RvkboB+h/Ug5PKnbYy1+Dm+J+ltnosvV/O/VCc7pMI3G0wHx
HgTP/DPwTH4y1gTPg/hvBOfq1e6/W0Jw7dy5RuRzdSM+NQ3nfOJcPCui3rs/
4+Oj5zb84xyqGXP/ONw4RCk3qK9Dl0Ox4vSr5+V938wHnF2bjtuzP1Y5MD2t
T/DSSDFnQdqi51xCxO1O3quLL3rLF5gp85Xcy6LFfYLv1cE5no/FbxR/SvCd
DB5g5XpvMfgeZt+wCdEJn0Gd8BOiK+6AumLON8f5TLn7Mbn7Q8cS330w+u65
c8m4c7qofp7qn+Hn7TyYO0/Y5p0/H38e925cL19qtHzyW5/8/8b/+bz+D1Wy
VQ4=
     "]], 
   {RGBColor[1, 0, 0], PointSize[Medium], 
    Point3DBox[{{1, 1, 1}, {2, 1, 1}, {2, 2, 1}, {2, 2, 2}, {3, 1, 1}, {3, 2, 
     1}, {3, 2, 2}, {3, 3, 1}, {3, 3, 2}, {3, 3, 3}, {4, 1, 1}, {4, 2, 1}, {4,
      2, 2}, {4, 3, 1}, {4, 3, 2}, {4, 3, 3}, {4, 4, 1}, {4, 4, 2}, {4, 4, 
     3}, {4, 4, 4}, {5, 2, 2}, {5, 3, 2}, {5, 3, 3}, {5, 4, 2}, {5, 4, 3}, {5,
      4, 4}, {5, 5, 2}, {5, 5, 3}, {5, 5, 4}, {5, 5, 5}, {6, 3, 3}, {6, 4, 
     3}, {6, 4, 4}, {6, 5, 3}, {6, 5, 4}, {6, 5, 5}}]}},
  AutomaticImageSize->True,
  Axes->True,
  AxesOrigin->{0, 0},
  BaseStyle->{FontFamily -> "Arial"},
  BoxRatios->{1, 1, 1},
  DisplayFunction->Identity,
  ImageSize->{363.5899510544919, 359.19175487735475`},
  LabelStyle->{FontFamily -> "Arial"},
  Lighting->{{"Ambient", 
     Hue[1, 0.7, 0.4]}, {"Directional", 
     RGBColor[0.8, 0, 0], 
     ImageScaled[{3, 0, 2}]}, {"Directional", 
     RGBColor[0, 0.8, 0], 
     ImageScaled[{2, 2, 4}]}, {"Directional", 
     RGBColor[0, 0, 0.8], 
     ImageScaled[{0, 2, 2}]}},
  Method->{},
  PlotRange->All,
  PlotRangePadding->{Automatic, Automatic, Automatic},
  ViewPoint->{0.4826376436109039, 0.7134706731699062, -3.2723111868366357`},
  ViewVertical->{
   0.7580677421390017, -0.3188733404439784, -0.5689051687956215}]], "Output",
 CellChangeTimes->{{3.5935727108664913`*^9, 3.5935727233947444`*^9}, 
   3.593572759962401*^9, 3.5935727927106752`*^9, {3.5935728757699804`*^9, 
   3.593572892299633*^9}, 3.5935729431967225`*^9, 
   3.5935730900024014`*^9},ImageCache->GraphicsData["CompressedBitmap", "\<\
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
AxI4h9OHjSGrczZjN+7M/j3xhf8LYdE3xg==\
\>"]]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"i", "=."}], ";", 
  RowBox[{"j", "=."}], ";", 
  RowBox[{"z", "=."}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"loop", "=", 
   RowBox[{"Inactivate", "[", "\[IndentingNewLine]", 
    RowBox[{"For", "[", 
     RowBox[{
      RowBox[{"i", "=", "0"}], ",", 
      RowBox[{"i", "<", "7"}], ",", 
      RowBox[{"i", "++"}], ",", "\[IndentingNewLine]", 
      RowBox[{"For", "[", 
       RowBox[{
        RowBox[{"j", "=", "i"}], ",", 
        RowBox[{"j", "\[LessEqual]", "10"}], ",", 
        RowBox[{"j", "++"}], ",", "\[IndentingNewLine]", 
        RowBox[{"For", "[", 
         RowBox[{
          RowBox[{"z", "=", 
           RowBox[{"Max", "[", 
            RowBox[{"i", ",", "j"}], "]"}]}], ",", 
          RowBox[{"z", "\[LessEqual]", "10"}], ",", 
          RowBox[{"z", "++"}], ",", "\[IndentingNewLine]", "code"}], 
         "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", "]"}]}], 
     "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"extractLoopConditions", "[", "loop", "]"}]}], "Input",
 CellChangeTimes->{{3.593572699174322*^9, 3.593572707629168*^9}, {
  3.5935729371851215`*^9, 3.5935729412245255`*^9}, {3.5935730709985013`*^9, 
  3.5935731284782486`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"i", ",", "j", ",", "z"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"i", 
      TagBox["=",
       "InactiveToken",
       BaseStyle->"Inactive",
       Editable->False,
       Selectable->False,
       SyntaxForm->"="], "0"}], ",", 
     RowBox[{"i", 
      TagBox["<",
       "InactiveToken",
       BaseStyle->"Inactive",
       Editable->False,
       Selectable->False,
       SyntaxForm->"<"], "7"}], ",", 
     RowBox[{"j", 
      TagBox["=",
       "InactiveToken",
       BaseStyle->"Inactive",
       Editable->False,
       Selectable->False,
       SyntaxForm->"="], "i"}], ",", 
     RowBox[{"j", 
      TagBox["\[LessEqual]",
       "InactiveToken",
       BaseStyle->"Inactive",
       Editable->False,
       Selectable->False,
       SyntaxForm->"\[LessEqual]"], "10"}], ",", 
     RowBox[{"z", 
      TagBox["=",
       "InactiveToken",
       BaseStyle->"Inactive",
       Editable->False,
       Selectable->False,
       SyntaxForm->"="], 
      RowBox[{
       TemplateBox[{"Max"},
        "InactiveHead",
        BaseStyle->"Inactive",
        SyntaxForm->"Symbol",
        Tooltip->"Inactive[Max]"], "[", 
       RowBox[{"i", ",", "j"}], "]"}]}], ",", 
     RowBox[{"z", 
      TagBox["\[LessEqual]",
       "InactiveToken",
       BaseStyle->"Inactive",
       Editable->False,
       Selectable->False,
       SyntaxForm->"\[LessEqual]"], "10"}]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.5935730882842293`*^9, 3.593573128672268*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"PlotIterationSpace3D", "[", "loop", "]"}]], "Input",
 CellChangeTimes->{{3.5935726852219276`*^9, 3.5935726853339386`*^9}}],

Cell[BoxData[
 Graphics3DBox[{GraphicsComplex3DBox[CompressedData["
1:eJyVnT9sZFl2nwk2trktlLuLtc2hiKVrq8hWIEAaOFA2O+AACmVAwAYK5MgG
FMiJFa4BBxNp13BgwIC8ipzZmTPbUOCgAVubOJE4KwaOdmmoAANjoJYCKAko
YMx61b++53y/c7Z3GExNfXx9eN+5554/99533/qf/Yvv/cHx0dHRP/rW0dGz
p88f/fv9z49vvridfm6+v//5i9sb8R/+4OnnR+P3B/7RzdG7n47z53Ddlf2e
f7f7992/4/fcHrb/vmn/fdOu+0b+vcn/7vTzpckXp3xyyc9y2P6Hpv0PTfsf
mvY/mPzp8wd/a/LFKZ9c8rMc6mfX6GfX6GfX6Gdn8v/lZEBHn1G+OOWTS36W
Q/0fm3zxWv/HJj/LGfJ/c/r5hskXp3xyyc9y2L8nJl+c8slz/56Y/Puf7X9e
mHxxyieX/CyH9jMz+eKUT57tZ2byD99fmnxxyifPfuelyT/Y1byxz7nJJ8/2
OTf5/+k/7n9OTb445ZNLfpZD+1809r8w+eTZ/hcm/3DVa5MvTvnkOR68bsbX
WTO+zkw+eR5fZyb/n/z+/ucjky9O+eSSn+Vw/J434/fc5JPn8Xtu8v/rf9n/
/KrJF6d8csnPcugfLhr/cGHyybN/uDD5r6afb5t8cconl/wsh/7nsvE/lyaf
PPufS5P/z/9w//MPTb445ZNLfpZD/7Zs/NvS5JNn/7Y0+f/zf+x/vmPyxSmf
XPKzHPrPVeM/VyafPPvPVWM/68Z+1iafPNvPuvHPLl+c8smzf3b5B7u6auzz
yuSTZ/u8Mvnv8vfG/7t88uz/Xf7Bbq8b+782+eTZ/q9N/uGqN018eWPyyXN8
efNePrmu/3gfJv7K65GOq66Y+vcvWXf0vK5T7t/XEfX1rAvu3+fttRzm4fc3
df58/z6/Ja/z1fubOs+8v6nzw/v3+Rt5nY/d39R51P1Nnf/cv89PyA/fmG/c
39R5wv1NHd/vb+q4fH9Tx9P7mzoO3t/U8ev+fXwhr+PF/U3t5+9vav98f1P7
1fub2h/e39R+7P6m9j/37/1D3X6O9/tmPN7beJx+fnJv9XvHNX6m2/rkS/jT
nnPc6TvHnTjHXZazM85xl+UfG+e4y3/3xDjHXW7PzDjHXW7n3DjHXW7/wvjh
22vjHHfiHHf5fs+Nc9xlPVwY57jL+rk0znGX9bY0znGX9bkyznGX9ez88HnV
6N85x13ulzHuyHX99M8//dLmtTqucTJhi1M9r+PaQxPXHpq49tDEtYcmrj00
ce2hiWsPTVx7aOLaQxPXHpq49tDEtYcmrj00ce2hiWsPTVx7aOLaQxPXHpq4
9tDEtYcmrj00ce2hiWsPTVx7aOLaQxPXHpq49tDEtYcmrj00ce2hiWsPNr6m
f//Fg83rdlzj4WH79PPHY1x8iHMc6TvHkTjHkTjHkTjHUf67J8Y5jnJ7ZsY5
jnI758Y5jnL7F8YP314b5zgS5zjK93tunOMo6+HCOMdR1s+lcY6jrLelcY6j
rM+VcY6jrGfnHEdZ/845jnK/vPmM9i+u65f7nx8OO9f1HZfdT+3/hHlazzle
9L3O63ZNXrdr8rpdk9ftmrxu1+R1uyav2zV53a7J63ZNXrdr8rpdk9ftmrxu
1+R1uyav2zV53a7J63ZNXrdr8rpdk9ftmrxu1+R1uyav2zV53a7J63ZNXrdr
8rpdk9ftbLxMYoM96/qOy76n+Y9g5x/iHBf6znEhznEhznEhznEhznGR1wVf
Gue4EOe4yO1fGD98e22c40Kc4yLf77lxjoushwvjHBdZP5fGOS6y3pbGOS6y
PlfGOS6ynp1zXGT9O+e4yP0yxgW5rp/uJ9itru+47HjqL6svel7XI8dm/0mO
1SPHZv/itH/xuh45NvsXr+uRY7P/fD+sR47N/sXreuTY7F+8rkeOzf7F63rk
2OxfvK5Hjs3+xet65NjsP7eHdcex2X9u51Wjf+d1PaJ+YT0yuK6f8qUvhn2m
PKrgstdJ/78x7PZDnHau77TzJCfYuTjtPO+feGmcdi5OOxenned2vzZOOxen
nef7PTdOO896uDBOO8/6uTROO896WxqnnWd9rozTzrOendPOs/6d085zv7wx
+xTX9VOzgx3q+o7LLj/dN9Pq2Z7X9e+J2bM47Tnv12H9e2L2LF7Xvydmz7l9
rH9PzJ7F6/r3xOxZvK5/T8yexev698TsWbyuf0/MnsXr+vfE7Dm3h3Xuidlz
budVo3/ndf2rfmH9O7iun+QGe0t+vuBpn1awww9x2q2+027zPrCXxmm34rRb
cdptbsdr47RbcdqtOO1WnHab9XBhnHab9XNpnHab9bY0TrvN+lwZp91mPTun
3Wb9O6fd5n55Y/YmruunbrofdpX8dsFlZz/fz3N+wnmPntM+9b2eJ5mZfYrX
8yQzs8/89zhPMjP7FK/nSWZmn+L1PMnM7FO8nieZmX2K1/MkM7NP8XqeZGb2
mdvD+ZCZ2Wdu51Wjf+f1PIn6hfMkg+v6Se3BfnR9x2VP//h3nn6CXX2I0w71
nXYoTjsUpx1mua+N0w7FaYfitENx2qE47VCcdihOOxSnHWa9LY3TDrM+V8Zp
h1nPzmmHWf/OaYe5X96Y/Yjr+kmPwU6SXy247OYnT635ns1r9byeB5s382Dz
Zh5M/57zYPNmHmzezIPNm3mweTMPNm/mwebNPNi8mQebN/Ngc7M38XoebG72
ltvD+a55Mw82N3vL+ndez4OpXzgPNriu35f7/yHYQ5wHqHi0j8+DnXyI0670
nXaVr3ttnHYlTrsSp12J067EaVfitCtx2pU47Srv118ap12J065ye9bGaVe5
nVeN/p3TrnK/vCntIdrVPv79r9Dvur7jsoP9+sJ/tvnGntfzk/rO+clFMz+5
aOYnF8385KKZn1w085OLZn5y0cxPLpr5yYXZj3g9P7lo5icXzfzkopmfXJj9
ZP07r+cn1S+cnxxc1+9b/Xehf+O8TcUP/+r1Z/te/N9ffeu9nA/x/Dk47US8
fk7ktdmJeP1cxmuzE3HaiTjtRLx+7uC12Yl4vc//tdlJbg/3vb82O8ntvDJO
O8nt575x9ccb619xXblvx6+Ffox+qeLq131/ndj8bc9pD/pez/eeNfO9Z818
71kz33vWzPeeNfO9Z81875nZg3g933vWzPeeNfO9Z81875nZg3g933vWzPdK
75zvHVzX76V+L/RXXO+uuPrvvz31ym+FfvwQZ7/rO/tdnP0uzn4XZ7+Ls9/F
2e/5+bSlcfa7OPs9t2dtnP2e23llnP2e239t/PDtjfWX+FH4+Tz0S/QbFVc/
7fX/T20eu+f1vPd5M+993sx7nzfz3ufNvPd5M+99bv0rXs97nzfz3ufNvPd5
M+99bv0rXs97nzfz3tIj570H1/VT/hf0H5/Tqbj6Y/50V/829MuHOPtR39mP
4uxHcfajOPsxP4e5NM5+FGc/5vasjbMfczuvjLMfc/uvjbMfyXX9lIcFPev6
jkvv+1b+d5uH73k9b3/RzNtfNPP2F828/YX1l3g9b3/RzNtfNPP2F828/YX1
l3g9b3/RzNtLL5y3H1zXT/nQ/dBnHKcVl373f/f/vhx6/hBnv+g7+yXKif0i
zn4RZ7+Is19ye9bG2S+5nVfG2S+5/dfG2S/kun4/Sn4r6E3Xd1x63H/7yOb/
e07963u9XnBp+hev1wsum/WCy2a94LJZL7g0/YvX6wWXzXqB7pPrBYPr+ik/
CPqJ46ji0tdeD78d9PYhTj3n58aXpZyoZ3HqWZx6Fqeexalnceo5t//aOPVM
ruunOB30oOs7Lr3sn4/4I1sv6Hm9vrBs1heWzfrCsllfWDbrC8tmfWHZrC8s
m/UFtZvrC4Pr+ilehvuNdl5x3f80Hxz08CFOvek79SZOvYlTb+LUmzj1Jk69
5fa9sful3qa4Fe4r2m3FdZ/79v+BrQv0vF5HWDXrCKtmHWHVrCOsmnWEVbOO
oHZwHWFwXb+f1/03of1xvrfiup99K3cvGU97XsfldROX101cXjdxed3EZcll
XB5c1+/9/zq0M8aFiqvd+/b8O5u373k9z+/3G+X4PL/fb5bLeX6/332//llo
T7STiqt9+7/66xave17H96smvl818V3XMb4Pruv3vfS74e/Gfq94bMdbmw/v
eT1/7u3P13H+3Nu/1/tfB/mxHysez+P4PYvXPa/ju74zvg+u6/f7Kf9VkKPr
O65/v5/F+39fcd6452wP+TQ9FM4l1GfN740f7OHL5voH43pOrZazM67nEWr5
x8YP85zfMK79geTaf1W3Z2Zc+xDqds6Na72vbv/C+KFfXjf3dWZc83v1/Z4b
1zxDrYcL46qnav1cGldeWuttaVz5Q63PVdOedaNn5/JXtf6da9zV/aJxdGfn
4YhPz4n9yfg9ucZLff2D8fxcJ+XsjOfndyj/2LjGS/13T4zn/Ypsz8x43rfD
ds6N5/Vxtn9hXOOlvq8z43k+nPd7bjzPy1EPF8bz/AP1c2k813HU29J4zrep
z1XTnnWjZ+c5vlP/znOcYr/4eCGfvtr5NmOcTM3/5EvjlDM1w87rGONqwmF8
iVNOfS7BnZ1LQE459XPZd/ZcNjnlTM2w51Xv7HlVcsqpn+8bfkHP8ZGX92XP
Sd3Zc1LklDM1w55DubPnUMhLu7L9/3e2/5+ccqZm2H7sO9uPTU45UzNs3+yd
7Zslp5x63+Od7Xskr/rL97Pd2X62ikc59f6l4Ze1T4m86nffx3Jn+1jIKafe
53Bn+xzIq/Hl6+N3tj5OXvkxX2+9s/VWcsqp1/XubF2PnHLqdaU7W1cip5x6
vePO1jvIKaeen7+z+Xnyalz4PPOdzTOTU049j3pn86jklDPp0eYP72z+kJxy
6vm0O5tPI6/Gqc873dm8E3mlZ5+3ubN5G3LKqedD7mw+hJxy6vmHkZfsr357
W3P6DZ8HuLN5AHLKqev0O6vTyfU5xZPtT62OEJ++/3z8nlx5Tn39g3HlIbWc
nXHlCbX8Y+OK4/XfPTGuOFu3Z2ZccbBu59y44lTd/oVxxZH6vs6My8/X93tu
XH641sOFcfnJWj+XxuXHar0tjcvP1PpcNe1ZN3p2rnFa69+5xlHdLz5eyKev
oY4QZx1BTjmsI/LfHXUEOeWwjhBnHUFOOawjcvtHHUFOOawjxFlHkFMO64is
h1FHkJf3FeoIcdYR5JTDOiLrc9QR5KVdhTpCnHUEOeWwjsj9MuoIcsphHSHO
OoKcclhH5P4ddQR51V+xjkjjNNQRFY9yWEdkOxl1BHnV77GOSH4g1BHklMM6
ItvbqCPIq/EV6whx1hHklR+LdUS221FHkFMO6whx1hHklMM6Itv/qCPIKYd1
hDjrCHLKYR2Rx9GoI8ircRHriOS3Qx1BTjmsI/J4HHUEOeWwjkj+NtQR5JTD
OiKP61FHkFfjNNYRuV9GHUFe6TnWEdk/jDqCnHJYR+T+HXUEOeWwjsh+5nD9
29ua02/EOiLbyagjyCmHdUT2V6OOINfny/0NfTHyHn2SK5+pr38wrnyjlrMz
rnygln9sXPG6/rsnxhVP6/bMjCve1e2cG1c8qtu/MK54Ud/XmXH58/p+z43L
39Z6uDAuf1jr59K4/FWtt6Vx+ZNan6umPetGz841Hmv9O9d4qftFdfqmWUfY
HPoj/J48z/8PnufzKWdnPM+3U/6x8Twfzr97YjzPV7M9M+N5PpntnBvP871s
/8K4xkV9X2fG83wp7/fceJ7PpB4ujGtc1Pq5NJ7nA6m3pfE8X0d9rpr2rBs9
O9e4qPXvPM9HsV98XJDX62hjPKj+Jaeceh1t06yjbZp1tE2zjrax+peccqZm
2DrapllH2zTraJtmHW2M57yONnh5X7aOtmnW0TbNOtqmWUfbNOtom2YdbdOs
o22adbRNs462adbRNlb/klNOvY62adbRNs062qZZR9s062ibZh1t06yjbaz+
rXiUU6+jDX+a19EGr/rd19E2zTrapllH2zTraJtmHW3TrKNtmnW04d/zOtrg
lDPp0dbRNs062qZZR9s062ibZh1t06yjbZp1tE2zjrZp1tE2zTrapllH2zTr
aJtmHW1j9S95NS58HW3TrKNtmnW0TbOOtmnW0TbNOtqmWUfbNOtom2YdbdOs
o22adbRNs462adbRNs062qZZR9s062gbq3/JKadeR9tY/UtOOax/s585XP/2
tub0G76OtmnW0TbNOtqmWUfbNOtoG6t/P32XpzDP/xTf9Xty5SfkyjdqOTvj
ygdq+cfGFa/rv3tiXPG0bs/MuOJd3c65ccWjuv0L44oX9X2dGZc/r+/33Lj8
ba2HC+Pyh7V+Lo3LX9V6WxqXP6n1uWras2707Fzjsda/c42Xul98XJAzzxdn
nk9OOczzxZnnk1MO8/zc/pHnk1MO83xx5vnklMM8P+th5Pnk5X2FPF+ceT45
5TDPz/oceT455TDPF2eeT045zPNzv4w8n5xymOeLM88npxzm+bl/R55PXvVX
zPPFmedXPMphnp/tZOT55FW/xzxfXP5XeT455TDPz/Y28nzyanzFPF+ceT45
5Ux6DHl+ttuR55NTDvN8ceb55JTDPD/b/8jzySmHeX7yzyHPJ6cc5vl5HI08
n7waFzHPT3475PnklMM8P4/HkeeTU86kx5DnJ38b8nxyymGen8f1yPPJq3Ea
8/zcLyPPJ6/0HPP87B9Gnk9OOczzc/+OPJ+ccvatiHl+9jOH69/e1px+I+b5
2U5Gnk9OOczzs78aeT65Pqc8IuQz+iRXHkKe8hGTszOuuF/LPzauuFz/3RPj
ipt1e2bGFdfqds6NK+7U7V8YV1yo7+vMuPx2fb/nxuVXaz1cGJffq/VzaVx+
qdbb0rj8Rq3PVdOedaNn54fPq0b/zjUu6n7RevG22Ye2PbTv5+P35Hn/2OCH
v7Mznvd3Uf6x8bz/in/3xHjeH8X2zIzL/ut2zo3n/UVs/8K47L++rzPjeX8O
7/fceN4/Qz1cGJf91/q5NJ73n1BvS+N5fwj1uWras2707Fz2X+vfed7/wH5x
+yev91turQ4lp5x6v+UYJ3m/5eCUwzpUvN5vubU6VLzeb7m1OpS8vC/bb7lt
9ltum/2W22a/5dbqUPKyH22/5bbZb7lt9ltum/2W8COfzIxTDutQcdah5JRT
77fcWh1KXvWX77fcNvstt81+y22z33JrdSh51e++33JrdSg55dT7LbfNfstt
s99y2+y33FodSk45kx5tv+XW6lByyqn3W26b/ZbbZr/lttlvuW32W26b/Zbb
Zr/liCt5v+XglFPvtxxxSHUoeTUufL/lttlvuW32W26b/ZZbq0PJKWfSo+23
3Db7LbfNfstts99ya3UoeTVOfb/liLtTFHm5Nl7p2fdbbpv9lttmv+W22W85
4nrebzk45exb4fstt1aHVpx+w/dbbpv9lttmv+W22W+5tTqUXJ/TsLwdeYY+
yZU/kCsfIFd8r+UfG1f8rf/uiXHFx7o9M+OKX3U758YVX+r2L4zL/9f3dWZc
/rm+33Pj8p+1Hi6My7/V+rk0Lv9T621pXP6h1ueqac+60bNzja9a/85l/3W/
vHnnz/7G8mfx6d+H35PLzsll5+Syc3LZef13T4zn98ixPTPjsvO6nXPjsvO6
/QvjsvP6vs6M53PKeb/nxvN5ydTDhXHZea2fS+P5fE3qbWk8n4NIfa6a9qwb
PTuXndf6dy47r/vF7Zyc9aA460FyypmaF+pBcdaD5JTDelCc9SB5eV+hHhRn
PUhOOawHsz5HPUhOOawHxVkPklMO68HcL6MeJKcc1oPirAfJKYf1YO7fUQ+S
V/0V60Fx1oMVj3JYD2Y7GfUgedXvsR4Ul79TPUhOOawHs72NepC8Gl+xHhRn
PUhOOZMeQz2Y7XbUg+SUw3pQnPUgOeWwHsz2P+pB8sq/xXpQnPUgOeWwHszj
aNSD5NW4iPVg8s+hHiSnHNaDeTyOepCcclgPJn8b6kFyymE9mMf1qAfJq3Ea
68HcL6MeJK/0HOvB7B9GPUhOOawHc/+OepCcclgPZj9zuP7tbc3pN2I9mO1k
1IPklMN6MPurUQ+S6/NgL4/Ncw2Ph+/h9+TKB8jz8wWD5+cFBlf8rf/uifG8
P5/tmRnP++fZzrnxvL+d7V8Yl/+v7+vMeN4fzvs9N573b1MPF8bl32r9XBrP
+5+pt6Vx+Ydan6umPetGz841vmr9O8/7b9kvbufk9XM6j5Ynk1MO82Tx+jmd
R8uTxZkni9fP6Txanpzuy57TeWye03lsntN5bJ7TebQ8mZxy6ud0Hi1PJqcc
5sm5X/iczqPlyeLMk8WZJ5NTTv2czqPlyeRVf/lzOo+WJ1c8yqmf03m0PJm8
6nd/TufR8mRyyqmf03lsntN5bJ7TeWye03lsntN5bJ7TeWye03m0PJmccurn
dB6b53Qem+d0HpvndB4tTyav/Js/p/NoeTI55TBPzuOIz+k8Wp4c2+nP6Txa
nkxOOfVzOo+WJ5NTDvPk5G/tOZ3H5jmdx+Y5nUfLk8mrcerP6Txankxe6dmf
03m0PJmccurndB4tTyanHObJ2c8crn97W3P6DX9O59HyZHLKYZ6c/RWf03m0
PHnSxw9GfqBP8pQvBK44Tq64TK44W//dE+OKg3V7ZsYVp+p2zo0rjtTtXxiX
n6/v68x4ei+l3e+58fR+PNPDhXH5sVo/l8blZ2q9LY3LD9T6XDXtWTd6dq5x
VOvfuey87pc378bB31t+Kz7lPeH35LJnctkzueyZXPZMLnuu2zMzLnuu2zk3
Lnuu278wLnuu7+vMeH4/Ku/33Hh+TyP1cGE8xnPXz6Vx2XOtt6Vx2XOtz1XT
nnWjZ+ey51r/zmXPdb+4PZOzLhNnXUZOOazLxFmXkVMO6zJx1mXklMO6TJx1
GTnlsC4TZ11GTjmsy3K/jLqMnHKmZoS6TJx1GTnlsC7L/TvqMvKqv2JdJs66
rOJRDuuybCejLiOv+j3WZeLyU6rLyCmHdVm2t1GXkVfjK9Zl4qzLyCln0mOo
y7LdjrqMnHJYl4mzLiOnHNZl2f5HXUZOOazLxFmXkVMO67I8jkZdRl6Ni1iX
ibMuI6cc1mV5PI66jLzy27EuS/421GXklMO6LI/rUZeRV+M01mW5X0ZdRl7p
OdZl2T+MuoyccliX5f4ddRk55bAuy37mcP3b25rTb8S6LNvJqMvIKYd1WfZX
oy4j1+en7+I589hP8V2/J8/PRw+en3ceXHGWPD+PPHh+vpjtmRlXnKrbOTee
n89l+xfG5efr+zoznp9v5f2eG8/Pn1IPF8blx2r9XBqXn6n1tjQuP1Drc9W0
Z93o2bnGUa1/57Lzul/cnsmZx4rX5wPsLI8VZx4rXp8PsLM8Vrw+H2BneSw5
5TCPFa/PB9hZHpvaaecD7CyPJacc5rG5X3g+wM7yWHHmseLMY8kppz4fYGd5
LHnVX34+wPAj+6s/pz+x8wF2zfkAO8tjyat+9/MBdpbHklNOfT7AzvJY8mp8
+fkAu+Z8gF1zPsCuOR9gZ3ksOeXU5wPsmvMBds35ALvmfICd5bHklFOfD7Cz
PJaccpjH5nHE8wF2lsfGdvr5ADvLY8kppz4fYGd5LHnlt/18gF1zPsCuOR9g
15wPsLM8lrwap34+wM7yWPJKz34+wIiL+XyAwSmnPh9gZ3ksOeUwj81+5nD9
29ua02/4+QA7y2PJKac+H2BneSy5Pv90by4hruuTXPGaXPGXXPGUXPGRXPGu
bs/MuOJR3c65ccWLuv0L4/Ln9X2dGZe/re/33Lj8Ya2HC+PyV7V+Lo3Ln9R6
WxrXeK/1uWras2707PzwedXo37nsue6XN1P8efXqK8s/xafv4ffkslty2S25
7JZcdksuuyWX3dbtnBuX3dbtXxiX3db3dWZcdlvf77nxGP9dDxfGZbe1fi6N
y25rvS2Ny25rfa6a9qwbPTuX3db6dy67rfvF7Zac9ZE46yNyymF9JM76iJxy
WB+Jsz4ipxzWR+Ksj8gph/WRuMab6iNyymF9JM76iJxyWB/l/h31EXnVX7E+
Emd9VPEoh/VRtpNRH5FX/R7rI3H5F9VH5JTD+ijb26iPyCmH9ZE46yNyypn0
GOqjbLejPiKnHNZH4qyPyCmH9VG2/1EfkVMO6yPx6SPUR+SUw/ooj6NRH5FX
4yLWR+Ksj8gph/VRHo+jPiKnnEmPoT5K/jbUR+SUw/ooj+tRH5FX4zTWR7lf
Rn1EXuk51kfZP4z6iJxyWB/l/h31ETnl7P8b66PsZw7Xv72tOf1GrI+ynYz6
iJxyWB9lfzXqI3J9Tv8sxGN9kivOkitukisOkiuukStOkSvu1O2cG1dcqNu/
MC6/Xd/XmXH51fp+z43L79V6uDAuv1Tr59K4/Eatt6Vxjetan6umPetGz87j
eHL9O5fd1v2i8xmG/eVzjY4++/P97YTfk8s+yfP5QoPn84IGT/lX4LJP8nw+
z+Cyz7r9C+Oyz/q+zozn82p4v+fG83ky1MOFcdlnrZ9L47LPWm9L47LPWp+r
pj3rRs/OZZ+1/p3LPut+cfskr8/XGnaZz9canHJYp4jX52sNXrbTztc6+ox1
CjnlsE4RZ51CTjmsU8RZp5BTTn2+1hiH+Xytwav+8vO1xrjdX/15GL+sU8Tr
87XGOM/naw1e9bufrzX8Qj5fa3DKYZ2S7Y3naw1OOaxTxOvztQannEmPdr7W
8FP5fK3BKac+X+vos/p8rcEppz5fa/hB1SnklFOfr3WU9hWN87UGpxzWKXkc
8Xytwatx4edrDb+sOoWccurztYYfz+drDU45rFPEWaeQUw7rlDyueb7W4NU4
9fO1RlxRnUJe6dnP1xpxKJ+vNTjl1Odr5bzq10P8Yp0S2+nna404t7/67W3N
6Tf8fK0RF1WnkFNOfb7WiKOqU8j1efATx5YHik/DP/yeXHGTXHGQXHGNXHGK
XHGHXHGEXHGhbv/CuPx2fV9nxuVX6/s9Ny6/V+vhwrj8Uq2fS+PyG7XelsY1
rmt9rpr2rBs9O9e4qPXvXHZb94vbJznzQHHmgeSUwzxQnHkgednOkAeKMw8k
pxzmgeLMA8kph3mgOPNAcsphHijOPJC86q+YB4ozD6x4lMM8MNvJyAPJq36P
eaC4/ML+2z4PJKcc5oHZ3kYeSE45zAPFmQeSU86kx5AHZrsdeSA55TAPFGce
SE45kx5DHpjtf+SB5JTDPFCceSA55TAPzONo5IHk1biIeaA480ByymEemMfj
yAPJKYd5oDjzQHLKYR6Yx/XIA8mrcRrzwNwvIw8kr/Qc88DsH0YeSE45zANz
/448kJxymAdmP3O4/u1tzek3Yh6Y7WTkgeSUwzww+6uRB5Lr8//sh9PtiKP6
JFd8JFe8I1f8Ilc8Ild8IVe8IJf/r9u/MC7/XN/XmXH5z/p+z43Lv9V6uDAu
/1Pr59K4/EOtt6Vxjd9an6umPetGz85l/7X+ncs+637ROVHPLH8Tn/Qbfk+e
zzMcPJ9POLjskFx2SJ7PAxxcdkiez+sbXHZY39eZcdlhfb/nxvP5ddTDhXHZ
Ya2fS+Mxvrnelsbz+WzU56ppz7rRs3PZYa1/57LDul/cDslZL4jX53A+s3pB
nPWCeH0O5zOrF1I77RzOZ1YvkFMO6wVx1gvklFOfw/nM6gVyyqnP4Xxm9ULF
o5z6HM4xPvM5nINX/e7ncI7xPOW578/hHJxyWC9ke+M5nM+sXhBnvSDOeoGc
ciY92jmcz6xeIKec+hzOZ1YvkFPOpEc7h/OZ1QvklFOfw/nM6gVyymG9kMcR
z+F8ZvVCbKefw/nM6gVyyqnP4Xxm9QI55bBeEGe9QE45rBfyuOY5nM+sXojj
1M/hfGb1AnmlZz+H85nVC+SUU5/D+czqBXLKYb2Q/czh+re3Naff8HM4n1m9
QE45rBeyv+I5nIPr8+N3cY952sf4rt+TK96RK36RKx6RK76QK16Qy/+TxzgQ
ufxzfV9nxuU/6/s9Ny7/Vuvhwrj8T62fS+PyD7XelsY1fmt9rpr2rBs9O5f9
1/p3Lvus+8XtkJx5mjjzNHLKYZ6W2hPyNPKynSFPE2eeRk45zNPEmaeRUw7z
NHHmaeSUwzxNnHlaxaMc5mlJ/yFPI6/6PeZp4hrPytPIKYd5Wra3kaeRUw7z
NHHmaeSUM+kx5GnZbkeeRk45zNPEmaeRUw7ztGz/I08jpxzmaeLM08gph3la
HkcjTyOvxkXM08SZp5FTDvO0PB5HnkZOOczTxJmnkVMO87Q8rkeeRl6N05in
5X4ZeRp5peeYp2X/MPI0csphnpb7d+Rp5JTDPC37mcP1b29rTr8R87RsJyNP
I6cc5mnZX408jVyfk58I8U+f5Gm9knmd1h8DV9whT+uDgaf1vsDT+l3gaT3O
4vvr5r7OjKf1L7vfc+Npfcr0cGE8rR+Zfi6Np/Ud09vSeFp/MX2umvasGz07
l53X+nee1hesX3R+6XPLr8SndoTfk6d8KnDZG7nsjTyfRz247I1c9kYueyOX
vZHL3ur7PTeez0+mHi6My95q/Vwal73Velsal73V+lw17Vk3enYue6v17zz6
S+8Xtzdy5u3izNvJKWfqbju//bnl7eSUw7xdnHk7OeUwbxevz29/bnm7eH1+
+xgn+6s/53ix89ufW96e9G/ntz+3vF2cebu4xqHydnLKYd6e+tHObx+ccpi3
izNvJ6ecSY92fvtzy9vJKYd5u3h9fvtzy9vFmbdn++f57c8tb4/t9PPbn1ve
Tk45zNvzOOL57c8tb4/t9PPbn1veTk459fntw2/m89sHpxzm7eLM28kph3l7
Htc8v/255e1xnPr57c8tbyev9Ozntw+/r7ydnHLq89ufW95OTjnM27OfOVz/
9rbm9Bt+fvtzy9vJKYd5e/ZXPL99cH1O/RPilj7JFY/IFV/IFS/I5f/J5c/J
5Z/J5W/J5T/J5Q/r+z03Ln9V6+HCuPxJrZ9L4xrvtd6WxjUea32umvasGz07
lz3X+ncue6v7Rfb1Tct/xCe5X50gDxo85zWD5zxl8Jx3DJ7ziMFzXjC47Io8
x+3BcxwePMfVwXOcpB4ujOc4Rv1cGs9xhnpbGs9xgPpcNe1ZG89+l+28avTv
PPs59ovbFTnzZ3Hmz+SUw/xZnPkzednOkD+LM38mpxzmz+LMnyse5TB/TnoO
+TM55TB/Fj98jvyZnHKYP4szfyanHObP4syfySln0mPIn8WZP5NTDvNncebP
5JTD/Fmc+TM55TB/Fmf+TE45zJ/FmT+TUw7zZ3Hmz+SUw/xZnPkzOeUwfxZn
/kxOOcyfxZk/k1MO8+fcLyN/Jq/0HPNncebP5JTD/DnqLebP5JTD/Fmc+XPF
6Tdi/hz1H/Nncsph/iyu65Q/k+vz8O9eWJ4jPn3/Q773YXDFF3LFC3L5f3L5
c3L5Z/JD+18bl/8klz8kz+8RGDy/F4B6uDAe/ZDr59K4xnutt6Vxjcdan6um
PetGz85lz7X+nedz3dkvblfkzHPEmeeQUw7znNQee5/I4GU77X0iLyzPIaec
+n0iLyzPqXiUU79P5IXlOeSUwzxHXONHeQ455TDPSf1o7xN5YXmOOPMcceY5
5JQz6dHeJ/LC8hxyymGeI16/T+SF5TnizHOy/fN9Ii8sz4nt9PeJvLA8h5xy
mOfkccT3ibywPCe2098nMvyX8hxyymGek8cj3ycyOOUwzxFnnkNOOcxz8rjm
+0ReWJ4Tx6m/T+SF5TnklZ79fSIvLM8hpxzmObl/+T6RF5bnxHb6+0ReWJ5T
cfoNf5/IiB/Kc8gph3lO9ld8nwjr6nfnAPxsxJt0bkz4nuLPz7iO9dJ4Oqcl
8HTuSuDpHJWfMT6+Ni4/SS6/R57OIQk8nStiergwLr9R6+fSuMZ1rbelcY27
Wp+rpj3rRs/OZbe1/p3Lrup+efPu3/2K5Sfi0/2E35PLfshlP+SyH3LZD7ns
h1z2Qy77IZf9kMt+yGU/5LKfWj+XxmU/td6WxmU/tT5XTXvWjZ6dy35q/TuX
/dT94vZDzjxWnHksOeUwjxVnHktOOcxjxZnHVjzKYR4rzjyWnHKYx4rL7pXH
klMO81hx5rHklLP/b8xjxZnHklPOpMeQx4ozjyWnHOax4sxjySmHeWyyq5DH
klMO81hx5rHklMM8No+jkceSV+Mi5rHizGPJKYd5bB6PI48lr/xAzGOT3wh5
LDnlMI/N43rkseTVOI15bO6XkceSV3qOeWz2DyOPJacc5rG5f0ceS045zGOz
nzlc//a25vQbMY/NdjLyWHLKYR6b/dXIY8n1+em7+MA85FN81+/JFRfI5efJ
5bfJ5YfJ5VfJ5SfJ5ffI83uRBs/vORpcfoZcfqPWz6Vxjetab0vjGne1PldN
e9aNnp3Lbmv9O5dd1f3i9kPOPESceQg55TAPEWceQk459XvNZpaHVDzKqd9r
NuxYeQg55TAPEZfdKw8hpxzmIeLMQ8gpZ98Kf6/ZzPIQcsqZ9GjvNZtZHkJO
OcxDxOv3ms0sDxFnHpLsyt5rNrM8JLbT32s2szyEnHKYh+RxxPeazSwPie30
95rNLA8hpxzmIXk88r1mM8tDYjv9vWYzy0PIKYd5SB7XfK/ZzPKQOE79vWYz
y0PIKz37e81mloeQUw7zkNy/fK/ZzPKQ2E5/r9nM8pCK02/4e81mloeQU079
XrMRD5SHkOtz+nchTnw3/j3bt/3SeFofCTytd1g9vDAu/0me1he+y3P9PjKe
5v8DT/P5gaf5+cDTfLvp59J4mg83vS2Np/lq0+eqac+60bNz2Wetf+dpPrbI
Kw5/5x9Y/iA+6Tf8nlx2Qi47IZedkMtOyGUn5LITctkJueyEXHZCLjshl52Q
y05qvS2Ny05qfa6a9qwbPTuXndT6dy47qfvF7YSc+aQ480lyymE+Kc58suJR
DvNJceaT5JTDfFJc9qp8kpxymE+KM58kpxzmk+LMJ8kpZ9JjyCfFmU+SUw7z
yWQ/IZ8kpxzmk8muQj5JTjnMJ8WZT5JTDvNJcY1/5ZPk1biI+aQ480lyymE+
mcfjyCfJKWfSY8gnxZlPklMO88k8rkc+SV6N05hP5n4Z+SR5peeYT2b/MPJJ
csphPpn7d+ST5JTDfDL7mcP1b29rTr8R88lsJyOfJKcc5pPZX418klyf/3o/
vO05vZfG5bfJ5YfJ5VfJ5SfJ5ffI5cfI5ZfI5WfI5TfI5QfINa7JNU5rvS2N
axzV+lw17Vk3enYuO6z171x2UveL3i/2yuK7+HQu5svxe3LZA7nsgVz2QC57
IJc9kOf3FQ6e3z84uOyBXPZALnsglz2Qyx7IZQ+1PldNe9aNnp3LHmr9O5c9
1P3i9kBev99z2MGUjwR7YF4nXr/f85XldeSUw7xOXHamvI6ccpjXiTOvI6cc
5nXizOvIKWfSo73f85XldeSUU7/f85XldeSUw7xOnHkdOeXU7/d8ZXkdOeUw
rxNnXkdOOczrxJnXkVNO/X7PV5bXkVMO8zpx5nXklMO8Lo9rvt/zleV1cZz6
+z1fWV5HXunZ3+/5yvI68sov+fs9X1leR045+//4+z1fWV5XcfoNf7/nK8vr
yCmnfr/n8MvK68j1eZg/nDfrPu++f5frO4Pn9ZrB8/rL4PKT5Hl9ZPC83jF4
Xr8YPK9HDJ7XFwY/qOXbxjWuyfN8/uB5fn7wPN9Ofa6a9qwbPTuXHdb6d57n
k9kvbg/k9Xrf3OJ4xaOcer1v3qz3zZv1vnmz3jfsLK/3DU459XrfvFnvmzfr
ffNmvW/erPfNm/W+Qzt9vW/erPfNm/W+ebPeN7c4Tk459XrfvFnvmzfrffNm
vW/erPfNm/W+ebPeN7c4Tk459Xrf3OI4OeXU631zi+PklDPp0db75s1637xZ
75s3633zZr1v3qz3zZv1vnmz3jdv1vvmzXrf3OI4eeWXfL1vbnGcnHIYx7Of
OVz/9rbm9Bu+3je3OE5OOfV63/C/eb2Pz28fPj8Pfjn6789tPv3UePSvn3+f
/v+18ej/Io/+LPLonyKP/iby6D8ij/4g8ji+I4/jNfI4/iKP48n1uWras270
7Dzao+vfebQX7xe9P9Hjr/jkB8LvydXv5Op38vS8Q+DpeYfA83tXB8/vUR08
Pe8QuPqdXP1Onp53CDw97xB4et4h8PS8g7Vn3ejZufq91r/z9LyD9Uvd75HX
7xf2/Iqccphfics+lF+RV+309wt7fkVOOcyvxJlfkVPONE7s/cKeX5FTTv1+
Yc+vyCmH+ZU48ytyyqnfL+z5FTnlML8S13hTfkVOOcyvoj37+4U9vxKv3y/s
+RU55TC/Emd+RU45zK/EmV+RV+PU3y/s+RV5pWd/v7DnV+SUw/wq9y/fL+z5
VWynv1/Y86uK02/4+4U9vyKnHOZX2V/x/cKeX+V9BNyH4N/J8/4Bnqfz2nhe
3+f7RD8yntffB8/r6YPn9fHBNd7JNX7J83o0z9lcGs/rxYPn9V+2Z93o2bns
rda/87weyn6p+z3yep/JqcVZcsphnM1/j/tMBq/a6ftMTpt9JqfNPpPTZp/J
abPP5LTZZ/JOn7bP5LTZZ3La7DM5bfaZnDb7TE6bfSanzT6T02afyWmzz+S0
2WdyanGWnHLqfSanFmfJKafeZ3JqcZaccup9JqcWZ8kph3FWvN5nctrsMzlt
9pmcWpwlr8ap7zM5tThLXunZ95kMf5T3mQxOOfU+k1OLs+SUwzib/czh+re3
Naff8H0mpxZnySmn3mcy/GbeZ8Lz494c7Kbwp+Tyk+Tye+TyY+TyS+TyM+Ty
G+TJfwSucU2ucUqucUeucUSucUEuO6/bs2707Fx2Vevfufq97he953dh8VF8
8mO/z/eYD67+JVf/kqf3JgSe3wM+eH6v9+DpvQmBq3/J1b/k6l9y9S95em9C
4Orfuj1r4+rfup1Xjf6dq3/rfvH+JWeeI65+VZ5DTjnMc8SZ55BTDvMcceY5
5JSz/+bvqV9YnkNOOcxzxOv31C8szxGf9GjvqV9YnkNOOfV76heW55BTDvMc
ceY55JTDPEeceQ455dTvqV9YnkNOOcxzxJnnkFMO8xxx5jnklFO/p35heQ55
pWd/T/3wI8pzyCmHeU7uX76nfnDKYZ6T/czh+re3Naff8PfULyzPIacc5jnZ
X/E99Tzf9s2hbrTzMhbG5d/I5a/I5X/I5U/I5R/INd7JNX7JNR7JNb7INV7I
Zf/ksue6PWvjsre6nVeN/p2rf+t+efPu73/rfT9NfvcpfolP8e7l+D25+pFc
/UiufiRXP5KrH8nVj+TqR3L1I7n6kVz9SK5+rNuzNq5+rNt5ZVz9WLf/uukX
70dy5hvizDfIKYf5hjjzDfKqnTHfEGe+QU45zDfEmW+QU85k9yHfEGe+QU45
zDfEZa/KN8gph/mGOPMNcsphviHOfIOccphviDPfIKcc5hvizDfIKYf5hjjz
DXLKYb6R+2XkG+SVnmO+Ic58g5xymG/k/h35Bjnl7P8b8w1x5hsVp9+I+Ua2
k5FvkFMO8w1xXad8g1yfh372OCU+fQ+/J5e/Ipf/IZc/IZd/INd4Jz/cz7eN
azySx3EZucYLueyfXPZct2dtXPZWt/PKuOyhbv910y/ej+SMU+KMU+SUwzgl
zjhFXrUzxilxxilyymGcEmecIqccxilxxilyymGcEpe9Kk6RUw7jlDjjFDnl
ME6JM06RUw7jlDjjFDnlME6JM06RUw7jlDjjFDnlME7lfhlxirzSc4xTcdzF
OEVOOYxTuX9HnCKnHMYpccapitNvxDiV7WTEKXLKYZzK/mrEKXJ9TuPK3tfy
2njyZzYP+JFx+Q1y+QFyjWtyjVNyjTtyjSNyjQty2Tm57LZuz9q47Kpu55Vx
9Xvd/uumX9693+37ry2+iO93U/xR+D25+os8vTct8PTetMDVX+TqL3L1F7n6
i1z9Ra7+Ild/1e1ZG1d/1e28Mq7+qtt/bbzrL3LGfXHGfXLK2X+LcV+ccZ+c
chj3xRn3ySmHcV+ccZ+cchj3xRn3ySmHcV+ccZ+cchj3xRn3ySmHcV+ccZ+c
chj3xRn3ySmHcV+ccZ+cchj3c7+MuE9e6TnGfXHGfXLKYdzP/TviPjnlMO6L
M+5XPMph3M92MuI+OeUw7kc/EOM+uT4/fudvGEc+xnf9nlx+hlx+g1x+gFzj
mlzjlFzjjlzjiFzjglx2Ti67rduzNi67qtt5ZVz9Xrf/2njXX+SMI+KMI+SU
wzgS2xPjCDnlMI6IM46QUw7jiDjjCDnlMI6IM46QUw7jiDjjCDnlMI6IM46Q
Uw7jiDjjCDnlMI6IM46QUw7jiDjjCDnlMI7kfhlxhLzSc4wj4owj5JTDOJL7
d8QRcsphHBFnHKl4lMM4ku1kxBFyymEciX4gxhFyfU52GvyOPsnjfFTkcX4p
8jhfFHmc/4k8zudEHudnIk/jLPA4f/Lbv8n5uO8Yj/Mb3p618Tj/4O28Mh7n
B7z918bVLwc9uf8Xn8Zp+D159PeRq1/I1S/k6hdy9Qu5+oVc/UKufiFXv9Tt
WRtXv9TtvDKufqnbf2286xdyxl9xxl9yymH8FWf8Jaccxl9xxl9yymH8FWf8
Jaccxl9xxl9yymH8jf0V4y855TD+ijP+klMO46844y855TD+ijP+klMO42/u
lxF/ySs9x/grzvhLTjmMv7l/R/wlpxzGX3HG34pHOYy/2U5G/CWnHMbf6Adi
/CXX55T32z7Ij4zLD5BrXJNrnJJr3JFrHJFrXJDLzsllt+Syw7o9a+Oyk7qd
V8bVj3X7r41L/4f7+Mj8s/jkz8PvyaV/cumfXPonl/7JpX9y6Z9c+ieX/uv2
rI1L/3U7r4xL/3X7r413+idnHBRnHCSnHMZBccZB8qqdMQ6KMw6SUw7joDjj
IDnlMA6KMw6SUw7joDjjIDnlMA6KMw6SUw7joDjjIDnlMA7mfhlxkLzSc4yD
4oyD5JTDOJj7d8RBcsphHBRnHKx4lMM4mO1kxEFyymEcjOM9xkFyfU7n6P/O
uflh8el7+D153JcbedyXG7nGHbnGEXnclxt53JcbedyXG3ncl+vtWRuP+3K9
nVfG475cb/+18U7/5PTD4vTD5JRDPxzbE/0wedXO6IfF6YfJKYd+WJx+mJxy
6IfF6YfJKYd+WJx+mJxy6IfF6YfJKYd+WJx+mJxy6Idzvww/TF7pOfphcfph
csqhH879O/wwOeXQD4vTD1c8yqEfznYy/DA55dAPi9MPk+tzsr8wzuN5tpGn
cW/zFBfGNb7INV7IZf/k8bzWyGWf5LK3uj1r47KHup1XxuN5pN7+a+NZ379q
/lN83+q/+4p+dFxPruuzv+S8z4Vdn/0i96N/267P/m9cT67rs58b15Pr+uzP
mK8v7frst7hP8Tt2ffZP3N+wsuuzH6J+1nZ99jc8N8Gvz36F+ryy67P/4Htt
/frsJ6j/a7v+8N3tk5xxXJxxnJx2qO+0tygn2pU47SfXY0vjtIe8H2XVtGdt
nP2Y23llnP2S239tnHpmniPOPIec+tR36jPKifrMdenSOPUpTn3m9qyNU5+5
nVfGqc/c/mvj1CfzPXHme+TUm75Tb7kOXxqn3sSpN3HqTZx6y+28Mk695fZf
G6femN+KM78lp37y/MKylBP1k/dXrYxTP+LUTzwnIupHnPrJ7b82Tv0wbxdn
3k5OPeT9398xTj3k55rWxqmHeC5G1IM49SBOPbDuEGfdIc66g5z3m/exrYzz
fsV5v+K8X3Herzjvl/WROOsjcdZH5Lyv/DzYupQT7yueVxLvS5z3Jc77Yr0m
znpNXO3b/9V9vUZe+/l14+fXjZ9fN35+3fj5Ud+Js04UZ51IznbGc15iO6Oc
2E5xtpN1aNT/nxV/V39PdSh57eevGj9/1fh5XTfas9fW7xbyWc+S8+/qO/8u
69+on78u5LD+Ja/987XJZ10srutUF5Pr89285c1R8/Ou3fb7jv+yP93fJT/8
ndubmt8bP/Tvl831D8YP9evfNnJ2xg9+48j0dpB/bPyw/+Ubxg9/98T4IR9+
YfzQnpnxw/eXxg/tnBvP50ix/YvGHl4393VmPK+j8n7PjWPdCnq4MJ7zd+rn
0jjWfaC3pXGsy0Cfq6Y960bPzuV/av07x7oD+kXj98c3k35/9OMb8akbnsaN
xk++/u5m2jf3J3fv+eG805/eTO3++U/f85f72/vi/kbjLcvZ3Ez9/fQp/um7
8Tep5ZMv3/N9nrh94hqf+e9uD9f/fPueT2bxNF41bsUP/fM3N5Nenj5zex5v
pr/z9Ck+3c/T+NY4Fz/o9e9vpvnCp8/c/t1BD5/s3vM/3Yt/4vIL4of36Xx1
0OfTp/gk/slPyF/k+z367M/3t7Ed/DBujj+bmvn0KT69X+3Jr8i/ZD08O8xT
PH2Kf/zO30zj5ze+keU/cfmjrLfnBz09fYpP7X7yT/JT4ofPbx7a89XgB32+
81tPn+l+n/yZ/Jr44X5+5XAfT59Z/7PDv/tkluX/gvdW8z3FH3pfId9b170H
Z//fX3Te/pQnb/n+Yj8/dqoffsE5eFMdGs4H+tA5M9O81kt/HnyavwrPU37o
eT0+F9bt8//Qfk7uJ9y3+hftS5n0E9ZLu/W7D80zd/N73TxhN9/YzVt285/d
PGo3H9vN63bzw908czdf3c17i3fz5N08POftv+686Ned3/u681dfd97m685j
fN16/+vWy1+3Dv26dd/Xrb++bn30deuaX7ZO6db1un0X3b7E7nmB7nm07vl0
+Vvy7py37pzb7pz57v0+3fv7FO9qOTPjirPkitfkh+/fbPT/3LjyjVqfz4wr
z6n1c2Rc+VV9vzvjyuvq9j8aVz5Zt2fb/N0vG/mbRs5Pm+vvGv5j40fpx3k9
vnL98HuB1+N31CH7/38beO0fRj2T/cmhXnL/M+qi7K8O9Z77t1FfZX94dFT7
z1GnZX970IP751HvZX9+uC/3/6NuzPHi6KiOL6P+zPHocL8ev0Ydm+Pd0VEd
H0c9nOPpod72+Dvq6hyvj47q+D7q85wPHB1x31T8u3Gf21H4+dzywTFfoOeA
xKf80fLNMe+Q89ODXf2a5bn6GedciUz5j+XXYx5E51GL8/0O8e96vn90xPdj
iuu73q8qPvWL1StjfmeKi4FParZ6aMwT5frpnd7uWYdhvinwSQ9W/415q8kP
Bj7dltWXY/4r16MH/Sy/YF075tGmvxP4NE6tnh7zcVMcCnwSY/X6mNfL9f27
9vyQ8wRjfnCaV/jjwadx/QXnJ8Y84/RnAp/cwKec/xjzlXm+5N3PTzjvMuY9
p/b/JfntzaSOv7h9zye9/BXngcbPL+b3xtl+3jc59Znl7Iyzf7P8Y+O0t/x3
T4zT/nN7ZsY5HnM758bpH3L7F8YPP/RXw8+R03/qh35YP/Tn+mFc0A/ji34Y
p/TDeKcfxk39MP7qh3E8t2dtnHlFbueVceY5uf3Mr/TTrY9onsGvz39vzLtm
fm88jyte/2Cc85lZzs445yGz/GPjnCfMf5fzgRxXbM/MOOflcjv53i2OK7af
52rrh+eLcFwNznmqfL+cX+K4oh6434njivrhvhSOK+qN+xM4rqhProNzXFHP
zvO4ov6d1+uV+nnT8q7e0Sfro8zvjLP+ytdvjLO+y3K2xlk/ZvmPxlmf5r/L
cfvG6t/cHo7nN1Zf53Y+M876Pbf/ufHD5zeNcz5Bn5x/yPdLv/DG5jeyHl41
cvw9fR96fx95dz4/53/02Z1b+KFzjci752c/9DwR+eHzl1/3/xDv9ht0+xxq
/9DvD+n2t3T7drp9St1+rW4/W+1v+32V3f7Vbv8w1yP+P6+9cp0=
    "], {{
      {RGBColor[1, 1, 0], Opacity[0.5], EdgeForm[None], 
       GraphicsGroup3DBox[{Polygon3DBox[CompressedData["
1:eJwtkbtKxGAQhY9rssZkk42srYWNWLg+gb3lgoisrSAKimvh9QG8gAiCD2Bn
ZamgzfoCXkBBUFAQvFQWioUWgt8wKT6G5P//OefM9E+1xhZKkgahE/7K0niX
9EgdyKUJqMF2t3QHc/AdSyOJdE/dDaQE4sDv9hb325m0CC1Y5/sQZmCUvpeh
dAF76E0j2kFtpNJvRfqBdlVag1X4CP2N3X/mbAs2odQjDcEnPa/wUuPfMbWP
N7do3sBO1XtZn/1IeoHlyN995f7Wsj6VPW+Tsze+X+EIvWGoh977JPH+S2Q+
hyZsZJ7TMh5U3J95M52VQuuaXAnnp9Q89ZyW0eb3EPsMbTazxXzeM89g/m02
thubTxC5P/PWCN2feTMvk4Uf0zlLXct2NV/sqx74nmxH/6VJRIg=
          "]], Polygon3DBox[CompressedData["
1:eJxNnXm8zVUXxi/nnnvuOXc49x5FaURKkyRFE5qLBqVRg6g0kFkhsxIRUSIi
UrxKaRSNplJpREqRBiVKKk3S8D7f1nM++uP5/PZee++1157XHn+12nc5r3PV
goKC6iUFBYV8kwUFuwq9ZLlJqJA5K3SRuatQTeac0F3mHkJvYbdkhMP/zPKC
gmS2oCAhPCRzzVxBwe7C3jIfUR7hCA9f+BEP8cEXfg3lZy9hT+Fw4SrREnKr
IrSTub5ouwu7CYfaD373EBoIGflLC9fL7w2FQcOtpnCYsHda/IV7iwsKJgif
JAoKPhZGKxPGVA0/NR0HccEHfinh2sL4FgkdCsO+OFVQsEhoIBwudBKtNBly
EH9hMuQnHVcXRjjCQ8dOnuztNJP2smSEh8+NhZHv5D907O3LxEsoE0qFKyk0
uf2t7xVCU5mbCQtlfkU4TubjhZdlfkk4UuajhOdkniccmww/uL1YGG6NhfmF
4eckmU8WXpV5qdBE5qOF52VeUBh+oWEmzInJCIPfJcIJyaBhXiw0TwYN8yJh
rcT/RHhSdeQJoa7c9hNuldtthfHFXlsYUhhxHyO8UBgyNJT5COEZmZ8WGiUj
jaTt2cJwg4YZP+QNMhA3eUTekGfkFXlEPSM/yVfqG3GRR+QNcd4i7CH77kIf
3FVmRwsfqCxWC6eL9o3wtXCqsMl26GcILYVvTcf+ne3QzxS2Ct8LZwvnFEa5
/iVc7vI92+7f2f+5wo8Oh/+fbId+nnC+8LPp2H+xHfoFwu/Cb8JFwsWW+yvh
FMs/QNhbad1T6Gd/v5kP4ckH2j/9APnRRvjDfC+23Mi/Q7jU3z/sD/tHyrPj
yiMfyb/99M0K5UIdYYVoR+m7r/CezD8L24RpwnR/sf8oTPX3B2GK7WOFDcIX
whhhtPC5sF4YZX/4/16YLAwsiziJq7/wm/CrMEN4SFhpd/wNcrgtwiSH/1bY
LEwQJpZF30TbXi7zm2XRF0HD/IbwjbBRuEcY73CbTR9vOu5fCeMczxbHM9H0
DU7nOKfzc6eT9O7l/uWtspCBdL0r9HP6+tk+X7hGyMlvNWGRzAuFCpkrhVdk
fpl+x2XzoswvlEVZ4Qe3l8oi7C7C4rLgQVh4wgseu8pcXVgq85Ky8AsN82KX
y6fCSJdPTfff5NXrLodfXQ8o/yFl0fZWujxW2w59qHBbWdSx1bavsR36MMdD
fGuFEcJMYbvLnfIeLnzicMPs7xPT8X+OZDu7PMrsW5fNueVBx35eedi3uK4c
6Pwhn+oZ1ZxHBxg55/n+wvHl0T4+sgzE3cx07PvbL2VQtzxkv1zfS8sjDc3L
w/8nlv2K8nDH3x9lEabCbW4/tznKl3KuLTQuj/a3wnl8qMfeGsIhRg2X6cFG
dZfpQeYBr1KhljBYbb6W+ot9hIGFUTfRD3bLRR09yGHJowOdjjblUeakh7Z+
kewXlEdbh477xeVRJ6j7p8h8UnnUJdr2+eVRDuQ/9BPLo8xxP0Pm08ujDX3l
ttayPOj5toX7qeXRtihnyvvM8mijfPG/0W0Wf8T/udsi8RAf5UD+IzfyIBfy
/yNcJXs74a+y+F4p/FkWdr7YKbc/XLePdrlQHleXR3j4FOh7rdBBqCokhKRw
vekJ5xP5t81tqKr9w4fwlAv9Pf0+5cPYf4rwWmHoAPVkPkC4XebhwgeMrYy/
wiphpfC08JSwQpgrPJGMcfpwxm3GUo+5jL0L0CWsgzDO/lWpNAtvyrzZfl+y
TtPUfl9w2OMcB3E9KbzvMIR9Q9gkfCO8LiwTNgo/C9uEi4VLhEuFX03HfoHw
g/C90Fo4T9givCW0Er4mL9CHhK8cxxuO4xvHscx+8PuL0vKzsE0YVhDxEv+P
woVO28vWSUjjfOfJsdZzSAv5sUM4U+Z3hMeFx4S3hXedx4/b7T3n91y7ve+8
ecJui4TFySjXk2xe4jI+2WkhTuJqadleSYbOhowLzYOwJ7rcKX/0wH/1SqcB
2dHV5pmGuYn9zrO5seVCPvS0hjZTno1Me8VxnmgZnnacxHWk/T5tM2HIY/L6
J2FIQeTzDy7XC12uW1yulC+61I36dkyGTtVe33bCFzJ/WRj0G5Kho31n3ejq
ZPjD/Zpk2L+y7oTu1VX2zsnQya7T99pk6IB5XRA74b627gd//OF+s743JUPH
QofqKXOPZOhs6FyUC3XhD+Ft2dejF4p2mbBO5rbJsEP/rDDSQXqgY0euG53u
rdbliI948roh8XVLhs7Il/T8aB1yjuveYUJ91zvqGm27gXCqcJrwuvwuEz50
+VPmq4WPXD+g4bYmGfV9vt0+TkYbX2C3L10/qadfmMc81yP6HtogbXGpsMFY
6jCE/SQZ/cXz5r02GX3KC3YbqzpylzBP488zwnrXOer9pwZm2uk68tD1ET/4
pd3TZmgrLYTPk9E+FtrvF5Z9kd1Wuf5SZ1ea50uWCdmQA3mqCEUFkY6lztdT
bH7VeXyqzfQ1p5t2n/J8krCbUMPmyejppj0szBT2E+rYPEuoaxrm/wn7mzax
MHjCq3phzLHGCWOFp4QnhbuEMcIThTHHutt+8DvBPAi7q2W5X6hpmR4UZqAT
CPsWxhySMPcWxvwTt4eE2vbzkNNQx7SpwgPCXsKeDjfBce3iuKYIezjOKQ6z
p2nMC++xzMjOvHG8ac9ahntNw+1Q1/u5Mj9eGO2Aev+k0888ifkh80TmSw3c
NvJ5hZl+7mnnX1eV90Gy30Fby8U8mPnwc8JTuaDjzrjLeFvfbY+4kKG69a9X
y0KnZt5GX0TfdJLLcrZwgMv0CZfVaId/ymV5l+WbJkwX9hH2dthHhHrm8agw
B5mEA+32qM34ObEw+hz6mub2u1191e+VEQa9Af2Bef5tLrtpjmsvy/2F+SD/
m5aBdLxRGOsKM1xvlhgPWubFxnTzXGRMczwLzQNe1HP6qJdcR6iXLxqYaTfM
9192nbnffllzoD1Qp1nzQC+iPlIv0Y9oi4z/Z7hNLnMf0cK000x/w/Gf4na8
zLzGu75Rd6vZD7LSTpc5joecB0tNm2kZCM86xlTL/LLT/IBpuC13mc123jYQ
3iuMulxfeN926IcLRwgrTce+ynbojYSjhNWmY//QduiNnUfkFW1yvvN0kvOQ
vGQco35QTxjP6Pj+0Weu6v7jwseirRGOFo7xd43jaewwhKUOvmU86jQud12g
ftC3UKfhC3/WnVhvYsxcKxwnHO8v9o8dH/WYsbRZYdTnZravs3/WCZmjMjdd
VhY6Njr1XJmfKIu2yXzptbJoo2tKNc4J/YUBQkfhNWGpcL3wpvCG0FnoInQT
3jK9i+m4LxM6CWuFT4RBwmDTXzPfTo6H+FYLtwhvmx98uwtfCxuFO4VRwjfC
JmGMMFq4Unn0qb5DhXa5iIf41lh+6J9aDuL/QvhSGCEMt3mDcIdpGx3HaMf5
lWUg7pH2+5XNhPncPOF1u9BTeNfpQP6bhRXCe0Iv4fCyWCNhbeSwsliTwQ69
odCoLNZ8Jts+1XboRwrHeI2BtYUmwsFlsQbD2sqBQuOyWHOaav/5NajG9v+e
5etpeeqVxdoMazH7Wy7WeOpbPsrlA6Gvy6ev7SuF3v6ucDqxN3RalrjOHGnZ
X3PZ59eMkPsQx0N8421nHYW1p5uFm8qirDcLd7nM4Qnv61wfFwkLhWuEDsJ3
whbhbmGcw34rjDUP5GjkvIXXJcIzwlPCRcKztkNvI9SQv+rC/2SeLbQWHhfm
COc63JPChQ5/oe1zhfOFR4Xdy4IP4eEDv12EmTI/KFTI/Lu+00pj3fxXfX8p
jfVz4tpT35plESc03H4WSmSuLIvw8JlRGv6I71HLSDzVhIdLIz6+1RwO/5cJ
zzndpHe+7dAvF9oKz5t+uWV8QDhZOEU4zWmYZvsM26GfLrRwnDNsz+fBWcLZ
wiRhstBcaPYfGQnX0v7+Zzr2Vs7T2Q5P2PuFE8zjZMs3TDhYeFl4SWgvXOV6
stB07C84faTzytJoR7SHem5P7R3+BbvPcfytXP5zXR9au7yRpZr6oVwuZKKe
Ul+pp9TPXUXfJRdlXFa2c823rtsfa4QDXeeoMy1YAyqLPo0+rI3MlwpJoVA4
1n0CfSZ9Dm37eNPzfekxbvv00W0V95ll0SfSdzZx30CfjTvxEN9pHgualgU/
+NJ3XCjzRUIV1nOEi4VLGFdYqxHOFc4T/pTfHcI5MrcS/pB5e2nEe6bTRXrw
21r4qzTCYD5f+Ls0aBc5jqqO84KykIG4/ykNvxfYTJhWloG4iZO+qXlZpAP5
6btOkvmEsui7ujk/ydeuQnfhMtNw6yFcbhpuPYUrTOvhfqqdcKX7qxudP8jY
SegltHWYnvZzpWm9LAfyISfydHR6SNcNlqmN87iLy+XUshgz82M19pPLoq/m
S/pIJ/ZLHL7QZXSp01LkOtTZ+XuRZe/iuC62W++y2NNr57RST6gv9Ov0533K
Yr+vvf3St7Bmz1o9fQxr1DNcR6mTs8piDft4l0kN1cHqueABL9bhFznuG21e
bLmgsabN2vY+wr5lsc7/kvPq+rJYw1/osOT/y6ZhJm9rl8Wa+giH38f8WDvf
qyz6TtbmaYf5vp/2yF4EfSntlPbK2n+dsp17FNXsPtTh4VPT/kY63jqOh7X9
PR3fnrYPtX/SusTl3sVm5k3dTMOMntbdNHS4ua4T1A3a7lOmY3/adui0Odre
s6ZjXyA8L1wrdBAeEWaXRZ2kbl6RC/+Eo++Y7zAdXMaEZZ/lOvOg7s0xnxMs
F/I9VhZ1Ex0UXZS639NmxvybTCNt6KI9nEbqCfWFenSs3ZY5bA/H/aLLHhle
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
o4e3VGZYl+ZNFe5izfRYVtdjzEzT6yV3zqFz5scaBjotd9Lyd9dmO1w985nh
eODHWze3WbfJv4UzxLpMFfOFP3Nz3gR6OhdjBWMH9zF5e2e4dR3e3smPMfjj
ftww8y+y+1DzTzg+4kF3KkjufNtloHUL3lYhH9D5azk/eMtkgvOtuum4Mxfg
bjznXDl7fIHPQHJXiDvk3B3nzhBrNNjX+o5Q/g75yv/cncLOXXLuVBGOO+Fr
fOeIu1fnJOOeIXey8If9Pd/B4g4zd5lX/+euFXbiWeW7UfDDH+6TrZNwJzF/
NxE7usnu/k5wund3ObCmknV58BYAc6TJDt/fOghvupB/U+2+t/OHu8HcCebe
I/cU0VHQZdnX5u0X6in1lXpM/YVPP/vDnbeP0A3RXXhDaYjHA+bNzJcHezzA
jO7WT+b+idBz0G/6e+xBd4I2wONRZ889h3q85W44PAd5bIEX+t9Aj0WYCTPK
/Tl97EiHZfweVhA87nB/TBsd4XGV8ZV2SXucZnmQ6wEDM3JPTYTugxnZ0YHg
jb7wi98LGOm4ieMOh+nncFMcJ3HTTwwX7vT4hczIPtrjV0e7TXD/zzhwr3C3
xxvGnXHCPR4/utmNe7zcja0UKmzmbmzONMzcWaxm2jjzYowbm4hypP2mXZ6j
XL6UM29ajbVfxsW7jM4eY8cI4z0+dbdskxMxBjEmTjJ6e8y6z7jZY9bERNTj
0Y6X+O73+NXHvCbaby/nzRTnLX7utww3Og9HO896WiZk6299Hh2ctf9b1Ced
LnozyikX36b4y4WdsexL2T9PxFjRwTrL7FzoR1WVh1WEc+V+XiJ0z6/13ZCI
sXBjIuxrrePC57NEjDnw+1TmdYkYcx7yWIQ79PzYjDvvnjEmwRd53rQOnFTc
hfRLorVJxJ1r7lk/4LrHvWnu6U5yXmPm7u5kl8Xevmd5v/N3H9+9nOL8hC/8
SSfpu1JIFUa8xIdf4pzqsmCtiffVXvH8mrF7legrEjF2fpAIezuP8dtl/j0R
Olcj2pLwSyJ0LHQtdPvv9N2cCF3+ALtvS4SuuCUR7vhDp6AcKI9/9D1D+EHY
mgidI69LbnU4/OPv70TUgTP8xf6n6wTfHa4T2NE9eH/uo0ToRHw/TITOkted
sJNO0kdZcPedfoUyod5cY939kVyka1Mi5ij5uQp26g31panj3+78OcL59avz
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
tB+dlxebX1PHRVrx84Pz9xznwffOa/aNyAPSTts60elFdvKAtLIX9VUm0rzO
eb/Y8iLnqy6TT50nbwivOz8I86ZpuMFnuWkbHMdr5gEv+qB3XaaU7deZGKOW
O+wX5r3M+fu5za+Z1zsOT1tlrGCfir2kb1w/2MeCttG8SRu0r81/o+vSW3Zn
n408Im/ob+DF/tQmy4cZP5stO+VEedFv0l+iV6FfUY6UH7rAAtdr6vPztkNv
7XpOfUd3YmwvLI1/VfDvi6q88Vwa/yDh3xbFpfHPkP6mlwhlpfFPkQG2D7Yd
enlp/PODf38cytuXpfEPEv45UiG0z8V/CG6328GmDzUfwve2PMiV5A3K0vjH
Rm/beVeSd0WbCI1L4x3Se3024pjSeHd0vM1H2+89NhOGf5Twr5IGvK1ZuvMf
Himnl3zgXyBVnB+khf+g1Hea+GcD/3JgT4W9Ff7xwD8WOHPAnkzSsrOnxd7W
bjLvXhr7sOzNVpe5Rmns23L2oi5vdpbGOQfOUbB3l7Es7NWVOO+hs4dXS+ba
pXFOgnMeu5YGT3hxLqPYaWGPjfD4rVMaZyoIg3m/0jiDAW3f0uAJL86J1JR5
j9LYd2Kvak+Z9yqNPSn2oXCDhhk/Y10mlMVRThtpJq2kkbB7l8YeFzzIC+KA
N3myT2nIQNycM8EvNMyEIR0plz35yT9LxjquI12W/IvmcJcp/6Tg3xXsabHH
xT8m+McFe3DskbFXxj8ooGPnnynYobNHyN4g/+KBjp1/fPDvD/aE2Btir49/
+vCvHvYM8//4gc5eIHTCwwd39traWy7k4R8b2KGzR8jch71B5rHMldijZE+P
OVJ+roSdvb09/b3b4bCzN0tdZV+S/UjSSXqJB/7Uw0LXZfZkq7puEw47+UR+
kc783hfp5d8n7LHxzx7+PcSeZ37vEzvp/tNx0166WwbaBe2DdkF74J9B/Dvo
CKGhzfy3ppFp7J3xjxj+FcLe2Qi30cPc5ijbOx2WMs7/U4Zw7P2xN3iJ6djh
w79H2IODH/9I4d8p7GmyZ8c/UviHCnt4+b1C7PjDHdnuct1q5HyAP/GQH+wd
8q8T+BAevvCnX6A/IF7i518o7BnyxT/hsNNXs17BOgZ9Nnvz9J20c9o3e6n0
ifSF7Knmddh9hH2F2pnQhW+3HR0Q3bCusL+/2NEd6/g7wuHqmA/80I32yoSO
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
BY8Lj1k/eMp+epkHY95c+8EvOsps4X/WEebbPMtjODrLI/azwGMwMj3hMRSd
Gl18iDDUtCccxyset59yGML2qwgdF92gb0Xo1MtM7y8MrAjd/3Xbh5g/uv8g
4baK0N3fcXzL7X+g3Zc4vU857pecF3MqdupcjzpNpO1y4QphT2EP4UqhnbCP
sLfQ1jTMe9lvW5sJUyG0ZhwXyoXLzBNeNYUqwsnCicI/Ku/2+l4l1BL2tUxz
LBOyXWoehN1duFC4SNhV2KUidKjhQhPhaH+xDxOO8pc8OtL2i4VLhBpCdZvb
CLuZ1sZx7m7ahblID+m6KBdxX+ywyMA8hfpHnVtqPOM8X+Kyp6ypq90r4h9b
93ntgfUIdMQZzrN8XNinOw+pd9S/G4TrK3bqtK3snu8TZ/rfQvilbnZ0mJnm
QdjrKkLvKHZfiv+E+07+qcS/lfjHJ/8M5h+/1/rubTv/t5M7uPxnt63v4hb7
zm5rh7nOZ5uvsFvKYfl3bal5XGve/EeYf5zyX1r+T8t/m/lfM29F82YzbzXz
ZvQc19cuQmebaatdTXvU9QW3G1230PXGuY6Ntx36KUKLitBN0VVP9xed8TTb
T7N9vP3DB93yBPOb6zKlLLtZlrk2d7U//KPLMpdmrjfS9ZT6OdnxI0dLlyPl
ie5/dkW0w0edlk4uy0ds7miZSAvtqKrDoWOf5fDMfdGx0ZWPM32K421p+kjL
dZzlHO1w/879c9HflngN4USn6e9stFe+J9gv6wMN5OfwypiXMZfD3LAy5mXQ
MB9RGXM0aEfybkplzGOYdzSqDBpm5iKHVQZPeDFXPFSyNHaY+rngRRj8wvNg
zlPJ3kQ4JBf+8M8ciTjqVwZPeDEXrW8/xHlYLnCkeTbIBRpZ5sPN+8BcrEmw
NtHYcbEGQRyHyHxoZcwpmedhJk7igoZMTSwTaTncaSBfGnquyHySeSTzR9Yy
WoreIhdzb+Zqp8h8ci7mZgflQh7kIu2s/Ryr7zG5WBNinDzWdMZL6EfnYg2p
yHP102Q/NRdzQui4N8nF2g7xMB/exXNE5DgjF3N+5Gkl8zm5mHMi83nc6fCc
uLX94f/0XKwNEA/y1/AcFDrx1/Qawpm5SO++XjNi7eisXNCxwxf+rf4z1yb+
s3Mx5+WL/zqeA5OnDV0nj8gFDnedapQLNHCdOBK5led9hGuFAypCb7hGuLoi
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
trOGzFryapk/yEbZMBesnYsywo217Q+z4edX4Zds7BlRZ8o9t5xvWafZfVs2
9pTI298dbrrj5gzMdufBdrvPsP1Pu8+0rPD5KRt7dvDbko36SL2c6LT97XD4
r1YR6+7vy/xeNvKB/J3jssqvEc52frNGzlr5SplXCD8IW7OxJ8geIbzwg9v7
pm+1HBMt108Oh394sU6/Khs8aTe0J9oV7Se/xrLJbqz5s6byk9Na4rWMZ13W
X2dj7Ya1nw0yfynsXxHpJH3ERRlSdquc9+wxwBd+7GvQZmgrH2WjLKFhpkyp
x9Rn2gZnd/J7FL+4zChXyhe55jnvWTshHfm0kR7WiugzkBP5kBN5oSM/6cCd
NRfCf+c8JN2kn7Ua8jC/ZrP1P2WBnXD4p6+r8FrGAstNnb/O8tMW3sjGnh5t
Ij+mME/iLQB0OHRD7pBzZ5y3H9Cx0HV4+4G75Oh8+MOdtwvQ5dAVeVsAf+hG
vBGBf+j4Jxzu3A0/zWMZ8REP8aGbcnecL+74w46Oh67Hm4W8XZh/U4U3lHgb
bLrbFHuc9M/4wz/+cEfHQ9fjjQnelEAu5EP35M0LzuyRPtLJGxT4wz907Pgj
faQT/+hg6GLMu5hrTXUdZ9+cPVbWXoYLHdOxBjPCduissdSxzoBuUMtfxvB9
0zvXZkY6HP5ZE2JtiDMB7Mn291jMXI65E3MW9CTmQcx/0JFvtGzM/9Br0IVY
V6ppv+hR1R2GtKCLFjpNXTzmJk1Dx0KvYp2phs3oSbubNth+apjnrY4zv3Z1
lGVnzszceYBl3sVp6GiZqzi/0GUP9tnTWS5nypu3cHibI9/GOYOQP4vwpfsy
9v7Huk/YYHfaNWPAa9mdbZrxjzFktdvCm9nYY6dNMC6z1kqbZ0yin68lvJON
/h5gfjsbY+56m9/Kxvi70fEjB/rBWvMnHsZ/xuzlpuV1gjfcLj+2jK9Zxg/N
F/7s2w9zHG+ZxzqHed1pXOOwmBnrBjks8g43j9VOO+MofSLv2vC+DW8J8a9Q
3kLhbCtvK/CWCmdcsUPnrZR/30BKxxsruFMuvFXEmymUD2/TTvTeKOe3oeMO
H8ITjvC0S9ojYxt7WfSr9KfsrU7yWW32WNmzpT+jX7vY5UB5cKZjuPPhLefN
bc7X5TZTpoxL6HPodYxPjAHoVOh9K41F9rPCebLEfvBLPaA+oCfRl/4fzj/a
HQ==
          "]], Polygon3DBox[CompressedData["
1:eJwt0bsvg2EYhvG7h8+pReswEl1q0AoTAzNbG9GWVdKvJhJU0u4t4hDCzsTi
sLH18wegrSZt2AhhISGVMBCXxPAbn+fNc72+qdmxGbukdtSgr1nqRyc68NQk
PSPeKJkIIwQPvHirl95RQRnLWMFNg3SLc1hYQBKDLdIAgl4pADscEDM2PNZJ
D9jGDj7d0hfucYdd7OHYKZ1gA+sIohdJZhYxiQk4YaDALUVYyGEVa+hhVwBt
aMWVS8oj4ZGmEUMUfnSjixY+uOFCngYFzNVK84hgHN/E/IGJBEYxghdDesU1
syVYyCGDLE554wwH2EcKaSw5aAsTcWySbAsX7LrEEQ4RQhgRbohiGEOo0v4D
Nmb+/rtEc3LJ+P/3X8nzQ+A=
          "]]}]}, 
      {RGBColor[1, 1, 0], Opacity[0.5], EdgeForm[None], 
       GraphicsGroup3DBox[{Polygon3DBox[CompressedData["
1:eJwl0l1ozXEYB/DnHO/GGUpZkVajjFpNXGBFZDIkdjEvRYzNDXk94s7WsLI3
V4gLL3NjrpxlXi7m/e1YuxOZKG6sLC4Us/mcdvHp3/f/e57fc/6/8yvcdWDT
/mRErGIURYmIOazkyHjvSPJ7UsQVLnNrasQNrjNsrY1WuuWHPGB2KuLt5Igs
22y8nR0cHBcxODbiLwkzkhRyR89tOnJ7+0HtdNKTH9HIWWrU1VLPP4aYrqbX
rHrqKFH3zfMry81bQTkdoyMWMJ/P+r7wh2vmXeIi89QVU0qXfe/xksy0iAnO
ppk3cpYPNOmpp45FehZTxm5r1aRp03OeDO8mRhzmEHflLt5T7Eyzefamkl/W
f/JD/wCDHDVjH7W84gXPeeIbntLHKTnNMZaQINjjrPvHRHzno1d9DPFa3sB6
+sz4RD9VespYSoW8jp3clzvJ0G7eTboTI3W5+mWcUHeSc2x2FpVU0SK3cpWZ
8izmMkMuoCR3Zu5KPilq7LWVLVyghWZ66SHLMx7ziFL9C1nDcHLkMuexd4r7
TBFr5Qo2kiKfAgb8uadpyD19z5ncvWA15VST0X+cNA16moxo5D+S7XEi
          "]], Polygon3DBox[CompressedData["
1:eJxNnHeYlEXWxd/unhlmhkndgwlQkiBZERAkZ0EyIhhAxTUjimIOCCYEZBdF
QZQgrEiSIJiVYEDFAAhiXBMGzBnj6n7n5z08fn+cZ4qqW7duqlvpbeqcev6Q
89JJknydnyR5+vtYlSRpVpgkhwnrVH5YaFwYdbTdLxys8iHCA1UClKGBdolQ
Q+WDhOUqPyscqXIHYbPKs4USlcuFOSovFPZReX9hkcrzhVxh1NEGDbTU0TZT
KCoMHvCaIRQURh1t+aahrVCYLmQKgwba/xVEHeW08LRwRGHIiKwbhZaFUUcb
NsAW1NG2UqhTGDbAFsiM7OiM7unCGI8x/lUlbIAt6LPSY86o8resh1sGxm4t
3FQQMkI3tSD0nicssE3Q+w7hLtsQvW93HW3b1a+n/vYWdqp8p3hk9beaMLcg
QHk/4e6C4HGXx2Csl1TfWX+7CVurBCj3NG/60Le68O+CAOUDhXsLws63WqYi
x8VDwqOOIey2WljrGPpnQdgBX91SEHVr3Ye+U20LaKC9TaiqcpkwqyBAOWtd
97Gt7nFM7e/yYvuIGCQWO1vXQscKcQbf/sK7wgfCIOu53H5HxwaeE8yFRu4z
x3FbZh/iS8ZpKxzqmHravm5fJcbFrp0Myti2q1Dbc4x5Vc88NrtPe9c9YBka
eK5i2yc8ZxtZNuK2qXnCm1joYZ3QrUqlfCUMUfkY4SPhQ8fFEutc3Tqh20Lb
OOvyIsdUNZeXuG8Pj/WGcJRtttI61XYdbW8LRxtv2+bY/gb58L+eA8wFdOtS
lCTdi0LH14WTVB4lvOV5+pSwyXN4QGHUvyMMNii/LwwVhgnDhQ+FXcLvHo9x
ry8IHvB63jmLeb/BYxzhOtpedAw1V59nhOeEFgUxV7YIr3jODPXYRbJ1YWXQ
QPuC0EroIrwmvCl0F1KOaWI5ryDmQceisAG2aOW+LwtthJ5CL+E/wttCR2GH
eXYxT3jna+y8yuhD321CO2Ob+9D3RI3zrLC5KOzc1zZ/y7btad1edY4hb9QX
XcOimHelzgnkggphBTKrrU1RzPs860YeqmIaaJcKlUJNYY3woFCrIHJT3aIY
g7Hqqu4R4XGhvmkedB1tvS0bMvd1rmHsdkWRV6p4bPJYsdBEeNI+xJfQQIvN
H7KPX7RP8e0yoUVR6IRu9S3LeqFhQeSaJmprXhQ5p9hjYRNsQx1t8FjmXIXt
6HOPZV0oLCr6W44lwnLHQBeXV3pO1BQmCVOEWkURq730t09RxCzrzgrbgdz7
e37kWfLonyr/kh95lTravs+PeUfe3ZMfoAwNtMyNfuI9sCjmAaA8pCjsxJiM
Dc0m5yXk7GXZvsmPucYYjMXcPE1tZxbFPCHOmNvUvWNfnuhYfN2+YKxji8In
uzyXz9G/zzYPeBVXxpy70fbBTjXch77HFUUcA8qMwVjY5DbPQeZiLdt2WtHf
cThdmOGYb+jyTPuwicuzHQPNXZ5jn3e37+63TVq4bb5jqpXLCz1n6nrs6R57
SX7MaeZypjJiZJFjhFhZpvbl+ZET/soNHusBx8Si/L/zArz6uO1h+6yfy4/Z
xwvzIy/Qh74D3bbOPp+fHzkEGmiHuG2jfXSsy0/b5nPyIwfRh77Hue1Z++Aw
x8wG596rUklytTBHuCsVa0df56K3vWco9DqM377SJvZc8T1f+DYvQPlC4QeV
B+vvl/kRh0Pzwzc1irVHKw4/fC6as/ODB7z+p/pLqybJFUJaaK+6t4V3hU55
UUfb1UK+8F/RX1Q1+tC3rWjecB/6MgZj1SkOPxM7+6i8f3HEDXW0HVwcMQAo
H1IcfgaUGxeHz+lDX3SY7TjJFQdPeA/3nGYen5AfsVReHDTQnuA25vZI2+Qb
96FvvnWbIBQKVYXrhBuFMqG1dNppHdG1zG2ThazQPy/siB8GCUcJu/PCzkcL
PYSPXEfbocJWYbtwODzFY7VQrlgvE15S+WXhPGGMcIGwTdhRNex+ntu3ue1o
j4UM/S0DshALx3iM7dYBXX4tjn4X2Zed7OsPhK55YYMJtgG26Oq2j6zLT8Uh
AzzgNYw6+ArHe8wfXEfbCOG/xJlwsml+dR1t+BhfNyuOvM/c6qxyt+KYV4By
z+KYR4By7+KYU8R9qdfZi/Ojjra+xbHGA8oDhJdUriqaKcSJUJYffSq8Nl/m
eVHFa+f5nmfFXtsY65T8WEfIo//Ij7mU57Wevsh+r7DUOhSqbpLHZOxubrvP
Oh0hzBXuFo4U8kVzvfvQt6dpV1nnlsKd7kPfrGimCzOEatZpmuto6yCaf1um
zh7jbtd1sE2wzWBha1HohG6sDWfkR5wQe695zp/hNnRG9yuFfVU+QBifH7m4
pWV7wGtLSXHMSeYmsXGh7U6MIGcT703QgbXjMOu5N68fYbnJ28QIsQLNSufq
DtZtnXP7kdaNNuxe33uXabZrXe+tptjWtby3oo11GTtsL4p1dmJ+7NmggRYd
D/A+bqLtjuzse2fmx9r+knnAizWbtXsn629RyNDQ+zJ0P9NjVa2MNX2kc9Xv
jjViktjExti6hs967K04d5O7/iO853l7qX31pvP2BNm4tvrVE67Li1hqpPqm
VSOmAOVDhTWOzQZVgwZa+tC3gXBjXuxTNltHdJ3gsXc5Z7DXbOuzHHvO2fmx
p2dNZG2krr3PhZwTiMt6VWPMpY7L2lWjjrYrNGZ19TtQuFrlB1V3OHlZeIRc
lBcxT6xfoPJkoZHKadkyVRk6oRt96IsO6AINtPCENzbCVlOFm4WmxGV+zJUD
q4ZMyIbMnXzufMH74tY+xz7pvfLhPiev99mEMylnUc4onGE4y3Am5WzKOaa/
z63QcnblTMVZijMsZ5ejfI7c4XNEbZ+T7ysI1PNZeVVBxMQy74nZG3P2ONBn
U/p+6LPwcJ8VOZcO9jnuA59te/tswV6Ec8ehPts/7rNIU5/7H/FZppHP4rRh
k64+J3MOQ6YGvkuAlroePidvc95YZT7MKfY8A3yufdc6H+2zM7YanRd5FJ/j
+7PyIk9SRxsxkHUuvCgvQHk/4VKvQaxFaf371LyYs8zdVo5V/HyHcFfVv+Ny
nrDAc+L0vMjRjMnY1xTHOspe6FqDMvumG4oDae+dblL5quJYN+lzjecivO/x
nGzq8mLPyXqWZZ5lIY6XCSs8B1q7zB6CvUQ79nDCWuazeSx2H/ruJ/xLuFWo
LlQTbnYdbcT67bZBbe9xJpummvvcapoDrVO+905TiyPnvOmcdLXr9u6r/qny
LcWxh4LvbV7L9jNf1rRT7RtsfLr3lSd47/au9zFDvXdjT0af6paFuYqP8TU5
g9yxTnXri8Mm2Obx4rATe63SysghrW072rZ7D80YO71XG5Afddu9DxzuvSay
XaI+PxTHvuhy4yf7GF+jM7qjM7r3zw9+8N3ivdUp3kt85H0WZdbZ3d6bjfRa
AO2s4vADNsN20JzhfQj7QGyata+gbegc9aTXnI/TSfKJ8JOwR2icVb3wklC7
MmIxKdHZqyTikNgqUbm8JGJsjWMrp39nXUdbRWXsYX/LRE4ll/6Ridj9TfjD
MTzPZcZY4Lj6QvjaMViofkXOweTiAud0cnkifJeJOY2ff8wEKOPrn1UeK74v
CluEcUJ909DWQtg/Ezyoo415UVQSOq7wOnasyscJH3vuFJQEzTKvdUNKggZa
+F7hdQTdsRm2o89i64Ru33nefJ2JHIUOyJHJizVpsnV9MBPnDM5Sj2RiHg0s
iTEZmzra2Lc/nom1vo/a+pXEvAOU6UPfZzJx7uCc8JzKT2ZiH08dbf/JRE5k
3r2XCZqjfZZ4IRN7v14lMQZjrc/EmQAe8OIc0r0kaHY4b/xsn+N7YoBYYB/B
Awx540fTQJu4DRtgi1ttqx+dY9Zk4tzS1rZB504+qyDLx5nIw+T+T1X+IhPr
AjbG1vhptbDWPkVHdCW37MpEHW0PCSfabsuIBdv806pRf1JJxOl9mTjDca5a
lQk9x5RE3P3h2B7r2EscQ8eZN7zm6u+8krBZN/OE96iSv+PkNJXPLAkbLNUY
TfNiTMbGbueUxJi/eR4x1iWes6NEc1om5hBziTi8XLjKMVzk8jWO+RKXr/Uc
z5jX5Y5h5jhz/QbheuyQiThlLv4vF33om62MHDDcMQ0NtAMz4WPqaEMndEMH
dGmSF/qh55JM2ABbYANsUZwJP37nuXuiffWoffJ7OnwODbQnue0J27SF5z5z
s4NBmbjslYm4voe56jnU3f5Z4Jju57Zljo3n0xE3xN1b6fDD8845+P3BdMQY
NND2Mq97PId6eWxsgm2IIWKJGCfW0XuD8JRj4Iv033GNrqOs2wbbCDtusgxj
3Ocp19GGjMj6F490xPQKzwnmRm3V1xGaEWeW+3Tvq/b2Y24xp5CBuHhVeN1x
dJXLbzmOqqUjb7wsNFf511TkFOpou1l403lnQTr60Pcdx9ElqnstEzTQwgNe
28hj6YhBYvF95nJJ1NG2gzym8jupyGuMydh/JGFjbFtb/16YirxB7tqo8nWp
yCnU0Xaq/v43F3NolGmghSe8/5GKHEwf+sIT3uSmbqkAZWigfTOJeYsMyPJA
ErFOHW3XWvdcZcwhdEAXbIAtiJtcaZLsUxpxSCyVl0bdPfbjQSrXKY08Bg20
+5dGzALKNUrD79BAe3BpzCNi5TCVW5ZGzDB3DlG5cWnEGaDcrDRiDlCmz1OO
JXgjw2rHHbyOKI2YBJSPLI05Qqz0VLl3afj9FaGzyt1KI64AZWj2xhW0fUvD
Tu/Z9wP07/7C77nIM+SiP3MxBmN1KI09AKDMGK/Y1vCqrAybE4PEInP2Qcfm
CJ8TqD9UOIw1V2jnedJcOJJ1OhN6TxKm2AftTNuTddZ07VzuTi7KRQ4iD/yS
C1+NFybaZz3cd4DQ3316uNyP9UwYJoxEzkzEwZXmAa9fc5FXyLW/5cI311vG
gzzGRNfRxtzizpB7u22ep3vvEV/2vOIej3s7YrKbZUKWvp6X9IUG2qGy4bHC
ucJoz2X6YlNse4l9/qrXmHH20Sted+rYltMco/1ti2HWHZthO3REV2J1ujDD
MdvUPsI3bYQmzmuUj8hEbM4R5jtGG7vvTMf4T7lYMzrYV23MC727ZiLuZ5tH
S/eZ6Tra6oqmnuOmuXNrXZeRizhcIix3zLd1jHT3GPgM3xHTxHY/+x7dh2bC
JtOs8yGeVwuFRY75I6zbwtK/58Eij8nYyHawYxoZ9+RiH4zO6N7c9e0sV61M
rBFNbctuln2l5+ht8vHtwlJhiVApmmrWm365TNTVNq+s6ygfJFS4jvKBmeAJ
7/udI9Kqy5gG2t5ue8A5oa/L1SpjTv+Yi31CfeuGLPvYB8iULxRYxkrzzrNM
jPGpdPiMdUv4JR2+/Uz40j7eorqtwvus8+nom29e8KDv58Jv5lGouiJhP2Ff
4Ydc7FOQEVmRpYplrOZyoWn3MfZ1TNV1eT/7kDpyILnwYfK588Ar5FLPc3LD
FtfR9n0u9hHFlmWPz4L5tsOvlr3IcpAnXidXO4dMNO/XnUN+tp2q2K7woq7A
dvnR58w823qSeb3jef5DOmhow9ffqfy9kFI5EV62/OhxRWnUpx0L5ZngAa/3
PS/oC09ooJ3mtg89Z6a7/Inn/Xe52BdhE2wzw22feV5/k4t9HPuob3Oh616/
ovOzKj/HuiG8IexORwz9Yjsw934RfvccfE11r5sGWmI9VSb7lEVc70wHzW6f
019NRx1lzu69fWe7xm8cxOEH6bDbt6bb7bHxxWzH7jfOWR+Zzx7b/XXL/Zll
esO6fO46vnPibZl3Yr7BqvQd5H2+k6ault9x+ZaB3PCndUK363ym5hy0993s
U5/5b3bdx66jbYlt9afzDDbH9vgIX82xLt87z32YDp1+tN+xxS7HEDZ5Rthk
PbHr0657zXZ9ynU7bevHhSfSMc9fdt9nbRd4kGuqSLd9KiPnvKK67emQg3G3
paNul2V5yHOzWH2KyoL3OueQLS6vd7+tLm8wD+rI43scQ8TSLo/1g3Wcb1vs
cc4nhoglZETWHdbrY9sJWXe4DJ8nbYNXXb/RdTtMu8F12y3TVsuFbsTe17nY
NzFHmCtrsZHnBHZbk466Z23LO4W7hFXEvrHKMjDu/e6zyX5a7bpn7KcV7vOk
5WLNWWqf4bvlwn2WG1suc91623qp69a5z33mudF9VnnMpy3THGGuZaD+q1zs
GR+07uTV1rJ127LIi/NVf7dtgN6LLSOyPSbMSwfNWus513VrPAY84NW+LHIs
oNypLPLmXZZptWW9XrjBdp2dDhpou5ZFXrzD9Sus62zTrnQdubGHaI8qi7xI
H/pSR9usdPC4z3ZkrZ9pG2JLcuXRou1fFjkTHvCi7q8cm449whLb4tZ01FG+
17xmmTc84QGvQWWRtwDlY8pi3n+Zi3PhAvtiiv5Otc2xKzTQDiuLeTE5HTTz
beeb0lE3z7aHBtrjy2IOTTLNXNv5xnTUzXHcQgPtiLKYkzeY5i7blTraTi6L
PHaQ9zrsnRpnIlauFyY5Zsaoz3n243XCBGGi7YKtr3X9HbYTPOF9alnkSED5
9LLIuVeJ5mrb+RZhvHCNfYDdU6Y9y2vO1aaZ4T4TPeYsy5Bn2tHOKeQwctl5
yC6ME81FtjF2/SIX51Z8hK9ou9g+gubCdPSZbDtf4LqbbGdscb5jGptU8dj7
VkbOHes+k2x3aMe6fIN1nWDbofO+XqtW+a3pOvOdbZuek45zykT3O9t1E8zr
LNddYzud6brxtnNb+3KK5+wZpqENX5yejjrKV3qsc21jxvw8F2f+S2y76xwf
xEkrYaTqT7INseWIdNRdZDu299jTnCNONM042/WEdNRdaLt1Mu1054jjTXOB
7XhcOurG2rZdTTvDOWG4ac63r4alo44ysdzDtDOdU851/XXWmbediX53541n
mPYww/1Gw1sN34Zc5u8K+EZkfVa5WHhG2CC8ndK5XPhF+Jn7FeEt4Sdhj8tv
u426j3Nxb8Nd0Ccqv+E+0P6YCp7w3iRsFF5PBQ1tPwivpaKO8vfCDuFV4Vvh
G+qkY79ynUeFPay53P8I24VXhBqqrylcIlxcHt948a3XY8Kjwu3CzFT0W+u+
D3kceMwS7nDdgy7PFh523Z3+bgxej7jtTpehOUBjjhMO0NzZX5irunnCE9x7
CTutI7p95zF3WLevrcN2l78yKBfJl4XCJyrvFtLklnSUPxUy6ajbqvI24Uvh
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
ymMv9xluvmmW2m/wGmvbwJMYI9aQEVnnJ7GnZi/9TBK5p1Q4xDmowOfKOkLt
dNz1LhKW+M6Xe+rZwhzfYQ9Jx5p+ju/9Bqej7mzf+7HuDPId3xlegwa6zF0f
d9XzhYW+s+5vGtpOS0fdQsuALJzBOIsdzJksGzLMMY9BvqtlH/iw72G7ikc3
39kd73J33/FR91kuvoniTpG7xUHW4SzL3Eno7Du7YS538Z0eddwtryyLfeip
xv2WAVmg7eqx6dPRPOHFdx9nlf19D8K9bUPVNbKc9BvtNu5GuNMd47tk7ly4
e9kmG2zPxhmcs/inufgG7Cjr1l5/O3jPhZ+OFNrZR4Ndbu826tqaZrD91sZ1
g+y3DtbhWPOs57Wmo9vquq6D+TYRmgo9hR7WrbF90M1x19C6dnFbE9N2d99m
Qi/zaOA+XeyL+q7rbLvWsQztrdvBpulkGXuaF3fE3AsT64XuQ9/jHevLy+Jd
ortlGeGYmeG1ZI/vbLmn4p6rlnCQkBVylruJy5XWgTp4V/HdC2Nwb8rdaoXa
ytNxb0od5bJ0tHEvC19omAd5vtuBF23c3ebSf9NkPTa23J2L7wiJCWKjhv7W
TMcesJXHKLdf8EOp6xrazuXm2dg01dPBg74thQOtN3HCXpO74eeFzdm4I8Y2
5JTatlFN9znCMnCPis5lHpt7Suook5u4O+VulT0N+xTmOXcw3L2QF7iHTCzX
AenITdwL/e68sNC02GyR6343D3jVsmzEfFvrUstldBrhWGCOM9drO07auQ93
thnrVNPlPPOhbqZj5RfnTe5g0RHd2OehG3WU0XG57wi511vpcUt9z0ReIeeR
++pVxj0Ivuduv9Kxhi1S9lF1l9OWjTru9Lnbr+bY6OE5MdIx/qLP6JzNv0ni
zN3XZ3zO+h3Vt5P3YOzFOPefKvzD9wqDXT7Ndwxfm0+OGBbyVHeoZG/O77V8
tj9ZOOX/jTPKPAe67hTX0ZbxOY+7oQJhnXSoJf71hPW5GAvZK1MxJvcopwtn
CMNZf1W3j9BGOEJo7b/DvS+62fse9ibTsrGP+Vj41Hu0Y6wbPOE9w21feN8G
37behx1n3m1cHu6x9zUN9e/5rJdROZ2KexDuVvYzHWXukfZPRd2JGvNs4Rxh
RDbuoT4SqqitIBXlj4XCVNSV+96Ku5IaldH2CXcbqaD5IIl7rHx8k4oyPOFF
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

          "]], Polygon3DBox[CompressedData["
1:eJwt1GlIFVEUwPEzb9TM5T3HCLKsEFLa4IFpQSCVRkpalFlYFkVqapARlYr2
qTRLcK0+tBCUuQQtX7RSK7DUFvNZ3yxJ0yiIBFugINLX/3Xmw4+ZOzP33Dv3
nnOj9h9OL3SIyHr4o5NGFwbwCi8wig/4hklMwGGImIjGIkShyRK5hdu4g2aM
EHNU9HsD09zvNkX2IBtT4SJ7uUaHiRxAMUqwGFdDRH7DGSriwjXu84lRgDOo
RDlqiHmaGK24iTbalTOZL4KDREJQxX0x8zmJUyhHCVby/Sqsw1okmDp+O3rR
hzI859uX6EfULNaFaxrrsAk5yMY+zGDsQDCctPNvHkvf56IMpSjG3wCRI3xc
izp4aU/zL15E8H4OZmMX/fOQjwJkWRrnBOpRh2qM0++joTGm8AdH+e8h/MBP
FOGzU8TtEklEEr7QruI6iDGMo9ql63sWLWhGo6FrVoNa1KHC0vet6EUPug2d
VwOa0YTrMFmUY6hHAwICNXdikIwNSDI07kVcwmXUYwX94xy63qlIgYd8WMjc
4xCPN6E6XotDc7gD93zo34WHeIT7lo6XYmgu5SEHEyR/LntQjgpM0j7HHp5H
Bx749hPL/chveDAIN1LJmTRkYBu22PfbTc31LGSamhNM83/cBtRiPs8XYCmW
IAZD5M1bVInm9nC45n8OSlGGcGxmjv346q/z3woX/cNMjRuJCDv2MlNzPR6x
pv5Tp2h9vsc70fw6jiJLa+WgXcdtaLd0Le/a+9KIG5bW/BVL6yfR1LXYiGRT
83iuQ/cvFm7fQcNzw9R5OhHsa9N/NXbATW35cR0IZt7UeyKS8Jp2As8zsdPS
uljjq2Pf3uOTU3O70qn73I0neIrHlp5d3+3xvb76s884j32+jWDYoXWSwViH
UIhfQRqjD88sPQd6LM33PkPrbgwjhua1F/PY6Ehc4P4fOP65TA==
          "]]}]}, {}, {}, {}, {}, {}}, {
      {GrayLevel[0.3], Line3DBox[CompressedData["
1:eJwt01V7iAEAQOFvbNOx6ZxhuruZnBqmm+nadDeTY7q7ux9/RHeb7u73wsX7
D86JTkxOSAoJgiCdUC5FBMFlrnCVa1znBje5xW3ucJd73OcBD3nEY57wlHSe
8ZwXvOQVr3nDW97xng985BOf+cJXvvGdH/zkF7/5w1+CyCAIIQMZCSWMcDKR
mSxkJRvZyUFOcpGbCCLJQ17ykZ8CFKQQhSlCUYpRnChKEE1JSlGaGMpQlnKU
pwIVqURlqlCValSnBjWpRW3qUJd61KcBDWlEY5rQlGbE0pwWtKQVrWlDHG1p
R3s60JF4OtGZLiTQlW50pwc96UVv+tCXfvRnAAMZxGASGcJQhjGcEYxkFKMZ
w1jGkUQy45nARCYxmSlMZRrTmcFMZjGbOcxlHvNZwEIWsZgUlrCUZSxnBStJ
ZRWrSWMNa1nHejawkU1sZgtb2cZ2drCTXexmD3vZx34OcJBDHOYIRznGcU5w
klOc5gxnOcd5LnCRcGmH/f/yHyJde8Q=
        "]]}, 
      {GrayLevel[0.3], 
       Line3DBox[{3, 4562, 4560, 4791, 4792, 4793, 4794, 4795, 4796, 4797, 
        4798, 4799, 4800, 4801, 4802, 4803, 4804, 4805, 4806, 4807, 4808, 
        4809, 4810, 4811, 4812, 4813, 4814, 4815, 4816, 4817, 4818, 4819, 
        4820, 4821, 4822, 4823, 4826, 139, 135, 131, 127, 123, 119, 115, 111, 
        107, 103, 99, 95, 91, 87, 83, 79, 75, 71, 67, 63, 59, 55, 51, 47, 43, 
        39, 35, 31, 27, 23, 19, 15, 11, 3}], 
       Line3DBox[{4557, 4559, 4561, 4557}], Line3DBox[CompressedData["
1:eJwt0ksrJnAUB+A/FkMk11DKqDdRRG+UMlMmlxGahKQwhGIhLMgki0lq5BL5
BC7xBQaxmpSSkrV72UrZTmLGs7B4Omfxq1O/Tn7/WOtoTAhhgfPUEPbSQlix
r7HHAVfc8o8Y4Xwi1FDPIEPM8YstdjjimDvueeaVzNgQsiklSgNN9DHAFNMs
s8om2+xzyClnXHPHI0+88J/EuBCSySGXAoqIUsFnqvlKIy200UkXvbzqYcDs
oYNv1FFFGRGySODZzQcuOWGXdRaZ5Dv1lJDOXx3c8IcNZunnC3m86PmC3yyz
xDxz/GSGH0wwzgjDDNJHN52000IzDdRSzScqKaeMYgqJ8JFcsskghSTi+fD+
I28coED+
        "]], Line3DBox[CompressedData["
1:eJwt0jkvwwEAhvG39/HvXXfRoK4WXUzG7hYRH0CwIaSJxEokLOID2C1GH8Hk
io04i7rqqDqKJupJGH7rs7xv0/DkwIRJ0tK/w5B0gCMc4wSnOMM5MrjAJa6Q
xTVucIs73COHBzziCc/I4wUFvOIN7/hAEZ/4wjdK+EEZCksmmGGBFTbY4YAT
LrhhwAMvfPAjgCBCCKMClahCNWpQizpEUI8GNCKKZrQghla0oR0d6EQcCXSh
Gz1IYigo9UHYDEgbmMEYYsj4pT0sIoUksj5pH3PoRRQ7XmkWI/Ch6JFWkUIc
24Y0jkEU3OyHaRjIu6QFRFB2SitIw4xlhzSFkl2axyhyNmkL/di1SutIYM1C
x/L3kV/3ZkzT
        "]], 
       Line3DBox[{866, 865, 1032, 1163, 1323, 1450, 1605, 1755, 1874, 2019, 
        2134, 2274, 2409, 2516, 2646, 2749, 2874, 2994, 3089, 3204, 3295, 
        3405, 3510, 3593, 3693, 3772, 3867, 3957, 4028, 4113, 4180, 4260, 
        4335, 4394, 4896, 4556, 4395, 4336, 4261, 4181, 4114, 4029, 3958, 
        3868, 3773, 3694, 3594, 3511, 3406, 3296, 3205, 3090, 2995, 2875, 
        2750, 2647, 2517, 2410, 2275, 2135, 2020, 1875, 1756, 1606, 1451, 
        1324, 1164, 1033, 868, 4860, 866}], 
       Line3DBox[{4411, 4412, 4414, 4416, 4418, 4420, 4422, 4424, 4426, 4428, 
        4430, 4432, 4434, 4436, 4912, 4439, 4454, 4468, 4481, 4493, 4504, 
        4514, 4523, 4531, 4538, 4544, 4549, 4553, 4897, 4555, 4554, 4551, 
        4550, 4546, 4545, 4540, 4539, 4533, 4532, 4525, 4524, 4516, 4515, 
        4506, 4505, 4495, 4494, 4483, 4482, 4470, 4469, 4456, 4455, 4441, 
        4440, 4411}]}}},
    VertexNormals->CompressedData["
1:eJztXXd8VUX2D6GTUCyIssKKqDTBEFw6XorUiCJSFFSsdGmCICKKP0DFRaUK
UZGiUlRQdNWfog/pKZCEDlJCMQECElDBgrB8MufCvsn7Zua8Oy+5gXv/2fXL
yZkzM++9e2bm+z1T6bGBHZ8MDwsLi7oqLKzg+f8dFf5serVhiVby/O3Lk2ru
tCLHtmwa2fGob9hCX9drl6ZZvz+54LoKQ3b7rug5e8DMcvt8YX5PpmX/vwJV
o0bc+9Ihq2m1dS/XrD572fdRH7SNnHLQh/ABry36vMx3u6zqb057vMkrO63V
Ixbe8o9Oh8l/ptTOhfa08cHxQ9e+MSfN6th15F8fv5eG/s6S/ts1/od48eeI
5/f5ze/+7fm91/v85In/UI//0+S/Q4j8DyL/9+VT/6Een1DP7+BcGv9OIfI/
NJ+Pf6j959b4hOr3LdTf31D/Pof69yG/f/5DPT6a/kLkP7t9/85/7KjRbqW1
ee8DW8JH/WTFnkmdHlM/3bdw4dQxZ5qvtOoUqtQn+jyecmriudHn8eDi8XAP
v5zxbHbw+2g/BRq/0HPW7DQrtlHW/16wi60v8ALW/+Ju66+He7gb8Gx2yu/d
DPp+hVv+37teTQRep6H3vfNwDwd2yu9Xb/oe1W7o//3q20zgUXW975eHX254
Njvl96gPfV9q1/X/HsXVEXhyC+975OGXKp7NTvl9iQ/4vbj4PfLeOx6e//Fs
dt57xMMvIzybnfLzn0Cf8w3SeyEw7rb+evjliWezCzr/8X7nPTzv8Wx2QX+e
i98j8ElVvc+zh7vvcxv48+n9Dnt4KPBsdsrP5zr6HKZIv6tF6XM7xftd9fBc
+ByWoM/bm9LvZJLgQ1gJjbzPoYeb+7ytpc/VJolvc66VwN+O8j5vHp7NTvm5
imgtPj9vRPl/ruhzZq31fscuIzybnfe75OEaj/c7c3nj2eyUn4f1NO/rpd+N
wLjb+uvhwC7o98XyGgLfGePNu3vwbHbK+U2ieUyI8Z/fbTTvK73vdR7g2eyU
80jzZG2VvqcNHxN4j7LePIYOz2annK9WNC+dyvrPl7cfZRLPZqecl3ga/yTp
e7SSfie3ee87Bp7NTjn+cTTOKdL7aF1A3G39zf/j7P3+BLTzfje08Gx23vc9
x0c9Pok0Dhuk8QmMu62/5sbhB+rvDmkcmlIe9YCr89tsdsr+3kn96iLlh6tp
HDa7Yt6z2eWz73s2O5fGz4/T/pxskeLkta+K5+K/tzpRe/3jkXusHoMefv3x
caut2Nue6hG7LMO3YMTeZ8d/dMTa/deR7957ItX3RcmNh/4zPt5X8crD8XHv
pllH2o2aP2TexfgqMHHk55+EH5bw6wnP0PRTEfhR4bpxVgDx2PEfkvAbAF6e
8J8120V+0DijcUPxc/0jHPnhfn6481KZ8J80ceQn8JNpXfHQuz81a7vKmpLW
+6bVfVKtLhOSnx1+7ojvvrLpFaYVSbcWNfz93cUFt/qGv5ww8kj7A773rh8b
V+e9NGv/D+uOFpt70f8swg9IuMpexmcTvk/TP7fd2UG2e1DC3wW47SdVM563
CU/T7BeKkzsvqF0U/1xmv1Tt/uTQD7J/n/DdEj6P8D0S/g6IJ/Aj168KgIP6
NjMC1rfBfpB94Hod2A+qSxAr/tsKa6LnB9kjvjryE5gPjPSq2A/S98001C8b
P9dYzw9qF/U32PGR+4v82HUnbpPsbf1XkmY8Nm92oxZvFvspzuI95hAP2W+U
7B9tIPAGd+j56Uf2t0n2gXkF2M8aFo8F+ylBPIc3tXgO2A/vfBz7QeOM1r/I
TwLYN8ircUZ8ko3MeOx9tmStfTbsh7eO4/vhfr/c1i/evhP2g9ahhejzMF3z
84Psc17nhm58TPlxuk4fV+WmRa++38laVWp6+PFB261pYybtKTflmG/IT0Nr
7w9PtaL3ptW6p0iqb9ADJTpcH5vmQ3mmKv/cGyJ8DrPdeUz/KG8PtX80nlz/
XBzl2yg/R+PP7ZepONH4cOMM/OB1xJKU+79uuXON9cC0iNrzHjpozQ1/dOCt
BQ/5qg9+os3ihDVWj8h9X5R5+KD1zZw7hn5yHlf5R3X/zlH+E6uZJ4dRfjvT
YZ6sWkfo5qXIPnC9NezH1DoC2XPz9t7AnuuHV/8E+0HrBVRfAvnh6e+wH6Sf
2hDkOiLF5euIs8z8tjjlJ5Mke+qnFZdH6wh5nAtQnDM1+1WU7CdL9qbz260O
1zWm1xG68aB8by3hGx36yatxNtUvlCcXA58r5KcgyP+564jCZD8NrCM2u2Te
uX5yjl+9juj6zV2LD3y915r6+ukmq+/82mrTfWnlR2dn+I5cW35av7JHrFer
RG+d8+A+X9hXT3f8+kycT3XOIp+LofMsdE4XrB90TqTrB503cf1zcdPj47Z4
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
2aG/v4C3W185S09dqoLQU88hPXVb0lM3Jz31WNJTq/JAOR+YTPhxzTwQ6YtR
XZopIG9BeQ6KB+WfKG9BftwWD/KD4kHxc/NANF+m8sC/U4QOegbpoDuQDnoF
6aAPkA66ryEdtNP6sdy8y9R+tSk/KP80dR/BI8x77fuCPNDU/p6p+z648SSC
fA/hyI9qv1qXp4TOBbi8KRTPcnqf7nSYB3LjSVTkgbr7uihvLMzcj3XbOKN9
VO49HWgcTNWxyat4TM27qftHcm5XnQcWJr3wpk+FXjiC9MK/kF54FOmFf/tS
6IXRfizSsaL95NsI366536vS8+reb472wxGO/Kj0uTIe6niQvb0vfdDhvnSV
EO9LlyCd72jS+Q4mnW8i6XwfJ53vY6TztfWbDYCuU8a3E15fwncQXk/CtwJ9
qK3nbaTZLsJRu1w/WwG+Beh2VfFwx0e3X0gni/TRPxL+L812ueMW+FHvP6P8
mXvfuql7GdA+LcLzyg+Xl472aU2tF7j7bCieYPk2TnW1od435t5/h/Yz8/t6
AY0zlwdi55ny/drcfM9t42zqXr9wcE7BHWe3xWNq3lX8H919Y9QvslOuF6pt
EDrWYklCx1rhc6FjbZEhdKx9pwoda1RZoWPduEboCsuH+esKW6cI/KuTsX54
MtlXkOwfXCbwF0v64ylkf71k34r8fy35R3hLwr+RcOQ/WdHu/0t+2hL+H4fx
oHYR3ob8fCn52UT210n2iYTfqIkjP0mEV5TwLjSP46V5XE/2lcKc6U9XvyD0
p+WGCv3p+JuF/vRn0p8eJP3pKE39qSpP09VX2nmRfO8zwpEflB9y88YNZJ/o
8HwfvUceNZSnmYqnQJD7uk55yKb2dW2d5maQp5mqS6+bf6J4TOVpecXXRft7
wZ7vu2WcTfFj7f1GdJ6uq4t0Wzym5t30vm6w5/vdNgqdZosyQqc5cobQaf58
Vug07+8ndJoz6B7nYjeKe3Kv+9JfTze9nMBHr/THK5cUeGqyPz6D7J+T7IsD
/1z8LfI/SvI/k/BnJTyC/JST/BQl/B8Sbo9DeYfxoHEoSX6ukfzEkv2IlXr+
VbjcLrK/ieZxT7KefeAn01pWQOgrC80V+spB44S+8nnSV2aQvrIk6SsHkw7u
PuY9uR018cEKe9m/qfuaET6A8M4A75LL8XDvm1bdR8y9x1nWhyI88IPz/wdJ
Fzlpt9BFfnpW6CI7kS7y/r9uyNJFFj6np4tEPF4uv3ct2W+S7BGO/Kj4GNz6
KnJecTbIunzoXiFdfojb4kH7vXAfmNkvU3kyd9/4Uo0H1Wfj1p3LL/3i1vez
65/cL9lz673kl3i48x7qfpGdMm/fdFLoB5uNFPrBpbWEfnA+6Qd3kn7wW9IP
cs/30f2ziFeA/CCeBpePwb1HFeHIj6l4VDwQ3XrvofYT+Mm0IrsL3d9Vu4Tu
L+VNf93fLNL9PU+6vw+Jr/ujxNf9gPBdmvdMoXua0L2iqF3uvVrIP4qH2y+k
70PtmrqHi3v/L+JjI/42Gs/AT/B8CVP1N0zp2kydv5vStZmKx5SujRsPyrc3
GMrDTenauOfmKB5TujZuPKieidt0bXk1zqZ0ZGj/Nth6F26Jx226Nqf1N/ZX
EveE7twyLUvX1mWi0LU9R7q2aqRrG0K6NrflOahdhHPzHBQ/F59P+E5N+3mE
73GIzwX9QnkR8oPGM/CD85wVSUKPNniU0KPtKfdolh5ttaRH662pRzOVL5k6
30fnqtw8x9T5Poon2DzHLef7bqszhuJZYSjPCVYf51S/77bzfVPj7LbzdLfF
c6md75eYL3RbE744laXbSn5c6LZ+Jt3W/5Fu62/SbZnaD0R1rtB+IBfn7r+h
/UBTcZra/0Rxcv1w4w/8ZFpR0r2KT5PeKoH0VoNIb/Uw6a1SwP13Ni7fA4ju
B+Te08e9JxHFg+w3EN5c0w/3HkbULronEY0bwpFOzdT9koGf3Nv3Q/t13Dqu
6J6LHpSXNtTMY3uTfbRkH+x5t6l78Zyed68FeQjMS4GfVWS/RbL/m/r1jsP8
nFtfC8XzPeUDP2rmD/FknxTjLB5T+Z7Na5V1JabWQXk1ziivyzlfyu4H5Wnc
9YLb4jE178ie6yfn/Fmdx0YsFnqiBiWOZ+mJRn4t9EQfxQs90bJFQk+U2Fbo
idB9Z6p7zeR75RDel/B7Ne9xQ7jtv4PDOFXx6N7vhu7FG0x4G4fjxp0XFA/y
H/jBecitE4QO6NArQgeUeqXQAU2IEjqg8ONCB/T2Kj0dkL2fliDlIfbvZJzD
c43HDe2nmaqHWZD5O4B0zabrYco48mN6P80tdRq9epg5+3FbPUzT+2luicf0
uaFTXbPT/bTeCUIvs76G0MucXSL0MkPpXrMYutcsmu41s+/D+kjz/iwuju7b
akj4QoAvcnjvGDceNA6NCF8g4Y1B/KG+RwzFyb1HLDxC6Fw+2Sl0Lj8MFzqX
4aRzOUA6l/Kkc0F6E64O5RmgyxhEeCeAy/oa5Gcg8IPwUMfD9YPsBwLdDcKf
AnocpEsK/OC8dB7pU2b9IvQprY8Ifcok0qcUKiTu7fr7lJ4+BdV74eaTT5H9
rZI9reet1cy8Qo6Hu6607+2dGOUsHpQ/pDDzCjtPTnGYT5Yi+9ck+63kf6XD
eLj7SElkHx/jLB77fHa9ZM/l4ZvKc9w2zgkgb0fnyMgPqmPDvS/JbfGYmndk
z63/k7O9Op/8s3B0lo5j8jmh44isLHQc75OOYy/pOFaQjsOub5nhUL9gCjel
Rwg1rrofSsa59zqhdpF94CfT2vag0F88kib0F8MnCP1FR9JfvEL6izEK/QUX
X0T4VglfTPhmTV4cl0+I4vkYtGvjWzT9LCR8h4QvJTzJIf4F4esd2gd+1Oen
aF/Ofu/scPh+3xbke9Bp/UP7vfzvKGfxoH1X7n4sOodtQjq+hzV1f3eT/V1l
nfULxWOfo+3K5XlHeZ0p3ntrGrf7LrFxtvEEh+PDzaPcFo+peUf2puIhO2Ve
N3yU0BcMPiP0BQ+NE/qCsaQvKE36gtGkL7D55zI/H/H2uXoB+/2+TdMPV7eI
8AXg/YviMaU7QO2iOFE+8wkz/wn84Pf4Urqnpt5EoQt4ubjQBZQnXcDnf6dm
6QKaLNbTBSD+ia2n4/Kg5LoE3Pc4Wmeh9wXyg85rEB8J+UH8E+69J2jdx+0X
GmdT533cc1UUDzefNMWjdts4q+6hDvy+0B+fYPfB3BKPaf48uofFaTxkp3yP
l/9c8OejGoh7T155WPDnjxN//kXiz/+iuPeEi3PvfUb8cy4v3VQ8ob6fhXu/
iW2frrkPM+M9wXuvO1bw3jueFrz3OOK9TyTe+/3Ee08iXnQziReNcMQnTwb2
iI+dSPidEr6e8Baa8Zjyg/jnCYS31MQ3gHZRPCrevmwf+FHvt9j5VTLIr3R5
1KsN51dTHL4fQ83r5t4TYfq9L6/fTZ3LmMqv7DxEN78yxatx2zijexm4+Qwa
H27+4LZ4Ql2HwVQ8ZKfMr359dVAWr3vICXFPRNWRgtfdvVLtLF73Pb0Fr/vm
De2yeN1FUgXvd9te/3sKEF6C8BQJjyQ8ScKLEb5F0z/CkR8b36SJI//FCd8I
cNkP6q+NJ2v6KU14gqZ94Ae/Z5vvFXzsr4YIPvYrxQUf+5fago/96++Cj526
TI+PjX7HuDpcdP+mrePWrVeD3hfc9wiqb9CU9j+7ae6XtiP7e8o66xeKh7u+
Ru/ZYMdZPt/h7gOje3nupHHrcomNM9pHQn6QPdeP2+IxNe8tgD33Ptmc41e/
Zz8v9loWb3ny8wOzeMuRW27J4i3Xu3p8Fm+5RwXBW76vuuAtr4sSdd1vn+fP
d7XxOgBH9jKeSPhtEp5AeG0Jjyc8WsLjmPHEAXw14fUlfAXhjSV8DeH1NNtF
/rntBn4yrQlnR2Txjd+ZLPjG0a8KvvEQ4htnSnzj3sRTfVDiqfZi4shPH8K7
A7ybph9T8SD7Jwh/RBPvC+JHeE/CH9LE0fwivCLxhF/dJnjC7Qrty+IJRywS
POGSZQRPeEuGHk8Y5UXc/ATth3D3SdD+wxnaT5jlcL1jSgfH5QOgPISbDyDe
KTcelD9w78Ny2ziHet3NfY+7LR5T847suXmp0/2EAYdFXfQ1jQSfttXtgk/7
AfFp9xOf9iPi03LrFyH+7bWEH5fw6wDO5cdy40F+guUPy+cmwZ6/6NYh/6yH
4MG+/6vgwS4YI3iwXYkHu5R4sIOIB8vldbxH+H4JjyU8HfBh5LqRiCeD6mOH
um65qn643F8UP6rbidpF86jC0fkF930R6vMLbr6B9tWDPS9wyj9E62tuvWV0
fsGt3xLq84u8GmdT5wXovcl9n7otHredX+Qcvzrf+L6U4HmWKTY9i+d5+iXB
8+xCPM/2xPN8mnie3PsaVPxM2d5+X8j6i3ngvYDug0DvC66ft8H7FL1nZypw
+X6Ktwg/ojmeYD7he2om8TNHTxb8zNKFBT/zycGCn3l1GVG3ecosPX6mt/+f
sx9v/z9nP27b/zfF/3dbPG7b/3eqR+j3meAx3l1D8Bj/1UPwGA8Sj3ES8RiL
fiV4jFfReu03ab1WEfD30Hq2PMCRH7vdXwGuGw/yE0n4GU38CsJPa9oXJbxA
jJ4fMG/Wd+8L/uHXiwX/8I0MwT9MIv5he+If9iT+oV2XtYnD+rGbgR/kH/Hu
tgB75D/Yur66dWsRvzEJjIMdfyNDvEFTOsTceu+vdcn7iBsPyqOC/f2Xf5/R
7znyk1/G2Xvvi8fUvCN7U3pYslO+99ccEnVT614p6qbu/FDw6wYfFnVTn3xX
8Otiioi6qf9eIXhckwv719V8mfBYCR9H+DsSPoHw6RL+KsCRPYoH+ZkI7Edu
E/iaI/78tOGEJ0j4CMLjNfE3qN3XNdsF8wbfI6eoTunRiYIXl15K8OLCogUv
Lo14cYc1eXE/0O/JjhDtc3L5w6THtrY53H8zpYNbYSget+ngTI2z23Rnbovn
UtPB/bVH1L184xfBH6vWV9S9vPcvUfdy6gjBH/u+huCPtb9K8Jf+WOfPX4oh
/IyEdyD8N4CfknDkn+sH2devKvCai6U6kITXBniUhNcFOLddMD/W7ecE72ss
8b5qEe/rHeJ9LSLeVwHifb1EvKNmEu/oecJbSfgYwptL+FjCLQlH/scRfodD
P1wcxf8SwFGcCEfzgvCria81jPha3YmvFU58rcLE19qlyddy23vBlE5K9f51
yzljXo2zqXM95Afh+SUet50z5hy/+v37HfGaYonXFE28pmnEazpNvKYk4jX9
cYXYbywt7UP+SXgpCT9DeKSEF6B9y6ISXojwghJ+jvwU0/Sjsi/CxGX/RQgP
1/QD5sFq0FPwkUaV65PFR6reX/CRWhAf6SzxkYYQH2kwnT+WWeF//jiM8EhN
fCjhJSV8JOFFJXwE4cU1/aB2kZ8hhJfWxIcTXkLCnyE8YoUZHhGq98Wt42pq
n81UvVxT55ihrqvmtnHm1jEzpRtyWzxuq6vmVMf0yU7Bt3mmhuDbfPic4Nv8
h/g2NYlv01Li2zjlyXDrrXH9oLqpKl6ozM9B+AeKOOV7z8E8wN/h7zcKnswf
cwRPZvfpR7J4Mg8RT6Y08WRmaPJkEP/fVF0sLu9RVd/bLXWxTN0z5dXFMhvP
pbYfeJT4JDdWF3ySq4hPkkl8ktHEJyn9Vc51sez6UXslvIqi3pRsj+pQIT+m
6oeH+v5l//9F/+7hHp4bOLJzW5we7uEe7uEe7uEe7uEe7uGhwC/8u0/v31V2
yB+3/Yv2zUc/0e749iPWn+1K3/Tkyh2+uLHd92cO2ObLfKtbxTFz06yur/Qc
/+2si+tQFX6/IXsZPxFiPycJ7yLhx4Gfnwl/QNM/F+f261fCOwF7uV+HCX9I
0/4Xwjtr4sjPUcK7a9qbwtF8IXs0nva9uh0kng+qW66qFyHrfP9Jfg5LfpBO
p+hywR9eX8yfV5xQhnhlif48Mfue3PZS/Kg+CdLnonMHpPOy9TKNpfj7zxfx
t6/qH39dcJ/yKIq/jRQ/2jebSnEek+JEOPKzFeh9WqaI+L89KdU7vVGM/3Vf
+sePPj9on5B7nw7ywx3/aBr/zzP04r+d2t0ktfslxZngMP54ir+1FH841ZX9
Uaoru5zq41lSfbxeoK6aqfG/hvycBOMv69oeOyriL5jsH3/FJiL+XlP840c8
w3DAV0E8De74rwc8NoQjHhvCkR9UnwXhyI99f7Osp+L2C/lBeLVOZ2fVGZ5h
JbSM+mHqtBRfdEStX75Y9qOvQVSrhyp33maFLar8ZqEC+6wfZ1zbs8GIi+ee
qnt25HM3dG6F+Ic+wn+U8G/IT2qMXrtcHPWL218PDw7nft7ROTjCuf7zezym
cMR3QjjXj6l4kD3V67Q2aOJcPyieRGCPcNt/ksP40Xm6ilfgFEftoroTSPeN
7hPh8sq48a8kfJuEx4N5of/OVg/W1HiaiqcV4L81IryHhNt50FbJj82TXCW3
C/iBywnfKeF2vTu5Xhn3dwDp0CPAfQf2PT7yPYkonlD7R/dalrhH4G9W9ceL
Ej5ZwtfVoc9PC388jvBkCS9OfiZV1cORn3gmnkD4Bk0ctdunmcBr1w2MR9XV
i4frvy/w37sJ2Tf0x3sRXkfCZ9QXeLgVGC8g4WGNBR7bKDA+0w/PYZ+WPm8z
G0t+xN9Zgf/Iwz38csa5f2fKj4d7+OWAZzv/w++vXInHwz38UsK55/Ghjudy
wbP/+38BCa/fNA==
     "]], 
   {RGBColor[1, 0, 0], PointSize[Medium], Point3DBox[CompressedData["
1:eJwtystxQwEMQlEBQr8u3FJKcAPpfxe/jM/qMsPr/fvzZkQcIhRfn+b/zAhH
VERHTMR+fgEEGFAgAw5UoAMT2MAFGVQwgw5WsIMT3OCFFMqQQxXq0IQ2dJEZ
6ciK7MiJ3MgLO1zhDk94wxdVUR01URt10R090Rt9MROzMRe7sRd3eBAQkICB
AhoYYIEDCQpM0GCBDQ644EGCEjJUUEMDLXTIRBpZyEYOcpEHGy644YEXPlSh
GjWoRR260YNe9GEGs5jDLvZwx4fIJE0W2eSQSx4lKilTRTU11FLHTKaZxWzm
MJd5tOmimx566WMVq1nDWtaxmz3sZR9nOMs57nKPd3qkZKmklkZa6ZSptLKU
rRzlKk+2XHLLI698qlK1alSrOnWrR73q04xmNadd7ekuH86szM6czM28tNOV
7vSkN31ZldVZk7VZl93Zk73ZlzM5m3O5m3t550fZbY+99rnK1a5xrevc7R73
us8znvWcd73nu3p01VRt1VV39VRv9dVMzdZc7dZe3f0BkNgQew==
     "]]}},
  AspectRatio->0.9320140380454953,
  Axes->True,
  AxesOrigin->{0, 0},
  BaseStyle->{FontFamily -> "Arial"},
  BoxRatios->{1, 1, 1},
  DisplayFunction->Identity,
  ImageMargins->{{121.00000000000003`, 121.00000000000003`}, {
   52.00000000000003, 52.00000000000003}},
  ImageSize->{510.41084041305743`, 443.99999999999994`},
  LabelStyle->{FontFamily -> "Arial"},
  Lighting->{{"Ambient", 
     Hue[1, 0.7, 0.4]}, {"Directional", 
     RGBColor[0.8, 0, 0], 
     ImageScaled[{3, 0, 2}]}, {"Directional", 
     RGBColor[0, 0.8, 0], 
     ImageScaled[{2, 2, 4}]}, {"Directional", 
     RGBColor[0, 0, 0.8], 
     ImageScaled[{0, 2, 2}]}},
  Method->{},
  PlotRange->All,
  PlotRangePadding->{Automatic, Automatic, Automatic},
  ViewAngle->0.45369723947003143`,
  ViewCenter->{{0.5, 0.5, 0.5}, {0.5415172658477111, 0.5048843842173778}},
  ViewPoint->{0.04419222084057996, 1.5393162086835983`, -3.013063666320566},
  ViewVertical->{0.8093826190312406, 
   0.34316879443118853`, -0.47658677545518857`}]], "Output",
 CellChangeTimes->{{3.5935727108664913`*^9, 3.5935727233947444`*^9}, 
   3.593572759962401*^9, 3.5935727927106752`*^9, {3.5935728757699804`*^9, 
   3.593572892299633*^9}, 3.5935729431967225`*^9, {3.5935730900024014`*^9, 
   3.593573130163417*^9}},ImageCache->GraphicsData["CompressedBitmap", "\<\
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
n/4vKXRIEw==\
\>"]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Normalize Loop", "Section",
 CellChangeTimes->{{3.5935646682263327`*^9, 3.5935646699933324`*^9}, {
  3.593567197283109*^9, 3.5935672043875303`*^9}, {3.5935686134847946`*^9, 
  3.593568617363182*^9}, {3.5935687004524903`*^9, 3.5935687019956446`*^9}, {
  3.593724042424549*^9, 3.593724045720549*^9}, {3.593725993005549*^9, 
  3.593725995060549*^9}}],

Cell["Procedure in Allen & Kennedy Pg 139", "Text",
 CellChangeTimes->{{3.5937259973165493`*^9, 3.593726019119549*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"NormalizeLoop", "[", 
   RowBox[{"iter_", ",", "l_", ",", "u_", ",", "s_", ",", "stmts_"}], "]"}], ":=",
   "\[IndentingNewLine]", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"newL", ",", "newU", ",", "newStmts"}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"newL", " ", "=", " ", "0"}], ";", "\[IndentingNewLine]", 
     RowBox[{"newU", " ", "=", 
      RowBox[{"FullSimplify", "[", " ", 
       RowBox[{
        FractionBox[
         RowBox[{"u", "-", "l", "+", "s"}], "s"], "-", "1"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"newStmts", "=", 
      RowBox[{"stmts", "/.", 
       RowBox[{"{", 
        RowBox[{"iter", "\[Rule]", 
         RowBox[{"FullSimplify", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"iter", "*", "s"}], "-", "s", "+", "l", "+", "1"}], ",", 
           RowBox[{"Assumptions", "\[Rule]", 
            RowBox[{"iter", "\[Element]", "Integers"}]}]}], "]"}]}], 
        "}"}]}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"Inactivate", "[", 
      RowBox[{"For", "[", 
       RowBox[{
        RowBox[{"iter", "=", "newL"}], ",", 
        RowBox[{"iter", "<", "newU"}], ",", 
        RowBox[{"iter", "++"}], ",", "\[IndentingNewLine]", "newStmts"}], 
       "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", "]"}]}]}], 
   "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"NormalizeLoop", "[", 
   RowBox[{
    RowBox[{"Inactive", "[", "For", "]"}], "[", 
    RowBox[{
     RowBox[{
      RowBox[{"Inactive", "[", "Set", "]"}], "[", 
      RowBox[{"iter_", ",", "l_"}], "]"}], ",", 
     RowBox[{
      RowBox[{"Inactive", "[", "Less", "]"}], "[", 
      RowBox[{"iter_", ",", "u_"}], "]"}], ",", 
     RowBox[{
      RowBox[{"Inactive", "[", "AddTo", "]"}], "[", 
      RowBox[{"iter_", ",", "s_"}], "]"}], ",", "stmts_"}], "]"}], "]"}], ":=",
   "\[IndentingNewLine]", 
  RowBox[{"NormalizeLoop", "[", 
   RowBox[{"iter", ",", "l", ",", "u", ",", "s", ",", "stmts"}], 
   "]"}]}]}], "Input",
 CellChangeTimes->{{3.5937260206335487`*^9, 3.593726271693549*^9}, {
   3.5937264233355494`*^9, 3.593726428494549*^9}, {3.593726459914549*^9, 
   3.5937265324675493`*^9}, {3.5937266955815487`*^9, 3.5937267955265493`*^9}, 
   3.593726832825549*^9, {3.593726864003549*^9, 3.593726864178549*^9}, {
   3.593726968891549*^9, 3.593726987303549*^9}, 3.593727017393549*^9, {
   3.593727053313549*^9, 3.5937270534155493`*^9}, {3.593727167061549*^9, 
   3.5937272237845488`*^9}, {3.5937272581215487`*^9, 3.593727306484549*^9}, {
   3.593727346259549*^9, 3.5937273464015493`*^9}, {3.5937275428055487`*^9, 
   3.593727544613549*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"ClearAll", "[", "ii", "]"}], "\[IndentingNewLine]", 
 RowBox[{"loop", "=", 
  RowBox[{"NormalizeLoop", "[", 
   RowBox[{"Inactivate", "[", 
    RowBox[{"For", "[", 
     RowBox[{
      RowBox[{"ii", "=", "5"}], ",", 
      RowBox[{"ii", "<", "10"}], ",", 
      RowBox[{"ii", "+=", "1"}], ",", 
      RowBox[{"Print", "[", "ii", "]"}]}], "]"}], "]"}], "]"}]}]}], "Input",
 CellChangeTimes->{{3.593726816458549*^9, 3.5937268427655487`*^9}, {
  3.5937268753835487`*^9, 3.593726913536549*^9}}],

Cell[BoxData[
 RowBox[{
  TemplateBox[{"For"},
   "InactiveHead",
   BaseStyle->"Inactive",
   SyntaxForm->"Symbol",
   Tooltip->"Inactive[For]"], "[", 
  RowBox[{
   RowBox[{"ii", 
    TagBox["=",
     "InactiveToken",
     BaseStyle->"Inactive",
     Editable->False,
     Selectable->False,
     SyntaxForm->"="], "0"}], ",", 
   RowBox[{"ii", 
    TagBox["<",
     "InactiveToken",
     BaseStyle->"Inactive",
     Editable->False,
     Selectable->False,
     SyntaxForm->"<"], "5"}], ",", 
   RowBox[{
    TemplateBox[{"Increment"},
     "InactiveHead",
     BaseStyle->"Inactive",
     SyntaxForm->"Symbol",
     Tooltip->"Inactive[Increment]"], "[", "ii", "]"}], ",", 
   RowBox[{
    TemplateBox[{"Print"},
     "InactiveHead",
     BaseStyle->"Inactive",
     SyntaxForm->"Symbol",
     Tooltip->"Inactive[Print]"], "[", 
    RowBox[{"5", "+", "ii"}], "]"}]}], "]"}]], "Output",
 CellChangeTimes->{{3.593726818579549*^9, 3.5937269157465487`*^9}, {
   3.5937269706915493`*^9, 3.593726988714549*^9}, 3.593727019171549*^9, 
   3.593727054509549*^9, 3.5937271711725492`*^9, 3.593727226167549*^9, 
   3.593727287468549*^9, 3.593727546583549*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Activate", "[", "loop", "]"}]], "Input",
 CellChangeTimes->{{3.5937269166995487`*^9, 3.593726921237549*^9}}],

Cell[CellGroupData[{

Cell[BoxData["5"], "Print",
 CellChangeTimes->{
  3.593726921852549*^9, {3.5937269718315487`*^9, 3.593726989501549*^9}, 
   3.593727019958549*^9, 3.593727054986549*^9, 3.593727172459549*^9, 
   3.593727227685549*^9, 3.593727288149549*^9}],

Cell[BoxData["6"], "Print",
 CellChangeTimes->{
  3.593726921852549*^9, {3.5937269718315487`*^9, 3.593726989501549*^9}, 
   3.593727019958549*^9, 3.593727054986549*^9, 3.593727172459549*^9, 
   3.593727227685549*^9, 3.593727288155549*^9}],

Cell[BoxData["7"], "Print",
 CellChangeTimes->{
  3.593726921852549*^9, {3.5937269718315487`*^9, 3.593726989501549*^9}, 
   3.593727019958549*^9, 3.593727054986549*^9, 3.593727172459549*^9, 
   3.593727227685549*^9, 3.593727288161549*^9}],

Cell[BoxData["8"], "Print",
 CellChangeTimes->{
  3.593726921852549*^9, {3.5937269718315487`*^9, 3.593726989501549*^9}, 
   3.593727019958549*^9, 3.593727054986549*^9, 3.593727172459549*^9, 
   3.593727227685549*^9, 3.593727288167549*^9}],

Cell[BoxData["9"], "Print",
 CellChangeTimes->{
  3.593726921852549*^9, {3.5937269718315487`*^9, 3.593726989501549*^9}, 
   3.593727019958549*^9, 3.593727054986549*^9, 3.593727172459549*^9, 
   3.593727227685549*^9, 3.5937272881735487`*^9}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"ClearAll", "[", "ii", "]"}], "\[IndentingNewLine]", 
 RowBox[{"For", "[", 
  RowBox[{
   RowBox[{"ii", "=", "5"}], ",", 
   RowBox[{"ii", "<", "10"}], ",", 
   RowBox[{"ii", "+=", "1"}], ",", 
   RowBox[{"Print", "[", "ii", "]"}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.5937266794085493`*^9, 3.5937266891065493`*^9}, {
  3.5937268049815493`*^9, 3.593726808733549*^9}, {3.593726905157549*^9, 
  3.593726938203549*^9}}],

Cell[CellGroupData[{

Cell[BoxData["5"], "Print",
 CellChangeTimes->{{3.5937269315345488`*^9, 3.593726938860549*^9}, {
   3.593726983709549*^9, 3.593726990892549*^9}, 3.593727055561549*^9, 
   3.5937271740155487`*^9, 3.593727229168549*^9}],

Cell[BoxData["6"], "Print",
 CellChangeTimes->{{3.5937269315345488`*^9, 3.593726938860549*^9}, {
   3.593726983709549*^9, 3.593726990892549*^9}, 3.593727055561549*^9, 
   3.5937271740155487`*^9, 3.593727229174549*^9}],

Cell[BoxData["7"], "Print",
 CellChangeTimes->{{3.5937269315345488`*^9, 3.593726938860549*^9}, {
   3.593726983709549*^9, 3.593726990892549*^9}, 3.593727055561549*^9, 
   3.5937271740155487`*^9, 3.593727229181549*^9}],

Cell[BoxData["8"], "Print",
 CellChangeTimes->{{3.5937269315345488`*^9, 3.593726938860549*^9}, {
   3.593726983709549*^9, 3.593726990892549*^9}, 3.593727055561549*^9, 
   3.5937271740155487`*^9, 3.593727229187549*^9}],

Cell[BoxData["9"], "Print",
 CellChangeTimes->{{3.5937269315345488`*^9, 3.593726938860549*^9}, {
   3.593726983709549*^9, 3.593726990892549*^9}, 3.593727055561549*^9, 
   3.5937271740155487`*^9, 3.593727229193549*^9}]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["End Of Chapter Questions", "Section",
 CellChangeTimes->{{3.5935646682263327`*^9, 3.5935646699933324`*^9}, {
  3.593567197283109*^9, 3.5935672043875303`*^9}, {3.5935686134847946`*^9, 
  3.593568617363182*^9}, {3.5935687004524903`*^9, 3.5935687019956446`*^9}, {
  3.593724042424549*^9, 3.593724045720549*^9}}],

Cell[CellGroupData[{

Cell["5.1", "Subsection",
 CellChangeTimes->{{3.5937245090155487`*^9, 3.5937245095675488`*^9}}],

Cell[BoxData[
 RowBox[{"ClearAll", "[", 
  RowBox[{
  "s1", ",", "s2", ",", "s4", ",", "s6", ",", "s8", ",", "a", ",", "b", ",", 
   "c", ",", "d", ",", "e"}], "]"}]], "Input",
 CellChangeTimes->{{3.593724503204549*^9, 3.5937245787315493`*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"s1", "=", 
   RowBox[{"Inactivate", "[", 
    RowBox[{"b", "=", 
     RowBox[{"a", "*", "2"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"s2", "=", 
   RowBox[{"Inactivate", "[", 
    RowBox[{"c", "=", 
     RowBox[{"b", "+", "1"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"s4", "=", 
   RowBox[{"Inactivate", "[", 
    RowBox[{"b", "=", 
     RowBox[{"c", "+", "1"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"s6", "=", 
   RowBox[{"Inactivate", "[", 
    RowBox[{"b", "=", 
     RowBox[{"b", "-", "1"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"s8", "=", 
   RowBox[{"Inactivate", "[", 
    RowBox[{"e", "=", 
     RowBox[{"b", "-", "d"}]}], "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.593724536071549*^9, 3.593724611157549*^9}}],

Cell["\<\
The dependence graph is (note that this is the answer, but there is not flow \
dependence (or anti-dependence) between s4 and s6, since they are mutually \
exclusive).\
\>", "Text",
 CellChangeTimes->{{3.5937246487245493`*^9, 3.593724684045549*^9}, {
  3.5937295003055487`*^9, 3.593729514734549*^9}, {3.593729621538549*^9, 
  3.593729624881549*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"DependenceGraph", "[", 
  RowBox[{"{", 
   RowBox[{"s1", ",", "s2", ",", "s4", ",", "s6", ",", "s8"}], "}"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.593724614674549*^9, 3.593724624157549*^9}, {
  3.593729477457549*^9, 3.5937294887505493`*^9}}],

Cell[BoxData[
 GraphicsBox[
  NamespaceBox["NetworkGraphics",
   DynamicModuleBox[{Typeset`graph = HoldComplete[
     Graph[{1, 2, 3, 4, 
      5}, {{{1, 2}, {1, 3}, {1, 4}, {1, 5}, {2, 3}, {2, 4}, {2, 5}, {3, 4}, {
       3, 5}, {4, 5}}, Null}, {
      BaselinePosition -> Axis, 
       EdgeShapeFunction -> {
        DirectedEdge[3, 5] -> $CellContext`gFlowDependence, 
         DirectedEdge[1, 2] -> $CellContext`gFlowDependence, 
         DirectedEdge[1, 4] -> $CellContext`gFlowDependence, 
         DirectedEdge[4, 5] -> $CellContext`gFlowDependence, 
         DirectedEdge[1, 5] -> $CellContext`gFlowDependence, 
         DirectedEdge[3, 4] -> $CellContext`gFlowDependence, 
         DirectedEdge[1, 3] -> $CellContext`gOutputDependence, 
         DirectedEdge[2, 4] -> $CellContext`gAntiDependence, 
         DirectedEdge[2, 5] -> $CellContext`gInputDependence, 
         DirectedEdge[2, 3] -> $CellContext`gAntiDependence}, ImagePadding -> 
       50, VertexLabels -> {3 -> Placed[
           Inactive[Set][$CellContext`b, 
            Inactive[Plus][$CellContext`c, 1]], 
           Center, $CellContext`panelLabel], 4 -> Placed[
           Inactive[Set][$CellContext`b, 
            Inactive[Plus][$CellContext`b, -1]], 
           Center, $CellContext`panelLabel], 2 -> Placed[
           Inactive[Set][$CellContext`c, 
            Inactive[Plus][$CellContext`b, 1]], 
           Center, $CellContext`panelLabel], 5 -> Placed[
           Inactive[Set][$CellContext`e, 
            Inactive[Plus][$CellContext`b, 
             Inactive[Times][-1, $CellContext`d]]], 
           Center, $CellContext`panelLabel], 1 -> Placed[
           Inactive[Set][$CellContext`b, 
            Inactive[Times][$CellContext`a, 2]], 
           Center, $CellContext`panelLabel]}}]], Typeset`boxes, 
    Typeset`boxes$s2d = GraphicsGroupBox[{{
       Arrowheads[0.02554714064914992], 
       Directive[
        Opacity[0.7], 
        Hue[0.6, 0.7, 0.5]], {
        Arrowheads[{{0.1, 0.9}}], 
        ArrowBox[{{0., 4.}, {2., 3.}}]}, {
        Arrowheads[{{0.02, 0.5, 
           GraphicsBox[{
             Thickness[Large], 
             LineBox[{{-1, -1}, {1, 1}}], 
             LineBox[{{-1, 1}, {1, -1}}]}]}, {0.1, 0.9}}], 
        ArrowBox[CompressedData["
1:eJxTTMoPSmViYGCQAWIQjQoEHISfb9bY7X/YXu+1Wj7jTH4H8b1hDql9V+3l
dwTKCkrxO4To/W48ffOh/YW0Bi79Zj4Hucw5+Tu5X9nbfd9kFn2F16Gsvd2k
bt1H+9zMlwun8vI63OnXND/17Jt9zF5ln3t6PA5HfLfsP7Dujz3X50RTUwtu
h2kPhJ8bNDM6VHEtiZ2lyeXA/dVx47VvLA4rmF8d4WXmdGBapBX8aSarwyY5
FrVJhzgcuJasab+ryeZQXrjrpmMJh4PS7+N+M5axOXz4zfNARoLDwXN5zQol
AXYHhX2/LZTXsTs0rjg1pSaN3YFjR9uTEDN2h5P/NgovW8nusOzl2kcbN7A5
KKwyUp1/k93hT1ChsZUsm0PHKp+T6d/YHTi/XLj2tprVARIuHA5nwIDF4T8Y
sDukvXn09bw0C1z+V+JEow8lzA6MUH6L7o0m3RtMcHkW/+3P2l0R/KpjenH/
9zDC+a8m272cbIfgg5WfYoDz1xioW4kkIPjQCHMAACeOn0o=
         "]]}, {
        Arrowheads[{{0.1, 0.9}}], 
        ArrowBox[CompressedData["
1:eJxTTMoPSmViYGBQBWIQjQoEHGCs4PM3jr6ezw/nb/SQrNhliuBL5BwUyznI
B+e3Wl5cyOCM4P/ZANLAC+fXXVKvvaSO4LPNyzvL380D588QluUyeMIN5xuD
AYJ/EaS9lgvOL5I5XihznBPOFxYEAQR/A2s0EHHA+QG/lvj/WsIO579/BwJs
cH7fYwsgQvD1bjTp3mhihfNNwO5hdli4aeUq5tk59nGXtVTlGpig/B772adq
93y9xOhQVfKf30h8gf0HCZ2fO7UZofJr7CP2md7O6mJw6J8cclcqcpv9mlLT
owL3/ttD1B+wvySzTU518z/7I29Wnlv37Ki9UtHbQ0JT/tpD9J+xn116e+PN
hj/2XMn/AyWkLtnbqTe8rqz8bX+sfeLXWyY37fnmzXY6uemnvaJL20X/8/ft
f+bN49bh+WHPd+Zd0e4vj+x/z+xwW9T6zf7WQW/JFQef2gvLR33Wlv9qX8Z8
63au3wt7139CQidvfLZ/NGHmLp7Zr+wnmG9eVLnpk71MVtfWluVv7D+dslpq
u+ajvXr/mjNXi9/Z5+5YKSl67IM9JHQQNAAmY8WG
         "]]}, {
        Arrowheads[{{0.1, 0.9}}], 
        ArrowBox[CompressedData["
1:eJxTTMoPSmViYGDQA2IQjQoEHGbympsuPrRi/wll7eKvc/gd5NavCb51eNf+
9llJug81+R2q9swUPTv56H6rlGV6h5fxOWh8mj7B49i5/fcavpXNFuZz8KnJ
OLu+5sr+sg9BbFkFvA5P0pWkOsVu7WfZvPuO3l4eh/d3bcQjJB7sbzlh8Ovl
T24HWRvz1kmpj/f/NNgUN1uN26Haj+H650/P9ie+sedyduZyiJgcKmp/88V+
Q1ch9cn7OR3OtYT6hLS92v/erXPeN1NOh0dKDDXGv17vn/FxSUHuMg6H/tzQ
JXdM3u7Xck2d+12Aw+FaSuhRf7N3+5c7nlKZWsrusJOD4X7Pv3f7BZ5fZnO7
wuZgFhn6cXLv+/0ppk3OXLpsDn5hoX9SHr/fv1jn6q2H9awOkHD5sN/EGASY
4fwr6rWX1GuZ4PxCmeNAxOjACOULCYIAI1x+I2v0BtZoBjh/wRfP+V88/9vD
+PfugsBfOF8WZFzhHzg/ZgPIgN9wfhoYfLNXWGWkOv/m+/1vxOOCVDi+2jet
ODWlJu39fvYo2ZndRz/bK/8+7jdj2bv9W3SWWM2Z98meaZFW8KeZb/d/7P9k
Fjb5o73y3E8Luxze7D/QzNG3c/EH+9Y38taJs17tdxY4U98z/7292oRNcmXL
X+zXshKb+UPvnT1Xxyqfk+nP9pu1vk/f/vWNvfYV9qNRtx/vT/kY/ubE59f2
CZx2hXzGJ/bLXsvvnBb53P7RxFimX52n7G8YV2hpyz+293iwZmK20SN7DdFH
83g779mLffwwjXnxG/s5W7Z8CJp83b7wtKGH8q9P9iJuGV5qsRftr2Uw2UsJ
f7eXnvwznP/scftdAa/Wp835Za/w50Tonb177OWaX87imPbXXs7E1WzJ/pXQ
8IGFMwMDADI0RDE=
         "]]}, {
        Arrowheads[{{0.02, 0.5, 
           GraphicsBox[{
             Thickness[Large], 
             LineBox[{{0, 1}, {0, -1}}]}]}, {0.1, 0.9}}], 
        ArrowBox[{{2., 3.}, {3., 2.}}]}, {
        Arrowheads[{{0.02, 0.5, 
           GraphicsBox[{
             Thickness[Large], 
             LineBox[{{0, 1}, {0, -1}}]}]}, {0.1, 0.9}}], 
        ArrowBox[CompressedData["
1:eJxTTMoPSmViYGCQAWIQDQUOEIrDYZJ72LNXlv/tTyprF3+dw+7AZ3o06lDw
P/uOWUm6DzXZHYpO+MS2+f61t0xZpnd4GZvDHsa3b83U/9jfa/hWNluYzeHt
g6U8Vx78si/7EMSWVcDqwJ5WvjO26qc9y+bdd/T2sjhwTEz8cvnzd/uWEwa/
Xv5kdviUmLLXzPeb/U+DTXGz1ZgdDt2oF2lr+2Kf+Maey9mZySHELLQ0YfJn
eyNXIfXJ+xkdZthevXl1zyf7926d876ZMjpMePff8RnTJ/sZH5cU5C5jcLD0
vLp2YupHey3X1LnfBRgcpvqGyt548sE+oHmKp9brf/ZLftdP2NnwwV7p3HLe
nhV/7VODQ9nNLD/Yn8hiaReJ+mN/K+Rqoy/fB3v3yFVbD///ZQ8Jlw/2s2aC
wE84//yNo6/nm/+A8z8fVkp98PKbPSOUzx69gTV6w1e4PPu8vLP83V/g/K89
sXv+VX6G8y+p1wLRJzgfrHzKRzg/ItGvROPABzgfRgMAalm6pQ==
         "]]}, {
        Arrowheads[{{0.02, 0.5, 
           GraphicsBox[{
             Thickness[Large], 
             CircleBox[{0, 0}]}]}, {0.1, 0.9}}], 
        ArrowBox[CompressedData["
1:eJxTTMoPSmViYGBQBWIQDQUOEIrDAcYPOX/j6Ov57HD+Jg/Jil2m7A6MUL54
zkGxnINscPk2y4sLGZwR/L8bQBpY4fy6S+q1l9QRfI55eWf5u1ng/JnCslwG
T5jhfBNjEEDwr4C01zLB+YUyx4GIEe4eIUEQYITLb2SN3sAazQDnL/jiOf+L
5397GP/eXRD4C+fLgowr/APnx2wAGfAbzk8Dg29w/mL/X0v8f32B8x9b9AHR
Z3uYe5SVQOATXD6Re1sC97YPcL79y8l2Lye/g/P37AaB13C+Jci4xy/gfJDu
BO5ncD44eIwfw/nzNnZft89/AOef4++e0rj8tj1qfF2Dy4Ni017nEpy/Iv3N
o6/nT8P5U+xADjwM5z94ee3PBo+dcP4/rTOdfKwr4HwozQAAMlCKhg==
         "]]}, {
        Arrowheads[{{0.1, 0.9}}], 
        ArrowBox[{{3., 2.}, {1., 1.}}]}, {
        Arrowheads[{{0.1, 0.9}}], 
        ArrowBox[CompressedData["
1:eJxTTMoPSmViYGCQAWIQDQEcDlCGw38wYHdYPm9j93X7//Yw+aSJRh9Ksv/Z
M0L5ejeadG80/YXL8xQvcmZs+wPn/0oEafiN4C/xByGEepu7s+TFfsL5hupW
IgknvsP5aWDwzX5SqKj9zR/sDjuWhXrZMHy19wsL/ZPymN3BfOrvitdLP9vr
Mx0wX7yf3eGBYcSn4vBP9qaRoR8n97I7bKjJ3nZV5KN9crSoprkvu0PE66wu
xT3v7XdwMNzv+cfmsMgyx9Yr7a29SaKo8NSFbA5OT261qmq8tr+aEnrU34zN
wfT1tuTNjC/t5wkf+LpnD6tDtR/D9c+fntmznfddmHKTxUHGxrx1Uupj+xrz
86xibCwO7+/aiEdIPLD/6+OifNGJ2eFZupJUp9gt+y7+tT+n9jM5+NRknF1f
c8VeqZ6zM+UNo4P6p+kTPI6dsz8xO/KiTSSjQ/WemaJnJx+1r0yde0nuGoOD
3Po1wbcO77I3v3OlhyuZwWEer7np4kMr7GHxBIs5AD06p5o=
         "]]}, {
        Arrowheads[{{0.1, 0.9}}], 
        ArrowBox[{{1., 1.}, {2., 0.}}]}}, {
       Directive[
        Hue[0.6, 0.2, 0.8], 
        EdgeForm[
         Directive[
          GrayLevel[0], 
          Opacity[0.7]]]], 
       TagBox[{
         TagBox[
          DiskBox[{0., 4.}, 0.03700564971751412], "DynamicName", BoxID -> 
          "VertexID$1"], 
         InsetBox[
          FormBox[
           PanelBox[
            RowBox[{"b", 
              TagBox[
              "=", "InactiveToken", BaseStyle -> "InactiveTraditional", 
               SyntaxForm -> "=", Editable -> False, Selectable -> False], 
              RowBox[{"a", 
                TagBox[
                "*", "InactiveToken", BaseStyle -> "InactiveTraditional", 
                 SyntaxForm -> "*", Editable -> False, Selectable -> False], 
                "2"}]}], FrameMargins -> 0, Background -> Directive[
              RGBColor[1, 1, 0], 
              Opacity[0.1]]], TraditionalForm], 
          DynamicLocation["VertexID$1", None, Center], BaseStyle -> 
          "Graphics"]}, "DynamicName", BoxID -> "VertexLabelID$1"], 
       TagBox[{
         TagBox[
          DiskBox[{2., 3.}, 0.03700564971751412], "DynamicName", BoxID -> 
          "VertexID$2"], 
         InsetBox[
          FormBox[
           PanelBox[
            RowBox[{"c", 
              TagBox[
              "=", "InactiveToken", BaseStyle -> "InactiveTraditional", 
               SyntaxForm -> "=", Editable -> False, Selectable -> False], 
              RowBox[{"b", 
                TagBox[
                "+", "InactiveToken", BaseStyle -> "InactiveTraditional", 
                 SyntaxForm -> "+", Editable -> False, Selectable -> False], 
                "1"}]}], FrameMargins -> 0, Background -> Directive[
              RGBColor[1, 1, 0], 
              Opacity[0.1]]], TraditionalForm], 
          DynamicLocation["VertexID$2", None, Center], BaseStyle -> 
          "Graphics"]}, "DynamicName", BoxID -> "VertexLabelID$2"], 
       TagBox[{
         TagBox[
          DiskBox[{3., 2.}, 0.03700564971751412], "DynamicName", BoxID -> 
          "VertexID$3"], 
         InsetBox[
          FormBox[
           PanelBox[
            RowBox[{"b", 
              TagBox[
              "=", "InactiveToken", BaseStyle -> "InactiveTraditional", 
               SyntaxForm -> "=", Editable -> False, Selectable -> False], 
              RowBox[{"c", 
                TagBox[
                "+", "InactiveToken", BaseStyle -> "InactiveTraditional", 
                 SyntaxForm -> "+", Editable -> False, Selectable -> False], 
                "1"}]}], FrameMargins -> 0, Background -> Directive[
              RGBColor[1, 1, 0], 
              Opacity[0.1]]], TraditionalForm], 
          DynamicLocation["VertexID$3", None, Center], BaseStyle -> 
          "Graphics"]}, "DynamicName", BoxID -> "VertexLabelID$3"], 
       TagBox[{
         TagBox[
          DiskBox[{1., 1.}, 0.03700564971751412], "DynamicName", BoxID -> 
          "VertexID$4"], 
         InsetBox[
          FormBox[
           PanelBox[
            RowBox[{"b", 
              TagBox[
              "=", "InactiveToken", BaseStyle -> "InactiveTraditional", 
               SyntaxForm -> "=", Editable -> False, Selectable -> False], 
              RowBox[{"b", 
                TagBox[
                "+", "InactiveToken", BaseStyle -> "InactiveTraditional", 
                 SyntaxForm -> "+", Editable -> False, Selectable -> False], 
                RowBox[{"-", "1"}]}]}], FrameMargins -> 0, Background -> 
            Directive[
              RGBColor[1, 1, 0], 
              Opacity[0.1]]], TraditionalForm], 
          DynamicLocation["VertexID$4", None, Center], BaseStyle -> 
          "Graphics"]}, "DynamicName", BoxID -> "VertexLabelID$4"], 
       TagBox[{
         TagBox[
          DiskBox[{2., 0.}, 0.03700564971751412], "DynamicName", BoxID -> 
          "VertexID$5"], 
         InsetBox[
          FormBox[
           PanelBox[
            RowBox[{"e", 
              TagBox[
              "=", "InactiveToken", BaseStyle -> "InactiveTraditional", 
               SyntaxForm -> "=", Editable -> False, Selectable -> False], 
              RowBox[{"b", 
                TagBox[
                "+", "InactiveToken", BaseStyle -> "InactiveTraditional", 
                 SyntaxForm -> "+", Editable -> False, Selectable -> False], 
                RowBox[{
                  RowBox[{"-", "1"}], 
                  TagBox[
                  "*", "InactiveToken", BaseStyle -> "InactiveTraditional", 
                   SyntaxForm -> "*", Editable -> False, Selectable -> False],
                   "d"}]}]}], FrameMargins -> 0, Background -> Directive[
              RGBColor[1, 1, 0], 
              Opacity[0.1]]], TraditionalForm], 
          DynamicLocation["VertexID$5", None, Center], BaseStyle -> 
          "Graphics"]}, "DynamicName", BoxID -> 
        "VertexLabelID$5"]}}], $CellContext`flag}, 
    TagBox[
     DynamicBox[GraphComputation`NetworkGraphicsBox[
      3, Typeset`graph, Typeset`boxes, $CellContext`flag], {
      CachedValue :> Typeset`boxes, SingleEvaluation -> True, 
       SynchronousUpdating -> False, TrackedSymbols :> {$CellContext`flag}},
      ImageSizeCache->{{51.7606933090101, 
       331.2513212456047}, {-262.45932124560454`, 16.331306690990118`}}],
     MouseAppearanceTag["NetworkGraphics"]],
    AllowKernelInitialization->False,
    UnsavedVariables:>{$CellContext`flag}]],
  BaselinePosition->Axis,
  DefaultBaseStyle->{
   "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
  FrameTicks->None,
  ImagePadding->50]], "Output",
 CellChangeTimes->{
  3.593724624465549*^9, {3.5937294552245493`*^9, 3.5937294891585493`*^9}, 
   3.593731576650549*^9}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["5.2", "Subsection",
 CellChangeTimes->{{3.5937245090155487`*^9, 3.5937245095675488`*^9}, {
  3.593724744018549*^9, 3.5937247443305492`*^9}}],

Cell[TextData[{
 "First, normalize the loop, define a function ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"j", 
     RowBox[{"(", "i", ")"}]}], " ", "=", " ", 
    RowBox[{"i", " ", "-", " ", "3"}]}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 " so ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     SuperscriptBox["j", 
      RowBox[{"-", "1"}]], "(", "i", ")"}], " ", "=", " ", 
    RowBox[{"i", " ", "+", " ", "3"}]}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 " . Now, substitute all ",
 Cell[BoxData[
  FormBox["i", TraditionalForm]],
  FormatType->"TraditionalForm"],
 " with ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SuperscriptBox["j", 
     RowBox[{"-", "1"}]], "(", "i", ")"}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 ". The loop is now transformed to"
}], "Text",
 CellChangeTimes->{{3.593724884951549*^9, 3.593724921676549*^9}, {
  3.5937250130075493`*^9, 3.593725081471549*^9}}],

Cell["\<\
1. for (int j = 0; j < N - 3; j++) {
2. \t a[j + 3] = (a[j + 1] + a[j + 5])/2;
3. }\
\>", "Program",
 CellChangeTimes->{{3.593567097431143*^9, 3.5935671846585846`*^9}, {
  3.593630258368715*^9, 3.593630292769715*^9}, {3.5936315760607147`*^9, 
  3.5936315765817146`*^9}, {3.593632258339715*^9, 3.5936322694657145`*^9}, {
  3.593635103973715*^9, 3.5936351869497147`*^9}, {3.593635359684715*^9, 
  3.5936353627087145`*^9}, {3.593723928845549*^9, 3.593723981979549*^9}, {
  3.593724937453549*^9, 3.5937250064965487`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"ClearAll", "[", "j", "]"}], "\[IndentingNewLine]", 
 RowBox[{"With", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"n", "=", "10"}], "}"}], ",", "\[IndentingNewLine]", 
   RowBox[{"{", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"StrongSIV", "[", 
      RowBox[{"n", ",", 
       RowBox[{"Inactivate", "[", 
        RowBox[{"3", "+", 
         RowBox[{"1", "*", "j"}]}], "]"}], ",", 
       RowBox[{"Inactivate", "[", 
        RowBox[{"1", "+", 
         RowBox[{"1", "*", "j"}]}], "]"}]}], "]"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"StrongSIV", "[", 
      RowBox[{"n", ",", 
       RowBox[{"Inactivate", "[", 
        RowBox[{"3", "+", 
         RowBox[{"1", "*", "i"}]}], "]"}], ",", 
       RowBox[{"Inactivate", "[", 
        RowBox[{"5", "+", 
         RowBox[{"1", "*", "i"}]}], "]"}]}], "]"}]}], "\[IndentingNewLine]", 
    "}"}]}], "\[IndentingNewLine]", "]"}]}], "Input",
 CellChangeTimes->{{3.593724745611549*^9, 3.593724805329549*^9}, {
  3.593725105681549*^9, 3.593725146360549*^9}, {3.593727652804549*^9, 
  3.593727662898549*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"2", ",", "\<\"<\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "2"}], ",", "\<\"<\"\>"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.593724805877549*^9, 3.593724830251549*^9}, {
  3.593725126984549*^9, 3.5937251468055487`*^9}, {3.5937276584095488`*^9, 
  3.5937276634825487`*^9}}]
}, Open  ]],

Cell["\<\
So, is the direction vector {2} or {-2} ????? How do you determine the \
direction vector if you do not know the upper bound??\
\>", "Text",
 CellChangeTimes->{{3.5937251732245493`*^9, 3.593725191693549*^9}, {
  3.5937255801805487`*^9, 3.593725595880549*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["5.3", "Subsection",
 CellChangeTimes->{{3.5937245090155487`*^9, 3.5937245095675488`*^9}, {
   3.593724744018549*^9, 3.5937247443305492`*^9}, 3.593725209938549*^9}],

Cell[BoxData[
 RowBox[{
  RowBox[{"distances", "=", 
   RowBox[{"{", 
    RowBox[{"2", ",", 
     RowBox[{"-", "2"}]}], "}"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.593725605024549*^9, 3.593725610275549*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"With", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"n", "=", "10"}], "}"}], ",", "\[IndentingNewLine]", 
   RowBox[{"Graphics", "[", 
    RowBox[{"{", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"Line", "[", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"0", ",", "0"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"n", ",", "0"}], "}"}]}], "}"}], "]"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"Table", "[", 
       RowBox[{
        RowBox[{"{", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"Opacity", "[", "0.5", "]"}], ",", 
            RowBox[{"Arrowheads", "[", "Small", "]"}], ",", 
            RowBox[{
             RowBox[{
              RowBox[{"Arrow", "[", 
               RowBox[{"BezierCurve", "[", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{"j", ",", "0"}], "}"}], ",", 
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{"j", "+", 
                    RowBox[{"#", "/", "2"}]}], ",", 
                    RowBox[{"#", "/", "2"}]}], "}"}], ",", 
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{"j", "+", "#"}], ",", "0"}], "}"}]}], "}"}], 
                "]"}], "]"}], "&"}], "/@", "distances"}]}], "}"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"PointSize", "[", "Large", "]"}], ",", "Red", ",", 
            RowBox[{"Point", "[", 
             RowBox[{"{", 
              RowBox[{"j", ",", "0"}], "}"}], "]"}], ",", "Black", ",", 
            RowBox[{"Text", "[", 
             RowBox[{
              RowBox[{"Style", "[", 
               RowBox[{"j", ",", "Bold"}], "]"}], ",", 
              RowBox[{"{", 
               RowBox[{"j", ",", 
                RowBox[{"-", "0.5"}]}], "}"}]}], "]"}]}], "}"}]}], 
         "\[IndentingNewLine]", "}"}], ",", "\[IndentingNewLine]", 
        RowBox[{"{", 
         RowBox[{"j", ",", "0", ",", "n"}], "}"}]}], "\[IndentingNewLine]", 
       "]"}]}], "\[IndentingNewLine]", "}"}], "]"}]}], "\[IndentingNewLine]", 
  "]"}]], "Input",
 CellChangeTimes->{{3.593725212920549*^9, 3.5937253366655493`*^9}, {
  3.593725374965549*^9, 3.5937253968835487`*^9}, {3.593725429068549*^9, 
  3.593725526273549*^9}, {3.593725620057549*^9, 3.593725765142549*^9}, {
  3.593725807181549*^9, 3.593725863131549*^9}}],

Cell[BoxData[
 GraphicsBox[{LineBox[{{0, 0}, {10, 0}}], {{
     {Opacity[0.5], Arrowheads[Small], 
      ArrowBox[BezierCurveBox[{{0, 0}, {1, 1}, {2, 0}}]], 
      ArrowBox[BezierCurveBox[{{0, 0}, {-1, -1}, {-2, 0}}]]}, 
     {RGBColor[1, 0, 0], PointSize[Large], PointBox[{0, 0}], 
      {GrayLevel[0], InsetBox[
        StyleBox["0",
         StripOnInput->False,
         FontWeight->Bold], {0, -0.5}]}}}, {
     {Opacity[0.5], Arrowheads[Small], 
      ArrowBox[BezierCurveBox[{{1, 0}, {2, 1}, {3, 0}}]], 
      ArrowBox[BezierCurveBox[{{1, 0}, {0, -1}, {-1, 0}}]]}, 
     {RGBColor[1, 0, 0], PointSize[Large], PointBox[{1, 0}], 
      {GrayLevel[0], InsetBox[
        StyleBox["1",
         StripOnInput->False,
         FontWeight->Bold], {1, -0.5}]}}}, {
     {Opacity[0.5], Arrowheads[Small], 
      ArrowBox[BezierCurveBox[{{2, 0}, {3, 1}, {4, 0}}]], 
      ArrowBox[BezierCurveBox[{{2, 0}, {1, -1}, {0, 0}}]]}, 
     {RGBColor[1, 0, 0], PointSize[Large], PointBox[{2, 0}], 
      {GrayLevel[0], InsetBox[
        StyleBox["2",
         StripOnInput->False,
         FontWeight->Bold], {2, -0.5}]}}}, {
     {Opacity[0.5], Arrowheads[Small], 
      ArrowBox[BezierCurveBox[{{3, 0}, {4, 1}, {5, 0}}]], 
      ArrowBox[BezierCurveBox[{{3, 0}, {2, -1}, {1, 0}}]]}, 
     {RGBColor[1, 0, 0], PointSize[Large], PointBox[{3, 0}], 
      {GrayLevel[0], InsetBox[
        StyleBox["3",
         StripOnInput->False,
         FontWeight->Bold], {3, -0.5}]}}}, {
     {Opacity[0.5], Arrowheads[Small], 
      ArrowBox[BezierCurveBox[{{4, 0}, {5, 1}, {6, 0}}]], 
      ArrowBox[BezierCurveBox[{{4, 0}, {3, -1}, {2, 0}}]]}, 
     {RGBColor[1, 0, 0], PointSize[Large], PointBox[{4, 0}], 
      {GrayLevel[0], InsetBox[
        StyleBox["4",
         StripOnInput->False,
         FontWeight->Bold], {4, -0.5}]}}}, {
     {Opacity[0.5], Arrowheads[Small], 
      ArrowBox[BezierCurveBox[{{5, 0}, {6, 1}, {7, 0}}]], 
      ArrowBox[BezierCurveBox[{{5, 0}, {4, -1}, {3, 0}}]]}, 
     {RGBColor[1, 0, 0], PointSize[Large], PointBox[{5, 0}], 
      {GrayLevel[0], InsetBox[
        StyleBox["5",
         StripOnInput->False,
         FontWeight->Bold], {5, -0.5}]}}}, {
     {Opacity[0.5], Arrowheads[Small], 
      ArrowBox[BezierCurveBox[{{6, 0}, {7, 1}, {8, 0}}]], 
      ArrowBox[BezierCurveBox[{{6, 0}, {5, -1}, {4, 0}}]]}, 
     {RGBColor[1, 0, 0], PointSize[Large], PointBox[{6, 0}], 
      {GrayLevel[0], InsetBox[
        StyleBox["6",
         StripOnInput->False,
         FontWeight->Bold], {6, -0.5}]}}}, {
     {Opacity[0.5], Arrowheads[Small], 
      ArrowBox[BezierCurveBox[{{7, 0}, {8, 1}, {9, 0}}]], 
      ArrowBox[BezierCurveBox[{{7, 0}, {6, -1}, {5, 0}}]]}, 
     {RGBColor[1, 0, 0], PointSize[Large], PointBox[{7, 0}], 
      {GrayLevel[0], InsetBox[
        StyleBox["7",
         StripOnInput->False,
         FontWeight->Bold], {7, -0.5}]}}}, {
     {Opacity[0.5], Arrowheads[Small], 
      ArrowBox[BezierCurveBox[{{8, 0}, {9, 1}, {10, 0}}]], 
      ArrowBox[BezierCurveBox[{{8, 0}, {7, -1}, {6, 0}}]]}, 
     {RGBColor[1, 0, 0], PointSize[Large], PointBox[{8, 0}], 
      {GrayLevel[0], InsetBox[
        StyleBox["8",
         StripOnInput->False,
         FontWeight->Bold], {8, -0.5}]}}}, {
     {Opacity[0.5], Arrowheads[Small], 
      ArrowBox[BezierCurveBox[{{9, 0}, {10, 1}, {11, 0}}]], 
      ArrowBox[BezierCurveBox[{{9, 0}, {8, -1}, {7, 0}}]]}, 
     {RGBColor[1, 0, 0], PointSize[Large], PointBox[{9, 0}], 
      {GrayLevel[0], InsetBox[
        StyleBox["9",
         StripOnInput->False,
         FontWeight->Bold], {9, -0.5}]}}}, {
     {Opacity[0.5], Arrowheads[Small], 
      ArrowBox[BezierCurveBox[{{10, 0}, {11, 1}, {12, 0}}]], 
      ArrowBox[BezierCurveBox[{{10, 0}, {9, -1}, {8, 0}}]]}, 
     {RGBColor[1, 0, 0], PointSize[Large], PointBox[{10, 0}], 
      {GrayLevel[0], InsetBox[
        StyleBox["10",
         StripOnInput->False,
         FontWeight->Bold], {10, -0.5}]}}}}},
  ImageSize->{572.8, 89.6}]], "Output",
 CellChangeTimes->{
  3.593725266120549*^9, {3.5937253171995487`*^9, 3.5937253229815493`*^9}, {
   3.593725393302549*^9, 3.593725397236549*^9}, {3.593725456214549*^9, 
   3.5937254607315493`*^9}, {3.593725499685549*^9, 3.5937255265855494`*^9}, 
   3.593725635693549*^9, {3.593725667503549*^9, 3.593725765615549*^9}, {
   3.593725819832549*^9, 3.593725863777549*^9}}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["5.4", "Subsection",
 CellChangeTimes->{{3.5937245090155487`*^9, 3.5937245095675488`*^9}, {
   3.593724744018549*^9, 3.5937247443305492`*^9}, 3.593725209938549*^9, 
   3.593725880642549*^9}],

Cell["First, normalize the loop", "Text",
 CellChangeTimes->{{3.593724884951549*^9, 3.593724921676549*^9}, {
   3.5937250130075493`*^9, 3.593725081471549*^9}, 3.593727083005549*^9}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"ClearAll", "[", 
  RowBox[{"ii", ",", "n", ",", "a"}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"NormalizeLoop", "[", 
  RowBox[{"Inactivate", "[", "\[IndentingNewLine]", 
   RowBox[{"For", "[", 
    RowBox[{
     RowBox[{"ii", "=", "3"}], ",", 
     RowBox[{"ii", "<", "n"}], ",", 
     RowBox[{"ii", "+=", "2"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"a", "[", 
       RowBox[{"[", "ii", "]"}], "]"}], "=", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{"a", "[", 
          RowBox[{"[", 
           RowBox[{"ii", "-", "1"}], "]"}], "]"}], "+", 
         RowBox[{"a", "[", 
          RowBox[{"[", 
           RowBox[{"ii", "+", "1"}], "]"}], "]"}]}], ")"}], "/", "2"}]}]}], 
    "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", "]"}], 
  "]"}]}], "Input",
 CellChangeTimes->{{3.5937270842845488`*^9, 3.593727139228549*^9}, {
  3.593727319348549*^9, 3.5937273365295486`*^9}}],

Cell[BoxData[
 RowBox[{
  TemplateBox[{"For"},
   "InactiveHead",
   BaseStyle->"Inactive",
   SyntaxForm->"Symbol",
   Tooltip->"Inactive[For]"], "[", 
  RowBox[{
   RowBox[{"ii", 
    TagBox["=",
     "InactiveToken",
     BaseStyle->"Inactive",
     Editable->False,
     Selectable->False,
     SyntaxForm->"="], "0"}], ",", 
   RowBox[{"ii", 
    TagBox["<",
     "InactiveToken",
     BaseStyle->"Inactive",
     Editable->False,
     Selectable->False,
     SyntaxForm->"<"], 
    RowBox[{
     FractionBox["1", "2"], " ", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"-", "3"}], "+", "n"}], ")"}]}]}], ",", 
   RowBox[{
    TemplateBox[{"Increment"},
     "InactiveHead",
     BaseStyle->"Inactive",
     SyntaxForm->"Symbol",
     Tooltip->"Inactive[Increment]"], "[", "ii", "]"}], ",", 
   RowBox[{
    TemplateBox[{"Inactive","a",RowBox[{"2", " ", 
        RowBox[{"(", 
          RowBox[{"1", "+", "ii"}], ")"}]}]},
     "InactivePart"], 
    TagBox["=",
     "InactiveToken",
     BaseStyle->"Inactive",
     Editable->False,
     Selectable->False,
     SyntaxForm->"="], 
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       TemplateBox[{"Inactive","a",RowBox[{
           RowBox[{"2", " ", 
             RowBox[{"(", 
               RowBox[{"1", "+", "ii"}], ")"}]}], 
           TagBox[
           "+", "InactiveToken", BaseStyle -> "Inactive", Editable -> False, 
            Selectable -> False, SyntaxForm -> "+"], 
           RowBox[{"-", "1"}]}]},
        "InactivePart"], 
       TagBox["+",
        "InactiveToken",
        BaseStyle->"Inactive",
        Editable->False,
        Selectable->False,
        SyntaxForm->"+"], 
       TemplateBox[{"Inactive","a",RowBox[{
           RowBox[{"2", " ", 
             RowBox[{"(", 
               RowBox[{"1", "+", "ii"}], ")"}]}], 
           TagBox[
           "+", "InactiveToken", BaseStyle -> "Inactive", Editable -> False, 
            Selectable -> False, SyntaxForm -> "+"], "1"}]},
        "InactivePart"]}], ")"}], 
     TagBox["*",
      "InactiveToken",
      BaseStyle->"Inactive",
      Editable->False,
      Selectable->False,
      SyntaxForm->"*"], 
     RowBox[{"2", 
      TagBox["^",
       "InactiveToken",
       BaseStyle->"Inactive",
       Editable->False,
       Selectable->False,
       SyntaxForm->"^"], 
      RowBox[{"(", 
       RowBox[{"-", "1"}], ")"}]}]}]}]}], "]"}]], "Output",
 CellChangeTimes->{
  3.593727140433549*^9, 3.593727177273549*^9, 3.593727232518549*^9, {
   3.593727263578549*^9, 3.593727336848549*^9}, 3.593727385405549*^9, 
   3.593727550419549*^9}]
}, Open  ]],

Cell["\<\
It is annoying that the normalization does not place things in SIV form, but \
we get\
\>", "Text",
 CellChangeTimes->{{3.593727390818549*^9, 3.593727408052549*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"ClearAll", "[", "ii", "]"}], "\[IndentingNewLine]", 
 RowBox[{"{", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"StrongSIV", "[", 
    RowBox[{"10", ",", 
     RowBox[{"Inactivate", "[", 
      RowBox[{"2", "+", 
       RowBox[{"2", "*", "ii"}]}], "]"}], ",", 
     RowBox[{"Inactivate", "[", 
      RowBox[{"1", "+", 
       RowBox[{"2", "*", "ii"}]}], "]"}]}], "]"}], ",", "\[IndentingNewLine]", 
   RowBox[{"StrongSIV", "[", 
    RowBox[{"10", ",", 
     RowBox[{"Inactivate", "[", 
      RowBox[{"2", "+", 
       RowBox[{"2", "*", "ii"}]}], "]"}], ",", 
     RowBox[{"Inactivate", "[", 
      RowBox[{"3", "+", 
       RowBox[{"2", "*", "ii"}]}], "]"}]}], "]"}]}], "\[IndentingNewLine]", 
  "}"}]}], "Input",
 CellChangeTimes->{{3.593724745611549*^9, 3.593724805329549*^9}, {
  3.593725105681549*^9, 3.593725146360549*^9}, {3.593727417089549*^9, 
  3.593727469702549*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     FractionBox["1", "2"], ",", "\<\"Unknown\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", 
      FractionBox["1", "2"]}], ",", "\<\"Unknown\"\>"}], "}"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{{3.593724805877549*^9, 3.593724830251549*^9}, {
   3.593725126984549*^9, 3.5937251468055487`*^9}, 3.593727267339549*^9, 
   3.5937273860735493`*^9, {3.593727443447549*^9, 3.5937274701655493`*^9}, 
   3.5937275535335493`*^9}]
}, Open  ]],

Cell["There is no dependence", "Text",
 CellChangeTimes->{{3.593727490951549*^9, 3.593727494950549*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["5.6", "Subsection",
 CellChangeTimes->{{3.5937245090155487`*^9, 3.5937245095675488`*^9}, {
   3.593724744018549*^9, 3.5937247443305492`*^9}, 3.593725209938549*^9, 
   3.593725880642549*^9, 3.593727586222549*^9}],

Cell["First, normalize the loop", "Text",
 CellChangeTimes->{{3.593724884951549*^9, 3.593724921676549*^9}, {
   3.5937250130075493`*^9, 3.593725081471549*^9}, 3.593727083005549*^9}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"ClearAll", "[", 
  RowBox[{"ii", ",", "n", ",", "a"}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"NormalizeLoop", "[", 
  RowBox[{"Inactivate", "[", "\[IndentingNewLine]", 
   RowBox[{"For", "[", 
    RowBox[{
     RowBox[{"ii", "=", "3"}], ",", 
     RowBox[{"ii", "<", "n"}], ",", 
     RowBox[{"ii", "+=", "2"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"a", "[", 
       RowBox[{"[", "ii", "]"}], "]"}], "=", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{"a", "[", 
          RowBox[{"[", 
           RowBox[{"ii", "-", "2"}], "]"}], "]"}], "+", 
         RowBox[{"a", "[", 
          RowBox[{"[", 
           RowBox[{"ii", "+", "2"}], "]"}], "]"}]}], ")"}], "/", "2"}]}]}], 
    "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", "]"}], 
  "]"}]}], "Input",
 CellChangeTimes->{{3.5937270842845488`*^9, 3.593727139228549*^9}, {
  3.593727319348549*^9, 3.5937273365295486`*^9}, {3.593727590385549*^9, 
  3.5937275924015493`*^9}}],

Cell[BoxData[
 RowBox[{
  TemplateBox[{"For"},
   "InactiveHead",
   BaseStyle->"Inactive",
   SyntaxForm->"Symbol",
   Tooltip->"Inactive[For]"], "[", 
  RowBox[{
   RowBox[{"ii", 
    TagBox["=",
     "InactiveToken",
     BaseStyle->"Inactive",
     Editable->False,
     Selectable->False,
     SyntaxForm->"="], "0"}], ",", 
   RowBox[{"ii", 
    TagBox["<",
     "InactiveToken",
     BaseStyle->"Inactive",
     Editable->False,
     Selectable->False,
     SyntaxForm->"<"], 
    RowBox[{
     FractionBox["1", "2"], " ", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"-", "3"}], "+", "n"}], ")"}]}]}], ",", 
   RowBox[{
    TemplateBox[{"Increment"},
     "InactiveHead",
     BaseStyle->"Inactive",
     SyntaxForm->"Symbol",
     Tooltip->"Inactive[Increment]"], "[", "ii", "]"}], ",", 
   RowBox[{
    TemplateBox[{"Inactive","a",RowBox[{"2", " ", 
        RowBox[{"(", 
          RowBox[{"1", "+", "ii"}], ")"}]}]},
     "InactivePart"], 
    TagBox["=",
     "InactiveToken",
     BaseStyle->"Inactive",
     Editable->False,
     Selectable->False,
     SyntaxForm->"="], 
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       TemplateBox[{"Inactive","a",RowBox[{
           RowBox[{"2", " ", 
             RowBox[{"(", 
               RowBox[{"1", "+", "ii"}], ")"}]}], 
           TagBox[
           "+", "InactiveToken", BaseStyle -> "Inactive", Editable -> False, 
            Selectable -> False, SyntaxForm -> "+"], 
           RowBox[{"-", "2"}]}]},
        "InactivePart"], 
       TagBox["+",
        "InactiveToken",
        BaseStyle->"Inactive",
        Editable->False,
        Selectable->False,
        SyntaxForm->"+"], 
       TemplateBox[{"Inactive","a",RowBox[{
           RowBox[{"2", " ", 
             RowBox[{"(", 
               RowBox[{"1", "+", "ii"}], ")"}]}], 
           TagBox[
           "+", "InactiveToken", BaseStyle -> "Inactive", Editable -> False, 
            Selectable -> False, SyntaxForm -> "+"], "2"}]},
        "InactivePart"]}], ")"}], 
     TagBox["*",
      "InactiveToken",
      BaseStyle->"Inactive",
      Editable->False,
      Selectable->False,
      SyntaxForm->"*"], 
     RowBox[{"2", 
      TagBox["^",
       "InactiveToken",
       BaseStyle->"Inactive",
       Editable->False,
       Selectable->False,
       SyntaxForm->"^"], 
      RowBox[{"(", 
       RowBox[{"-", "1"}], ")"}]}]}]}]}], "]"}]], "Output",
 CellChangeTimes->{
  3.593727140433549*^9, 3.593727177273549*^9, 3.593727232518549*^9, {
   3.593727263578549*^9, 3.593727336848549*^9}, 3.593727385405549*^9, 
   3.593727550419549*^9, 3.593727593385549*^9}]
}, Open  ]],

Cell["\<\
It is annoying that the normalization does not place things in SIV form, but \
we get\
\>", "Text",
 CellChangeTimes->{{3.593727390818549*^9, 3.593727408052549*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"ClearAll", "[", "ii", "]"}], "\[IndentingNewLine]", 
 RowBox[{"With", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"n", "=", "10"}], "}"}], ",", "\[IndentingNewLine]", 
   RowBox[{"{", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"StrongSIV", "[", 
      RowBox[{"10", ",", 
       RowBox[{"Inactivate", "[", 
        RowBox[{"2", "+", 
         RowBox[{"2", "*", "ii"}]}], "]"}], ",", 
       RowBox[{"Inactivate", "[", 
        RowBox[{"0", "+", 
         RowBox[{"2", "*", "ii"}]}], "]"}]}], "]"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"StrongSIV", "[", 
      RowBox[{"10", ",", 
       RowBox[{"Inactivate", "[", 
        RowBox[{"2", "+", 
         RowBox[{"2", "*", "ii"}]}], "]"}], ",", 
       RowBox[{"Inactivate", "[", 
        RowBox[{"4", "+", 
         RowBox[{"2", "*", "ii"}]}], "]"}]}], "]"}]}], "\[IndentingNewLine]", 
    "}"}]}], "\[IndentingNewLine]", "]"}]}], "Input",
 CellChangeTimes->{{3.593724745611549*^9, 3.593724805329549*^9}, {
  3.593725105681549*^9, 3.593725146360549*^9}, {3.593727417089549*^9, 
  3.593727469702549*^9}, {3.593727605189549*^9, 3.593727606803549*^9}, {
  3.593727639623549*^9, 3.593727647044549*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "\<\"<\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "1"}], ",", "\<\"<\"\>"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.593724805877549*^9, 3.593724830251549*^9}, {
   3.593725126984549*^9, 3.5937251468055487`*^9}, 3.593727267339549*^9, 
   3.5937273860735493`*^9, {3.593727443447549*^9, 3.5937274701655493`*^9}, 
   3.5937275535335493`*^9, 3.5937276070995493`*^9, 3.593727647536549*^9}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["5.7", "Subsection",
 CellChangeTimes->{{3.5937245090155487`*^9, 3.5937245095675488`*^9}, {
   3.593724744018549*^9, 3.5937247443305492`*^9}, 3.593725209938549*^9, 
   3.593727626046549*^9}],

Cell[BoxData[
 RowBox[{
  RowBox[{"distances", "=", 
   RowBox[{"{", 
    RowBox[{"1", ",", 
     RowBox[{"-", "1"}]}], "}"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.593725605024549*^9, 3.593725610275549*^9}, {
  3.593727628735549*^9, 3.593727629806549*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"With", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"n", "=", "10"}], "}"}], ",", "\[IndentingNewLine]", 
   RowBox[{"Graphics", "[", 
    RowBox[{"{", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"Line", "[", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"0", ",", "0"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"n", ",", "0"}], "}"}]}], "}"}], "]"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"Table", "[", 
       RowBox[{
        RowBox[{"{", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"Opacity", "[", "0.5", "]"}], ",", 
            RowBox[{"Arrowheads", "[", "Small", "]"}], ",", 
            RowBox[{
             RowBox[{
              RowBox[{"Arrow", "[", 
               RowBox[{"BezierCurve", "[", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{"j", ",", "0"}], "}"}], ",", 
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{"j", "+", 
                    RowBox[{"#", "/", "2"}]}], ",", 
                    RowBox[{"#", "/", "2"}]}], "}"}], ",", 
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{"j", "+", "#"}], ",", "0"}], "}"}]}], "}"}], 
                "]"}], "]"}], "&"}], "/@", "distances"}]}], "}"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"PointSize", "[", "Large", "]"}], ",", "Red", ",", 
            RowBox[{"Point", "[", 
             RowBox[{"{", 
              RowBox[{"j", ",", "0"}], "}"}], "]"}], ",", "Black", ",", 
            RowBox[{"Text", "[", 
             RowBox[{
              RowBox[{"Style", "[", 
               RowBox[{"j", ",", "Bold"}], "]"}], ",", 
              RowBox[{"{", 
               RowBox[{"j", ",", 
                RowBox[{"-", "0.5"}]}], "}"}]}], "]"}]}], "}"}]}], 
         "\[IndentingNewLine]", "}"}], ",", "\[IndentingNewLine]", 
        RowBox[{"{", 
         RowBox[{"j", ",", "0", ",", "n"}], "}"}]}], "\[IndentingNewLine]", 
       "]"}]}], "\[IndentingNewLine]", "}"}], "]"}]}], "\[IndentingNewLine]", 
  "]"}]], "Input",
 CellChangeTimes->{{3.593725212920549*^9, 3.5937253366655493`*^9}, {
  3.593725374965549*^9, 3.5937253968835487`*^9}, {3.593725429068549*^9, 
  3.593725526273549*^9}, {3.593725620057549*^9, 3.593725765142549*^9}, {
  3.593725807181549*^9, 3.593725863131549*^9}}],

Cell[BoxData[
 GraphicsBox[{LineBox[{{0, 0}, {10, 0}}], {{
     {Opacity[0.5], Arrowheads[Small], 
      ArrowBox[BezierCurveBox[
       NCache[{{0, 0}, {Rational[1, 2], Rational[1, 2]}, {1, 0}}, {{0, 0}, {
         0.5, 0.5}, {1, 0}}]]], 
      ArrowBox[BezierCurveBox[
       NCache[{{0, 0}, {Rational[-1, 2], Rational[-1, 2]}, {-1, 0}}, {{0, 
         0}, {-0.5, -0.5}, {-1, 0}}]]]}, 
     {RGBColor[1, 0, 0], PointSize[Large], PointBox[{0, 0}], 
      {GrayLevel[0], InsetBox[
        StyleBox["0",
         StripOnInput->False,
         FontWeight->Bold], {0, -0.5}]}}}, {
     {Opacity[0.5], Arrowheads[Small], 
      ArrowBox[BezierCurveBox[
       NCache[{{1, 0}, {Rational[3, 2], Rational[1, 2]}, {2, 0}}, {{1, 0}, {
         1.5, 0.5}, {2, 0}}]]], 
      ArrowBox[BezierCurveBox[
       NCache[{{1, 0}, {Rational[1, 2], Rational[-1, 2]}, {0, 0}}, {{1, 0}, {
         0.5, -0.5}, {0, 0}}]]]}, 
     {RGBColor[1, 0, 0], PointSize[Large], PointBox[{1, 0}], 
      {GrayLevel[0], InsetBox[
        StyleBox["1",
         StripOnInput->False,
         FontWeight->Bold], {1, -0.5}]}}}, {
     {Opacity[0.5], Arrowheads[Small], 
      ArrowBox[BezierCurveBox[
       NCache[{{2, 0}, {Rational[5, 2], Rational[1, 2]}, {3, 0}}, {{2, 0}, {
         2.5, 0.5}, {3, 0}}]]], 
      ArrowBox[BezierCurveBox[
       NCache[{{2, 0}, {Rational[3, 2], Rational[-1, 2]}, {1, 0}}, {{2, 0}, {
         1.5, -0.5}, {1, 0}}]]]}, 
     {RGBColor[1, 0, 0], PointSize[Large], PointBox[{2, 0}], 
      {GrayLevel[0], InsetBox[
        StyleBox["2",
         StripOnInput->False,
         FontWeight->Bold], {2, -0.5}]}}}, {
     {Opacity[0.5], Arrowheads[Small], 
      ArrowBox[BezierCurveBox[
       NCache[{{3, 0}, {Rational[7, 2], Rational[1, 2]}, {4, 0}}, {{3, 0}, {
         3.5, 0.5}, {4, 0}}]]], 
      ArrowBox[BezierCurveBox[
       NCache[{{3, 0}, {Rational[5, 2], Rational[-1, 2]}, {2, 0}}, {{3, 0}, {
         2.5, -0.5}, {2, 0}}]]]}, 
     {RGBColor[1, 0, 0], PointSize[Large], PointBox[{3, 0}], 
      {GrayLevel[0], InsetBox[
        StyleBox["3",
         StripOnInput->False,
         FontWeight->Bold], {3, -0.5}]}}}, {
     {Opacity[0.5], Arrowheads[Small], 
      ArrowBox[BezierCurveBox[
       NCache[{{4, 0}, {Rational[9, 2], Rational[1, 2]}, {5, 0}}, {{4, 0}, {
         4.5, 0.5}, {5, 0}}]]], 
      ArrowBox[BezierCurveBox[
       NCache[{{4, 0}, {Rational[7, 2], Rational[-1, 2]}, {3, 0}}, {{4, 0}, {
         3.5, -0.5}, {3, 0}}]]]}, 
     {RGBColor[1, 0, 0], PointSize[Large], PointBox[{4, 0}], 
      {GrayLevel[0], InsetBox[
        StyleBox["4",
         StripOnInput->False,
         FontWeight->Bold], {4, -0.5}]}}}, {
     {Opacity[0.5], Arrowheads[Small], 
      ArrowBox[BezierCurveBox[
       NCache[{{5, 0}, {Rational[11, 2], Rational[1, 2]}, {6, 0}}, {{5, 0}, {
         5.5, 0.5}, {6, 0}}]]], 
      ArrowBox[BezierCurveBox[
       NCache[{{5, 0}, {Rational[9, 2], Rational[-1, 2]}, {4, 0}}, {{5, 0}, {
         4.5, -0.5}, {4, 0}}]]]}, 
     {RGBColor[1, 0, 0], PointSize[Large], PointBox[{5, 0}], 
      {GrayLevel[0], InsetBox[
        StyleBox["5",
         StripOnInput->False,
         FontWeight->Bold], {5, -0.5}]}}}, {
     {Opacity[0.5], Arrowheads[Small], 
      ArrowBox[BezierCurveBox[
       NCache[{{6, 0}, {Rational[13, 2], Rational[1, 2]}, {7, 0}}, {{6, 0}, {
         6.5, 0.5}, {7, 0}}]]], 
      ArrowBox[BezierCurveBox[
       NCache[{{6, 0}, {Rational[11, 2], Rational[-1, 2]}, {5, 0}}, {{6, 0}, {
         5.5, -0.5}, {5, 0}}]]]}, 
     {RGBColor[1, 0, 0], PointSize[Large], PointBox[{6, 0}], 
      {GrayLevel[0], InsetBox[
        StyleBox["6",
         StripOnInput->False,
         FontWeight->Bold], {6, -0.5}]}}}, {
     {Opacity[0.5], Arrowheads[Small], 
      ArrowBox[BezierCurveBox[
       NCache[{{7, 0}, {Rational[15, 2], Rational[1, 2]}, {8, 0}}, {{7, 0}, {
         7.5, 0.5}, {8, 0}}]]], 
      ArrowBox[BezierCurveBox[
       NCache[{{7, 0}, {Rational[13, 2], Rational[-1, 2]}, {6, 0}}, {{7, 0}, {
         6.5, -0.5}, {6, 0}}]]]}, 
     {RGBColor[1, 0, 0], PointSize[Large], PointBox[{7, 0}], 
      {GrayLevel[0], InsetBox[
        StyleBox["7",
         StripOnInput->False,
         FontWeight->Bold], {7, -0.5}]}}}, {
     {Opacity[0.5], Arrowheads[Small], 
      ArrowBox[BezierCurveBox[
       NCache[{{8, 0}, {Rational[17, 2], Rational[1, 2]}, {9, 0}}, {{8, 0}, {
         8.5, 0.5}, {9, 0}}]]], 
      ArrowBox[BezierCurveBox[
       NCache[{{8, 0}, {Rational[15, 2], Rational[-1, 2]}, {7, 0}}, {{8, 0}, {
         7.5, -0.5}, {7, 0}}]]]}, 
     {RGBColor[1, 0, 0], PointSize[Large], PointBox[{8, 0}], 
      {GrayLevel[0], InsetBox[
        StyleBox["8",
         StripOnInput->False,
         FontWeight->Bold], {8, -0.5}]}}}, {
     {Opacity[0.5], Arrowheads[Small], 
      ArrowBox[BezierCurveBox[
       NCache[{{9, 0}, {Rational[19, 2], Rational[1, 2]}, {10, 0}}, {{9, 0}, {
         9.5, 0.5}, {10, 0}}]]], 
      ArrowBox[BezierCurveBox[
       NCache[{{9, 0}, {Rational[17, 2], Rational[-1, 2]}, {8, 0}}, {{9, 0}, {
         8.5, -0.5}, {8, 0}}]]]}, 
     {RGBColor[1, 0, 0], PointSize[Large], PointBox[{9, 0}], 
      {GrayLevel[0], InsetBox[
        StyleBox["9",
         StripOnInput->False,
         FontWeight->Bold], {9, -0.5}]}}}, {
     {Opacity[0.5], Arrowheads[Small], 
      ArrowBox[BezierCurveBox[
       NCache[{{10, 0}, {Rational[21, 2], Rational[1, 2]}, {11, 0}}, {{10, 
         0}, {10.5, 0.5}, {11, 0}}]]], 
      ArrowBox[BezierCurveBox[
       NCache[{{10, 0}, {Rational[19, 2], Rational[-1, 2]}, {9, 0}}, {{10, 
         0}, {9.5, -0.5}, {9, 0}}]]]}, 
     {RGBColor[1, 0, 0], PointSize[Large], PointBox[{10, 0}], 
      {GrayLevel[0], InsetBox[
        StyleBox["10",
         StripOnInput->False,
         FontWeight->Bold], {10, -0.5}]}}}}},
  ImageSize->{572.8, 89.6}]], "Output",
 CellChangeTimes->{
  3.593725266120549*^9, {3.5937253171995487`*^9, 3.5937253229815493`*^9}, {
   3.593725393302549*^9, 3.593725397236549*^9}, {3.593725456214549*^9, 
   3.5937254607315493`*^9}, {3.593725499685549*^9, 3.5937255265855494`*^9}, 
   3.593725635693549*^9, {3.593725667503549*^9, 3.593725765615549*^9}, {
   3.593725819832549*^9, 3.593725863777549*^9}, 3.593727630885549*^9}]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]]
},
WindowSize->{847, 902},
WindowMargins->{{Automatic, 95}, {20, Automatic}},
PrintingCopies->1,
PrintingPageRange->{32000, 32000},
PrintingOptions->{"Magnification"->1.,
"PaperOrientation"->"Portrait",
"PaperSize"->{612, 792}},
ShowSelection->True,
FrontEndVersion->"10.0 for Microsoft Windows (64-bit) (November 12, 2013)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 155, 2, 90, "Title"],
Cell[CellGroupData[{
Cell[760, 28, 100, 1, 79, "Section"],
Cell[863, 31, 362, 13, 30, "Text"],
Cell[1228, 46, 521, 15, 30, "Text"],
Cell[1752, 63, 573, 15, 30, "Text"],
Cell[2328, 80, 944, 27, 32, "Text"],
Cell[3275, 109, 946, 27, 30, "Text"],
Cell[4224, 138, 891, 26, 30, "Text"],
Cell[5118, 166, 937, 27, 32, "Text"],
Cell[6058, 195, 1031, 32, 38, "Text"],
Cell[7092, 229, 158, 2, 30, "Text"],
Cell[7253, 233, 184, 11, 176, "Program"],
Cell[7440, 246, 266, 7, 30, "Text"],
Cell[7709, 255, 299, 7, 30, "Text"],
Cell[8011, 264, 853, 25, 84, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[8901, 294, 254, 3, 79, "Section"],
Cell[9158, 299, 1814, 48, 152, "Input"],
Cell[10975, 349, 916, 24, 72, "Input"],
Cell[CellGroupData[{
Cell[11916, 377, 1450, 38, 152, "Input"],
Cell[13369, 417, 531, 11, 31, "Output"],
Cell[13903, 430, 531, 11, 31, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[14471, 446, 223, 7, 31, "Input"],
Cell[14697, 455, 353, 8, 31, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[15087, 468, 342, 9, 31, "Input"],
Cell[15432, 479, 405, 9, 31, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[15874, 493, 291, 8, 31, "Input"],
Cell[16168, 503, 307, 8, 31, "Output"]
}, Open  ]],
Cell[16490, 514, 3950, 105, 232, "Input"],
Cell[20443, 621, 5288, 120, 572, "Input"],
Cell[CellGroupData[{
Cell[25756, 745, 159, 4, 31, "Input"],
Cell[25918, 751, 3781, 86, 131, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[29736, 842, 187, 4, 31, "Input"],
Cell[29926, 848, 3869, 89, 131, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[33832, 942, 183, 4, 31, "Input"],
Cell[34018, 948, 3914, 89, 131, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[37969, 1042, 256, 5, 31, "Input"],
Cell[38228, 1049, 9387, 199, 447, "Output"]
}, Open  ]],
Cell[47630, 1251, 789, 22, 112, "Input"],
Cell[CellGroupData[{
Cell[48444, 1277, 139, 3, 31, "Input"],
Cell[48586, 1282, 7549, 170, 447, "Output"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[56184, 1458, 313, 4, 79, "Section"],
Cell[56500, 1464, 449, 8, 49, "Text"],
Cell[CellGroupData[{
Cell[56974, 1476, 98, 1, 43, "Subsection"],
Cell[57075, 1479, 533, 9, 68, "Text"],
Cell[57611, 1490, 3395, 117, 115, "Text"],
Cell[61009, 1609, 958, 30, 68, "Text"],
Cell[61970, 1641, 184, 2, 30, "Text"],
Cell[62157, 1645, 333, 8, 96, "Program"],
Cell[62493, 1655, 163, 3, 30, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[62693, 1663, 424, 6, 43, "Subsection"],
Cell[63120, 1671, 818, 30, 49, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[63975, 1706, 514, 9, 43, "Subsection"],
Cell[64492, 1717, 250, 5, 30, "Text"],
Cell[64745, 1724, 4238, 134, 134, "Text"],
Cell[68986, 1860, 1476, 41, 215, "Input"],
Cell[70465, 1903, 92, 1, 30, "Text"],
Cell[70560, 1906, 431, 10, 96, "Program"],
Cell[CellGroupData[{
Cell[71016, 1920, 643, 13, 31, "Input"],
Cell[71662, 1935, 399, 7, 31, "Output"]
}, Open  ]],
Cell[72076, 1945, 192, 3, 30, "Text"],
Cell[72271, 1950, 509, 11, 96, "Program"],
Cell[CellGroupData[{
Cell[72805, 1965, 692, 14, 31, "Input"],
Cell[73500, 1981, 449, 7, 31, "Output"]
}, Open  ]],
Cell[73964, 1991, 279, 8, 30, "Text"],
Cell[74246, 2001, 561, 11, 96, "Program"],
Cell[CellGroupData[{
Cell[74832, 2016, 692, 14, 31, "Input"],
Cell[75527, 2032, 503, 9, 46, "Output"]
}, Open  ]],
Cell[76045, 2044, 191, 2, 30, "Text"],
Cell[76239, 2048, 510, 11, 96, "Program"],
Cell[CellGroupData[{
Cell[76774, 2063, 642, 13, 31, "Input"],
Cell[77419, 2078, 381, 6, 31, "Output"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[77849, 2090, 491, 8, 43, "Subsection"],
Cell[78343, 2100, 3427, 103, 115, "Text"],
Cell[81773, 2205, 1326, 36, 195, "Input"],
Cell[83102, 2243, 92, 1, 30, "Text"],
Cell[83197, 2246, 476, 10, 96, "Program"],
Cell[CellGroupData[{
Cell[83698, 2260, 604, 11, 31, "Input"],
Cell[84305, 2273, 421, 7, 31, "Output"]
}, Open  ]],
Cell[84741, 2283, 192, 3, 30, "Text"],
Cell[84936, 2288, 526, 11, 96, "Program"],
Cell[CellGroupData[{
Cell[85487, 2303, 657, 12, 31, "Input"],
Cell[86147, 2317, 477, 8, 31, "Output"]
}, Open  ]],
Cell[86639, 2328, 279, 8, 30, "Text"],
Cell[86921, 2338, 608, 12, 96, "Program"],
Cell[CellGroupData[{
Cell[87554, 2354, 657, 12, 31, "Input"],
Cell[88214, 2368, 527, 9, 46, "Output"]
}, Open  ]],
Cell[88756, 2380, 191, 2, 30, "Text"],
Cell[88950, 2384, 544, 11, 96, "Program"],
Cell[CellGroupData[{
Cell[89519, 2399, 602, 11, 31, "Input"],
Cell[90124, 2412, 452, 8, 31, "Output"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[90625, 2426, 514, 9, 67, "Subsection"],
Cell[91142, 2437, 250, 5, 30, "Text"],
Cell[91395, 2444, 3523, 105, 116, "Text"],
Cell[94921, 2551, 1454, 38, 196, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[96412, 2594, 384, 6, 43, "Subsection"],
Cell[96799, 2602, 116, 1, 30, "Text"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[96964, 2609, 155, 2, 79, "Section"],
Cell[97122, 2613, 135, 1, 30, "Text"],
Cell[97260, 2616, 557, 15, 31, "Input"],
Cell[CellGroupData[{
Cell[97842, 2635, 1109, 30, 92, "Input"],
Cell[98954, 2667, 37303, 627, 382, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[136294, 3299, 525, 11, 52, "Input"],
Cell[136822, 3312, 2687, 82, 92, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[139546, 3399, 258, 7, 31, "Input"],
Cell[139807, 3408, 1346, 43, 52, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[141190, 3456, 628, 14, 31, "Input"],
Cell[141821, 3472, 564, 11, 284, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[142422, 3488, 636, 19, 72, "Input"],
Cell[143061, 3509, 10564, 186, 382, "Output"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[153674, 3701, 437, 5, 79, "Section"],
Cell[154114, 3708, 97, 1, 30, "Text"],
Cell[154214, 3711, 514, 11, 112, "Program"],
Cell[154731, 3724, 171, 4, 30, "Text"],
Cell[154905, 3730, 901, 27, 52, "Input"],
Cell[CellGroupData[{
Cell[155831, 3761, 180, 4, 31, "Input"],
Cell[156014, 3767, 141, 3, 31, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[156192, 3775, 1115, 30, 152, "Input"],
Cell[157310, 3807, 2326, 33, 325, "Output"]
}, Open  ]],
Cell[159651, 3843, 179, 2, 30, "Text"],
Cell[159833, 3847, 694, 13, 112, "Program"],
Cell[160530, 3862, 191, 2, 30, "Text"],
Cell[160724, 3866, 2578, 80, 132, "Input"],
Cell[CellGroupData[{
Cell[163327, 3950, 417, 11, 31, "Input"],
Cell[163747, 3963, 357, 12, 31, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[164141, 3980, 1663, 42, 172, "Input"],
Cell[165807, 4024, 8314, 173, 331, "Output"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[174170, 4203, 249, 3, 79, "Section"],
Cell[174422, 4208, 2275, 58, 272, "Input"],
Cell[176700, 4268, 565, 11, 52, "Input"],
Cell[CellGroupData[{
Cell[177290, 4283, 842, 20, 172, "Input"],
Cell[178135, 4305, 1829, 61, 31, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[180001, 4371, 147, 2, 31, "Input"],
Cell[180151, 4375, 1233, 39, 31, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[181421, 4419, 1313, 29, 172, "Input"],
Cell[182737, 4450, 2677, 86, 31, "Output"]
}, Open  ]],
Cell[185429, 4539, 6914, 177, 772, "Input"],
Cell[CellGroupData[{
Cell[192368, 4720, 195, 3, 31, "Input"],
Cell[192566, 4725, 57771, 958, 382, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[250374, 5688, 1529, 39, 232, "Input"],
Cell[251906, 5729, 2569, 93, 31, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[254512, 5827, 146, 2, 31, "Input"],
Cell[254661, 5831, 96030, 1591, 374, 73814, 1226, "CachedBoxData", "BoxData", \
"Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[350728, 7427, 1279, 31, 232, "Input"],
Cell[352010, 7460, 1553, 56, 31, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[353600, 7521, 146, 2, 31, "Input"],
Cell[353749, 7525, 118501, 1963, 563, 83597, 1390, "CachedBoxData", \
"BoxData", "Output"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[472299, 9494, 353, 5, 79, "Section"],
Cell[472655, 9501, 119, 1, 30, "Text"],
Cell[472777, 9504, 2692, 63, 304, "Input"],
Cell[CellGroupData[{
Cell[475494, 9571, 515, 12, 52, "Input"],
Cell[476012, 9585, 1150, 38, 31, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[477199, 9628, 132, 2, 31, "Input"],
Cell[CellGroupData[{
Cell[477356, 9634, 238, 4, 23, "Print"],
Cell[477597, 9640, 238, 4, 23, "Print"],
Cell[477838, 9646, 238, 4, 23, "Print"],
Cell[478079, 9652, 238, 4, 23, "Print"],
Cell[478320, 9658, 240, 4, 23, "Print"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[478609, 9668, 445, 10, 52, "Input"],
Cell[CellGroupData[{
Cell[479079, 9682, 217, 3, 23, "Print"],
Cell[479299, 9687, 217, 3, 23, "Print"],
Cell[479519, 9692, 217, 3, 23, "Print"],
Cell[479739, 9697, 217, 3, 23, "Print"],
Cell[479959, 9702, 217, 3, 23, "Print"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[480237, 9712, 314, 4, 79, "Section"],
Cell[CellGroupData[{
Cell[480576, 9720, 95, 1, 43, "Subsection"],
Cell[480674, 9723, 244, 5, 31, "Input"],
Cell[480921, 9730, 857, 26, 112, "Input"],
Cell[481781, 9758, 359, 7, 49, "Text"],
Cell[CellGroupData[{
Cell[482165, 9769, 270, 6, 31, "Input"],
Cell[482438, 9777, 12524, 270, 377, "Output"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[495011, 10053, 146, 2, 43, "Subsection"],
Cell[495160, 10057, 949, 32, 51, "Text"],
Cell[496112, 10091, 527, 10, 80, "Program"],
Cell[CellGroupData[{
Cell[496664, 10105, 1089, 28, 152, "Input"],
Cell[497756, 10135, 378, 10, 31, "Output"]
}, Open  ]],
Cell[498149, 10148, 269, 5, 49, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[498455, 10158, 169, 2, 43, "Subsection"],
Cell[498627, 10162, 211, 6, 31, "Input"],
Cell[CellGroupData[{
Cell[498863, 10172, 2517, 63, 252, "Input"],
Cell[501383, 10237, 4328, 96, 105, "Output"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[505760, 10339, 195, 3, 43, "Subsection"],
Cell[505958, 10344, 181, 2, 30, "Text"],
Cell[CellGroupData[{
Cell[506164, 10350, 947, 25, 132, "Input"],
Cell[507114, 10377, 2576, 88, 75, "Output"]
}, Open  ]],
Cell[509705, 10468, 175, 4, 30, "Text"],
Cell[CellGroupData[{
Cell[509905, 10476, 903, 23, 112, "Input"],
Cell[510811, 10501, 516, 14, 46, "Output"]
}, Open  ]],
Cell[511342, 10518, 104, 1, 30, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[511483, 10524, 217, 3, 43, "Subsection"],
Cell[511703, 10529, 181, 2, 30, "Text"],
Cell[CellGroupData[{
Cell[511909, 10535, 998, 26, 132, "Input"],
Cell[512910, 10563, 2598, 88, 75, "Output"]
}, Open  ]],
Cell[515523, 10654, 175, 4, 30, "Text"],
Cell[CellGroupData[{
Cell[515723, 10662, 1191, 29, 152, "Input"],
Cell[516917, 10693, 498, 11, 31, "Output"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[517464, 10710, 195, 3, 43, "Subsection"],
Cell[517662, 10715, 260, 7, 31, "Input"],
Cell[CellGroupData[{
Cell[517947, 10726, 2517, 63, 252, "Input"],
Cell[520467, 10791, 6179, 140, 105, "Output"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}
]
*)

(* End of internal cache information *)
